{"version":3,"file":"static/js/9572.fabecb95.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["const decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\n/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(buffer: Buffer) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n\n  let blockStart = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const l = (decoder?.decode(b) || b.toString()).trim()\n    blockStart = n + 1\n    const l_tab = l.replaceAll(' ', '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]\n      t_start = +l_vec[5]\n      t_end = +l_vec[6]\n      q_name = l_vec[7]\n      q_size = l_vec[8]\n      q_strand = l_vec[9]\n      q_start = +l_vec[10]\n      q_end = +l_vec[11]\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0] || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += size_ungapped_alignment + 'M'\n      }\n      if (diff_in_query !== 0) {\n        cigar += diff_in_query + 'I'\n      }\n      if (diff_in_target !== 0) {\n        cigar += diff_in_target + 'D'\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return paf_chain2paf(buf)\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["decoder","TextDecoder","undefined","generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","ChainAdapter","PAFAdapter","setupPre","opts","loc","openLocation","this","getConf","pluginManager","buffer","readFile","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","blockStart","length","n","indexOf","b","slice","l_vec","decode","toString","trim","replaceAll","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","paf_chain2paf","buf","isGzip","unzip","getMismatches","MismatchParser","SyntenyFeature","SimpleFeature","get","arg","super","weightedMean","tuples","valueSum","weightSum","reduce","_ref2","_ref3","value","weight","parsePAFLine","line","fields","Object","fromEntries","map","field","r","flipCigar","arr","i","op","parseCigar","BaseFeatureDataAdapter","constructor","arguments","setupP","setup","catch","e","pm","pafLocation","parseLineByLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","_opts$regions","r1","regions","assemblyName","feats","idx","set","Set","feat","add","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","entry","key","quals","len","meanScoreMap","entries","_ref","val","zip","meanScore","min","getWeightedMeans","index","start","end","refName","qref","concat","observer","complete","mateName","mateStart","mateEnd","flip","doesIntersect2","rest","CIGAR","join","next","uniqueId","type","syntenyId","identity","mate","freeResources","capabilities","parseBed","text","Map","filter","f","startsWith","name","score","file","fatal","a","cb"],"sourceRoot":""}