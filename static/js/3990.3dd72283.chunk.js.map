{"version":3,"file":"static/js/3990.3dd72283.chunk.js","mappings":"8RAkBA,SAASA,IACP,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAACC,KAAM,GAAIC,MAAO,CAAEC,YAAa,OAClDJ,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CAACC,QAAQ,SAAQP,SAAC,mBAGnC,CAEA,SAASQ,EAAeC,EAAaC,GACnC,OAAOC,EAAAA,EAAAA,iBAAgB,OAASF,EAAKC,EACvC,CAEe,SAASE,EAAYC,GAMhC,IANiC,MACnCC,EAAK,YACLC,GAIDF,EACC,MAAMG,GAAUC,EAAAA,EAAAA,YAAWH,GACrBI,EAA6C,qBAApBC,iBACxBC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASJ,IAChDK,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,aACnBK,EAAUC,GAAepB,EAAY,OAAQ,gBAC7CqB,EAAWC,GAAgBtB,EAChC,QACAQ,EAAQa,WAAa,WAEvB,OACE9B,EAAAA,EAAAA,MAACgC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASlB,EAAamB,MAAM,aAAYlC,SAAA,EACnDD,EAAAA,EAAAA,MAACoC,EAAAA,EAAa,CAAAnC,SAAA,CACXyB,GACCxB,EAAAA,EAAAA,KAACmC,EAAAA,aAAY,CAACX,MAAOA,IACnBF,GACFtB,EAAAA,EAAAA,KAACH,EAAc,IACb,MACJG,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CACRC,WAAW,WACXC,MAAOZ,EACPa,SAAUC,GAASb,EAAYa,EAAMC,OAAOH,UAE9CtC,EAAAA,EAAAA,KAAA,SAECe,EAAQ2B,WACP1C,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CACRO,QAAM,EACNC,MAAM,QACNN,MAAOV,EACPW,SAAUC,GAASX,EAAaW,EAAMC,OAAOH,OAAOvC,SAEnD8C,OAAOC,QAAQ/B,EAAQ2B,aAAaK,KAAIC,IAAA,IAAExC,EAAKC,GAAIuC,EAAA,OAClDhD,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAWX,MAAO9B,EAAIT,SAG3BU,EAAIyC,MAAQ,kBAHD1C,EAKJ,MAGb,KACHS,GACCjB,EAAAA,EAAAA,KAACmD,EAAAA,EAAgB,CACfC,SACEpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAQ,CACPC,QAASnC,EACToB,SAAUA,IAAMnB,GAAmBX,IAAQA,MAG/CmC,MAAM,kFAGR5C,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CAAAN,SAAC,6FAMhBD,EAAAA,EAAAA,MAACyD,EAAAA,EAAa,CAAAxD,SAAA,EACZC,EAAAA,EAAAA,KAACwD,EAAAA,EAAM,CACLC,QAAQ,YACRC,MAAM,YACNC,QAASA,IAAM7C,IAAcf,SAC9B,YAGDC,EAAAA,EAAAA,KAACwD,EAAAA,EAAM,CACLC,QAAQ,YACRC,MAAM,UACNE,KAAK,SACLD,QAASE,UACPtC,GAAW,GACXE,OAASqC,GACT,UACQjD,EAAMkD,UAAU,CACpB5C,kBACAO,WACAE,cAEFd,GACF,CAAE,MAAOkD,GACPC,QAAQzC,MAAMwC,GACdvC,EAASuC,GACTzC,GAAW,EACb,GACAxB,SACH,gBAMT,C","sources":["../../../plugins/circular-view/src/CircularView/components/ExportSvgDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\n\n// locals\nimport { ExportSvgOptions } from '../models/CircularView'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage('svg-' + key, val)\n}\n\nexport default function ExportSvgDlg({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => setFilename(event.target.value)}\n        />\n        <br />\n\n        {session.allThemes ? (\n          <TextField\n            select\n            label=\"Theme\"\n            value={themeName}\n            onChange={event => setThemeName(event.target.value)}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => setRasterizeLayers(val => !val)}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClose()}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["LoadingMessage","_jsxs","children","_jsx","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDlg","_ref","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","TextField","helperText","value","onChange","event","target","allThemes","select","label","Object","entries","map","_ref2","MenuItem","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","variant","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}