{"version":3,"file":"static/js/4872.0f9dd383.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/ImportForm.tsx","../../../node_modules/@mui/system/esm/Container/createContainer.js","../../../node_modules/@mui/material/Container/Container.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  FormControl,\n  Container,\n  Grid,\n  CircularProgress,\n} from '@mui/material'\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults'\n\n// icons\nimport CloseIcon from '@mui/icons-material/Close'\n\n// locals\nimport RefNameAutocomplete from './RefNameAutocomplete'\nimport { fetchResults, splitLast } from './util'\nimport { LinearGenomeViewModel } from '..'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(2),\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  container: {\n    padding: theme.spacing(4),\n  },\n}))\n\ntype LGV = LinearGenomeViewModel\n\nconst LinearGenomeViewImportForm = observer(function ({\n  model,\n}: {\n  model: LGV\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames, assemblyManager, textSearchManager } = session\n  const { rankSearchResults, error } = model\n  const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0])\n  const [option, setOption] = useState<BaseResult>()\n  const searchScope = model.searchScope(selectedAsm)\n  const assembly = assemblyManager.get(selectedAsm)\n  const assemblyError = assemblyNames.length\n    ? assembly?.error\n    : 'No configured assemblies'\n  const displayError = assemblyError || error\n  const [value, setValue] = useState('')\n  const regions = assembly?.regions\n  const assemblyLoaded = !!regions\n  const r0 = regions ? regions[0]?.refName : ''\n\n  // useEffect resets to an \"initial state\" of displaying first region from\n  // assembly after assembly change. needs to react to selectedAsm as well as\n  // r0 because changing assembly will run setValue('') and then r0 may not\n  // change if assembly names are the same across assemblies, but it still\n  // needs to be reset\n  useEffect(() => {\n    setValue(r0)\n  }, [r0, selectedAsm])\n\n  async function navToOption(option: BaseResult) {\n    const location = option.getLocation()\n    const trackId = option.getTrackId()\n    if (location) {\n      await model.navToLocString(location, selectedAsm)\n      if (trackId) {\n        model.showTrack(trackId)\n      }\n    }\n  }\n\n  // gets a string as input, or use stored option results from previous query,\n  // then re-query and\n  // 1) if it has multiple results: pop a dialog\n  // 2) if it's a single result navigate to it\n  // 3) else assume it's a locstring and navigate to it\n  async function handleSelectedRegion(input: string) {\n    try {\n      if (option?.getDisplayString() === input && option.hasLocation()) {\n        await navToOption(option)\n      } else if (option?.results?.length) {\n        model.setSearchResults(option.results, option.getLabel(), selectedAsm)\n      } else {\n        const [ref, rest] = splitLast(input, ':')\n        const allRefs = assembly?.allRefNamesWithLowerCase || []\n        if (\n          allRefs.includes(input) ||\n          (allRefs.includes(ref) && !Number.isNaN(Number.parseInt(rest, 10)))\n        ) {\n          await model.navToLocString(input, selectedAsm)\n        } else {\n          const results = await fetchResults({\n            queryString: input,\n            searchType: 'exact',\n            searchScope,\n            rankSearchResults,\n            textSearchManager,\n            assembly,\n          })\n\n          if (results.length > 1) {\n            model.setSearchResults(results, input.toLowerCase(), selectedAsm)\n          } else if (results.length === 1) {\n            await navToOption(results[0])\n          } else {\n            await model.navToLocString(input, selectedAsm)\n          }\n        }\n      }\n    } catch (e) {\n      console.error(e)\n      session.notify(`${e}`, 'warning')\n    }\n  }\n\n  // implementation notes:\n  // having this wrapped in a form allows intuitive use of enter key to submit\n  return (\n    <div className={classes.container}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Container className={classes.importFormContainer}>\n        <form\n          onSubmit={async event => {\n            event.preventDefault()\n            model.setError(undefined)\n            if (value) {\n              // has it's own error handling\n              await handleSelectedRegion(value)\n            }\n          }}\n        >\n          <Grid\n            container\n            spacing={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <FormControl>\n                <AssemblySelector\n                  onChange={val => setSelectedAsm(val)}\n                  localStorageKey=\"lgv\"\n                  session={session}\n                  selected={selectedAsm}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item>\n              {selectedAsm ? (\n                assemblyError ? (\n                  <CloseIcon style={{ color: 'red' }} />\n                ) : assemblyLoaded ? (\n                  <FormControl>\n                    <RefNameAutocomplete\n                      fetchResults={queryString =>\n                        fetchResults({\n                          queryString,\n                          assembly,\n                          textSearchManager,\n                          rankSearchResults,\n                          searchScope,\n                        })\n                      }\n                      model={model}\n                      assemblyName={selectedAsm}\n                      value={value}\n                      minWidth={270}\n                      onChange={str => setValue(str)}\n                      onSelect={val => setOption(val)}\n                      TextFieldProps={{\n                        variant: 'outlined',\n                        helperText:\n                          'Enter sequence name, feature name, or location',\n                      }}\n                    />\n                  </FormControl>\n                ) : (\n                  <CircularProgress size={20} disableShrink />\n                )\n              ) : null}\n            </Grid>\n            <Grid item>\n              <FormControl>\n                <Button\n                  type=\"submit\"\n                  disabled={!value}\n                  className={classes.button}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Open\n                </Button>\n              </FormControl>\n              <FormControl>\n                <Button\n                  disabled={!value}\n                  className={classes.button}\n                  onClick={() => {\n                    model.setError(undefined)\n                    model.showAllRegionsInAssembly(selectedAsm)\n                  }}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Show all regions in assembly\n                </Button>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </form>\n      </Container>\n    </div>\n  )\n})\n\nexport default LinearGenomeViewImportForm\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\", \"classes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, unstable_composeClasses as composeClasses, unstable_generateUtilityClass as generateUtilityClass } from '@mui/utils';\nimport useThemePropsSystem from '../useThemeProps';\nimport systemStyled from '../styled';\nimport createTheme from '../createTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => _extends({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    display: 'block'\n  }, !ownerState.disableGutters && {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => _extends({}, ownerState.maxWidth === 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up('xs')]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }\n  }, ownerState.maxWidth &&\n  // @ts-ignore module augmentation fails if custom breakpoints are used\n  ownerState.maxWidth !== 'xs' && {\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    [theme.breakpoints.up(ownerState.maxWidth)]: {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n    }\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n        className,\n        component = 'div',\n        disableGutters = false,\n        fixed = false,\n        maxWidth = 'lg'\n      } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n    const ownerState = _extends({}, props, {\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    });\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, _extends({\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref\n      }, other))\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["useStyles","makeStyles","theme","importFormContainer","padding","spacing","button","margin","container","observer","_ref","_regions$","model","classes","session","getSession","assemblyNames","assemblyManager","textSearchManager","rankSearchResults","error","selectedAsm","setSelectedAsm","useState","option","setOption","searchScope","assembly","get","assemblyError","length","displayError","value","setValue","regions","assemblyLoaded","r0","refName","async","navToOption","location","getLocation","trackId","getTrackId","navToLocString","showTrack","useEffect","_jsxs","className","children","_jsx","ErrorMessage","Container","onSubmit","event","preventDefault","setError","undefined","input","_option$results","getDisplayString","hasLocation","results","setSearchResults","getLabel","ref","rest","splitLast","allRefs","allRefNamesWithLowerCase","includes","Number","isNaN","parseInt","fetchResults","queryString","searchType","toLowerCase","e","console","notify","concat","handleSelectedRegion","Grid","justifyContent","alignItems","item","FormControl","AssemblySelector","onChange","val","localStorageKey","selected","CloseIcon","style","color","RefNameAutocomplete","assemblyName","minWidth","str","onSelect","TextFieldProps","variant","helperText","CircularProgress","size","disableShrink","Button","type","disabled","onClick","showAllRegionsInAssembly","_excluded","defaultTheme","createTheme","defaultCreateStyledComponent","systemStyled","name","slot","overridesResolver","props","styles","ownerState","root","capitalize","String","maxWidth","fixed","disableGutters","useThemePropsDefault","inProps","useThemePropsSystem","options","arguments","createStyledComponent","useThemeProps","componentName","ContainerRoot","_extends","width","marginLeft","boxSizing","marginRight","display","paddingLeft","paddingRight","breakpoints","up","_ref2","Object","keys","values","reduce","acc","breakpointValueKey","breakpoint","unit","_ref3","Math","max","xs","React","component","other","_objectWithoutPropertiesLoose","useUtilityClasses","slots","composeClasses","generateUtilityClass","as","clsx","createContainer","styled"],"sourceRoot":""}