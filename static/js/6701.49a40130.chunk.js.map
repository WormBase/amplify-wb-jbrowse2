{"version":3,"file":"static/js/6701.49a40130.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: Function\n    removeAtIndex: Function\n    add: Function\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={idx} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={() => slot.removeAtIndex(idx)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <>\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        style={{ margin: 2 }}\n                        data-testid={`stringArrayAdd-${slot.name}`}\n                        onClick={() => {\n                          setAddNew(false)\n                          slot.add(value)\n                          setValue('')\n                        }}\n                      >\n                        OK\n                      </Button>\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        style={{ margin: 2 }}\n                        onClick={() => {\n                          setAddNew(false)\n                          setValue('')\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    </>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => setAddNew(true)}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => setCode(event.target.value)}\n          style={{ background: error ? '#fdd' : undefined }}\n          InputProps={{\n            classes: {\n              input: classes.textAreaFont,\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\n\nconst ColorPicker = lazy(() => import('@jbrowse/core/ui/ColorPicker'))\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => onChange(event.target.value)}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={<div />}>\n          <ColorPicker color={value} onChange={event => onChange(event)} />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => slot.set(color)}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) =>\n                  slot.setAtKeyIndex(key, idx, val),\n                removeAtIndex: (idx: number) => slot.removeAtKeyIndex(key, idx),\n                add: (val: string) => slot.addToKey(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import React from 'react'\nimport { TextField, TextFieldProps } from '@mui/material'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      FormHelperTextProps={{\n        component: 'div',\n      }}\n      fullWidth\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nexport default NumberEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => slot.add(key, val),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => slot.set(evt.target.checked)}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getSubType,\n  getUnionSubTypes,\n  ILiteralType,\n} from '@jbrowse/core/util/mst-reflection'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\n\n// icons\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport NumberMapEditor from './NumberMapEditor'\nimport NumberEditor from './NumberEditor'\nimport BooleanEditor from './BooleanEditor'\nimport {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => slot.set(evt.target.value)}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value))[1],\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: theme.palette.tertiary?.contrastText || '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = `${singular(slotName)} ${slotIndex + 1}`\n        return <Member {...props} key={key} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeSelector}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const { target } = model\n  const key = target && readConfObject(target, 'trackId')\n  const name = target && readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n      >\n        <Typography>{name ?? 'Configuration'}</Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        {!target ? 'no target set' : <Schema schema={target} />}\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","_ref","slot","value","setValue","useState","addNew","setAddNew","_jsxs","_Fragment","children","name","_jsx","InputLabel","List","disablePadding","map","val","idx","ListItem","disableGutters","TextField","onChange","evt","setAtIndex","target","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","removeAtIndex","DeleteIcon","placeholder","event","Button","color","variant","style","margin","concat","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","_getEnv$pluginManager","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","input","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","HelpIcon","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","displayed","setDisplayed","display","React","fallback","helperText","fullWidth","card","spacing","_ref2","key","Card","raised","CardHeader","action","remove","CardContent","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","AddIcon","ConfigurationTextField","SanitizedHTML","html","FormHelperTextProps","component","setVal","num","Number","parseFloat","_slot$reset","isNaN","reset","call","type","NumberEditor","FormControl","FormControlLabel","control","Checkbox","checked","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","_ref3","parseInt","StringEnumEditor","_ref4","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","_ref5","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","_ref6","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","_theme$palette$tertia","expandIcon","tertiary","contrastText","root","padding","expansionPanelDetails","accordion","border","primary","noOverflow","Member","schema","path","typeSelector","isConfigurationSchemaType","subslot","slotIndex","singular","_createElement","getTypeNamesFromExplicitlyTypedUnion","TypeSelector","setSubschema","Accordion","defaultExpanded","AccordionSummary","ExpandMoreIcon","Typography","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}