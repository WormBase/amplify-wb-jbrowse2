{"version":3,"file":"static/js/7028.fa7c2231.chunk.js","mappings":"mVAIMA,EAAe,UAErB,SAASC,EAAYC,EAAaC,GAChC,IAAMC,EAASF,EAAOG,UAAUF,GAC1BG,EAAe,SAAHC,OAAYJ,GAC9BD,EAAOG,UAAUF,GAAc,WAI7B,OAHMG,KAAgBE,OACpBA,KAAKF,GAAgBF,EAAOK,KAAKD,OAE5BA,KAAKF,EACd,CACF,CAMA,IAJA,IAAMI,EAAS,CAAC,IAAK,IAAK,IAAK,KAGzBC,EAAe,GACZC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAaE,KACXH,EAAQE,GAAK,EAAK,GAChBF,EAAQE,GAAK,EAAK,GAClBF,EAAQE,GAAK,EAAK,GAClBF,EAAW,EAAJE,IAKb,IAAME,EAAqBH,EAAaI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,aAAa,IAEnDC,EAAU,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAW7B,SAAAZ,EAAAa,GAMC,IALCC,EAAUD,EAAVC,WACAC,EAAIF,EAAJE,KAKA,IALIC,EAAAA,EAAAA,GAAA,KAAAhB,GAKAc,EACFxB,KAAKwB,WAAaA,MACb,KAAIC,EAGT,MAAM,IAAIE,MAAM,kCAFhB3B,KAAKwB,WAAa,IAAII,EAAAA,GAAUH,E,CAIlCzB,KAAK6B,iBAAcC,CACrB,CAsXC,OAtXAC,EAAAA,EAAAA,GAAArB,EAAA,EAAAsB,IAAA,aAAAC,MAAA,SAAAC,GAAA,OAAAvB,EAAAA,IAAAwB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAC,EAAiBC,GAAgB,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACT5C,KAAK6C,cAAa,OAA5B,GAA4BH,EAAAI,GAAEP,EAApCC,EAAME,EAAAK,KAAAL,EAAAI,IACC,CAAFJ,EAAAE,KAAA,cACH,IAAIjB,MAAM,UAAD5B,OAAWwC,EAAI,eAAa,cAAAG,EAAAM,OAAA,SAEtCR,GAAM,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,WACdY,MAAA,KAAAC,UAAA,IAAAnB,IAAA,oBAAAC,MAAA,kBAAArB,EAAAA,IAAAuB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAe,IAAA,IAAAC,EAAAC,EAAA,OAAAlB,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAAAW,EAAAX,KAAA,EACoB5C,KAAKwB,WAAWgC,KAAKC,EAAOC,YAAY,GAAI,EAAG,EAAG,GAAE,OACxD,GADRL,EAAGE,EAAAR,MACDO,EAAWD,EAAXC,QACGK,YAAY,KAAOnE,EAAY,CAAA+D,EAAAX,KAAA,QACxC5C,KAAK6B,aAAc,EACnB7B,KAAK4D,QAAUN,EAAOK,YAAY,GAAEJ,EAAAX,KAAA,mBAC3BU,EAAOO,YAAY,KAAOrE,EAAY,CAAA+D,EAAAX,KAAA,SAC/C5C,KAAK6B,aAAc,EACnB7B,KAAK4D,QAAUN,EAAOO,YAAY,GAAEN,EAAAX,KAAA,uBAE9B,IAAIjB,MAAM,mBAAkB,yBAAA4B,EAAAN,OAAA,GAAAG,EAAA,WAErCF,MAAA,KAAAC,UAAA,GAGD,CAAAnB,IAAA,cAAAC,MAAA,kBAAApB,EAAAA,IAAAsB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAIA,SAAAyB,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA9B,EAAAA,EAAAA,KAAAK,MAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAAAuB,EAAAvB,KAAA,EACQ5C,KAAKoE,oBAAmB,OA8BT,OA5BfL,EAAY/D,KAAK6B,YAAc,MAAQ,SACvCmC,EAAOhE,KAAK6B,YAAc,KAAO,KAEnCoC,GAAmB,IAAII,EAAAA,GACxBN,UAAUA,GACVO,MAAM,cACNC,OAAO,OAAQ,CAAEC,OAAQ,eAE1BP,EADmB,IAAjBjE,KAAK4D,QACYK,EAAiBX,OAAO,cAAe,CACxDkB,OAAQ,IAGSP,EAAiBQ,OAAO,UAGvCP,GAAS,IAAIG,EAAAA,GAChBN,UAAUA,GACVW,MAAM,QAAS,CACdC,OAAQ,SAACC,GAAS,OAAW,YAANA,CAAgB,IAExCF,MAAM,UAAW,CAEhBC,OAAQ,SAACE,GAAS,OAAW,IAANA,GAAiB,IAANA,CAAO,IAE1CJ,OAAO,gBAAiB,CAEvBE,OAAQ,SAACE,GAAS,OAAKA,GAAK,CAAC,IAE9BJ,OAAO,YAAWN,EAAAnB,OAAA,SAEd,CACLkB,OAAAA,EACAY,OAAO,IAAIT,EAAAA,GACRN,UAAUA,GACVU,OAAO,iBACPA,OAAO,YACPM,MAAM,QAAS,CACdP,OAAQ,gBACRQ,KAAMf,IAEVgB,SAAS,IAAIZ,EAAAA,GACVN,UAAUA,GACVU,OAAO,WACPA,OAAO,eACVS,SAAS,IAAIb,EAAAA,GACVN,UAAUA,GACVU,OAAO,eACPM,MAAM,eAAgB,CACrBP,OAAQ,cACRQ,KAAM,SAAFjF,OAAWiE,KAEhBe,MAAM,cAAe,CACpBP,OAAQ,cACRQ,KAAM,SAAFjF,OAAWiE,KAEhBS,OAAO,kBACVU,SAAS,IAAId,EAAAA,GACVN,UAAUA,GACVU,OAAO,kBACPM,MAAM,kBAAmB,CACxBP,OAAQ,iBACRQ,KAAM,SAAFjF,OAAWiE,KAEhBe,MAAM,iBAAkB,CACvBP,OAAQ,iBACRQ,KAAM,SAAFjF,OAAWiE,KAEhBU,MAAM,cAEV,wBAAAP,EAAAlB,OAAA,GAAAa,EAAA,WACFZ,MAAA,KAAAC,UAAA,GAGD,CAAAnB,IAAA,YAAAC,MAAA,kBAAAnB,EAAAA,IAAAqB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAIA,SAAA+C,IAAA,IAAAC,EAAA/B,EAAAgC,EAAA,OAAAlD,EAAAA,EAAAA,KAAAK,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACQ5C,KAAKoE,oBAAmB,cAAAmB,EAAA3C,KAAA,EAEL5C,KAAKwB,WAAWgC,KACvCC,EAAOC,YAAY,IACnB,EACA,GACA,GACD,OALa,OAKb2B,EAAAE,EAAAxC,KALOO,EAAM+B,EAAN/B,OAAMiC,EAAA3C,KAAA,EAMa5C,KAAKwF,WAAW,UAAS,OAAlC,OAAZF,EAAYC,EAAAxC,KAAAwC,EAAAvC,OAAA,SACXsC,EAAaG,MAAMnC,GAAQoC,QAAM,yBAAAH,EAAAtC,OAAA,GAAAmC,EAAA,WACzClC,MAAA,KAAAC,UAAA,GAGD,CAAAnB,IAAA,WAAAC,MAAA,kBAAAlB,EAAAA,IAAAoB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAAsD,IAAA,IAAAzB,EAAA0B,EAAAC,EAAAvC,EAAAwC,EAAAC,EAAAjB,EAAAkB,EAAA,YAAA5D,EAAAA,EAAAA,KAAAK,MAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cAAAqD,EAAArD,KAAA,EACuB5C,KAAKkG,YAAW,OAEgC,OAF/DhC,EAAM+B,EAAAlD,KACN6C,EACJ,EAAI1B,EAAOiC,eAAiB,KAA4B,IAAjBnG,KAAK4D,QAAgB,EAAI,IAAGqC,EAAArD,KAAA,EAC5C5C,KAAKwB,WAAWgC,KACvCC,EAAOC,YAAYkC,GACnB,EACAA,EACA,GACD,OALa,OAKbC,EAAAI,EAAAlD,KALOO,EAAMuC,EAANvC,OAAM2C,EAAArD,KAAA,GAMY5C,KAAKwF,WAAW,SAAQ,QAqBjD,OArBKM,EAAWG,EAAAlD,KACXgD,EAAYD,EAAYL,MAAMnC,GAAQoC,OAAOZ,MAC7CA,EAAQ,CAAC,EACM,IAAjB9E,KAAK4D,QACPmC,EAAUK,SACR,SAAAC,GAAiE,IAA9D9D,EAAI8D,EAAJ9D,KAAM+D,EAAWD,EAAXC,YACDC,EAAOC,IAAAA,UAAeF,GAAa,GAAON,EAAKnE,aACrD,GAAI0E,EAAKE,YAAYC,OAAOC,kBAC1B,MAAM,IAAIhF,MACR,qHAGJmD,EAAMvC,GAAQgE,EAAKK,UACrB,IAGFb,EAAUK,SACR,SAAAS,GAAuD,IAApDtE,EAAIsE,EAAJtE,KAAMuE,EAAMD,EAANC,OACPhC,EAAMvC,GAAQuE,CAChB,IAEHb,EAAAjD,OAAA,SACM8B,GAAK,yBAAAmB,EAAAhD,OAAA,GAAA0C,EAAA,WACbzC,MAAA,KAAAC,UAAA,GAED,CAAAnB,IAAA,mBAAAC,MAAA,kBAAAjB,EAAAA,IAAAmB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAA0E,IAAA,IAAAjC,EAAA,OAAA1C,EAAAA,EAAAA,KAAAK,MAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,cAAAoE,EAAApE,KAAA,EACsB5C,KAAKiH,WAAU,OAAxB,OAALnC,EAAKkC,EAAAjE,KAAAiE,EAAAhE,OAAA,SACJkE,OAAOC,KAAKrC,IAAM,wBAAAkC,EAAA/D,OAAA,GAAA8D,EAAA,WAC1B7D,MAAA,KAAAC,UAAA,GAED,CAAAnB,IAAA,mBAAAC,MAAA,kBAAAhB,EAAAA,IAAAkB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAA+E,IAAA,IAAAtC,EAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,YAAAtF,EAAAA,EAAAA,KAAAK,MAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,cAAA+E,EAAA/E,KAAA,EACsB5C,KAAKiH,WAAU,OAIlC,OAJKnC,EAAK6C,EAAA5E,KACLsE,EAAWH,OAAOC,KAAKrC,GACvBwC,EAAeJ,OAAOU,OAAO9C,GAAOvE,KAAI,SAAAuG,GAAM,OAClDY,EAAKG,iBAAiBf,EAAiB,IACxCa,EAAA/E,KAAA,EACmBkF,QAAQC,IAAIT,GAAa,OAE7C,IAFMC,EAAKI,EAAA5E,KACLyE,EAAe,CAAC,EACbpH,EAAI,EAAGA,EAAIiH,EAAS7C,OAAQpE,GAAK,EACxCoH,EAAaH,EAASjH,IAAMmH,EAAMnH,GACnC,OAAAuH,EAAA3E,OAAA,SACMwE,GAAY,yBAAAG,EAAA1E,OAAA,GAAAmE,EAAA,WACpBlE,MAAA,KAAAC,UAAA,GAED,CAAAnB,IAAA,kBAAAC,MAAA,SAAA+F,GAAA,OAAA9G,EAAAA,IAAAiB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAIA,SAAA4F,EAAsBC,GAAe,IAAApD,EAAAgC,EAAA,OAAA1E,EAAAA,EAAAA,KAAAK,MAAA,SAAA0F,GAAA,cAAAA,EAAAxF,KAAAwF,EAAAvF,MAAA,cAAAuF,EAAAvF,KAAA,EACf5C,KAAKiH,WAAU,OACN,GADvBnC,EAAKqD,EAAApF,KACL+D,EAAShC,EAAMoD,GACR,CAAFC,EAAAvF,KAAA,eAAAuF,EAAAnF,OAAA,cACFlB,GAAS,cAAAqG,EAAAnF,OAAA,SAEXhD,KAAK6H,iBAAiBf,IAAO,wBAAAqB,EAAAlF,OAAA,GAAAgF,EAAA,WACrC/E,MAAA,KAAAC,UAAA,IAAAnB,IAAA,mBAAAC,MAAA,SAAAmG,GAAA,OAAAjH,EAAAA,IAAAgB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAgG,EAAuBvB,GAAc,IAAAwB,EAAA,OAAAlG,EAAAA,EAAAA,KAAAK,MAAA,SAAA8F,GAAA,cAAAA,EAAA5F,KAAA4F,EAAA3F,MAAA,iBAEpBd,IAAXgF,GAAwBA,EAAS,GAAC,CAAAyB,EAAA3F,KAAA,cAC9B,IAAIjB,MAAM,kBAAiB,cAAA4G,EAAA3F,KAAA,EAEhB5C,KAAKwI,WAAW1B,EAAQ,EAAG,WAAU,OAA9C,OAAJwB,EAAIC,EAAAxF,KAAAwF,EAAAvF,OAAA,SACHsF,EAAKG,SAAO,wBAAAF,EAAAtF,OAAA,GAAAoF,EAAA,WACpBnF,MAAA,KAAAC,UAAA,IAAAnB,IAAA,qBAAAC,MAAA,SAAAyG,GAAA,OAAAtH,EAAAA,IAAAe,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAsG,EAAyB7B,GAAc,IAAAwB,EAAAM,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA5G,EAAAA,EAAAA,KAAAK,MAAA,SAAAwG,GAAA,cAAAA,EAAAtG,KAAAsG,EAAArG,MAAA,iBAEtBd,IAAXgF,GAAwBA,EAAS,GAAC,CAAAmC,EAAArG,KAAA,cAC9B,IAAIjB,MAAM,kBAAiB,cAAAsH,EAAArG,KAAA,EAEhB5C,KAAKwI,WAAW1B,EAAQ,EAAG,WAAU,OACT,OADzCwB,EAAIW,EAAAlG,KACJ6F,EAAoC,EAAnBN,EAAKY,YAAkB,EAACD,EAAArG,KAAA,EAC5B5C,KAAKwI,WAAW1B,EAAS,EAAG8B,EAAgB,WAAU,OACvB,OAD5CC,EAAII,EAAAlG,KACJ+F,EAAuC,EAAtBD,EAAKM,eAAqB,EAACF,EAAArG,KAAA,GAC/B5C,KAAKwI,WACtB1B,EAAS,EAAI8B,EAAiB,EAC9BE,EACA,WACD,QAOA,OAXKC,EAAIE,EAAAlG,KAMJiG,EAAM,CACVP,QAASH,EAAKG,QACdW,QAAS,CAAEC,OAAQR,EAAKS,aAAc/B,MAAOsB,EAAKU,aAClDC,WAAY,CAAEH,OAAQN,EAAKU,gBAAiBlC,MAAOwB,EAAKW,gBACxDC,YAAa7C,EAAS,EAAI8B,EAAiB,EAAIE,GAChDG,EAAAjG,OAAA,SACMgG,GAAG,yBAAAC,EAAAhG,OAAA,GAAA0F,EAAA,WACXzF,MAAA,KAAAC,UAAA,IAAAnB,IAAA,aAAAC,MAAA,SAAA2H,EAAAC,EAAAC,GAAA,OAAAzI,EAAAA,IAAAc,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA0H,EAAiBjD,EAAgBtC,EAAgBwF,GAAsB,IAAAC,EAAA3G,EAAAd,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAyH,GAAA,cAAAA,EAAAvH,KAAAuH,EAAAtH,MAAA,cAAAsH,EAAAtH,KAAA,EAC5C5C,KAAKwB,WAAWgC,KACvCC,EAAOC,YAAYc,GACnB,EACAA,EACAsC,GACD,OALa,OAKbmD,EAAAC,EAAAnH,KALOO,EAAM2G,EAAN3G,OAAM4G,EAAAtH,KAAA,EAMO5C,KAAKwF,WAAWwE,GAAW,OAApC,OAANxH,EAAM0H,EAAAnH,KAAAmH,EAAAlH,OAAA,SACLR,EAAOiD,MAAMnC,GAAQoC,QAAM,wBAAAwE,EAAAjH,OAAA,GAAA8G,EAAA,WACnC7G,MAAA,KAAAC,UAAA,GAED,CAAAnB,IAAA,cAAAC,MAAA,SAAAkI,GAAA,OAAA7I,EAAAA,IAAAa,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAMA,SAAA+H,EAAkBlC,GAAe,IAAAmC,EAAAC,EAAAxF,EAAAgC,EAAAyD,EAAAnB,EAAAI,EAAAgB,EAAAC,EAAAC,EAAApH,EAAAqH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/H,UAAA,OAAAf,EAAAA,EAAAA,KAAAK,MAAA,SAAA0I,GAAA,cAAAA,EAAAxI,KAAAwI,EAAAvI,MAAA,OAAoC,OAAlCyH,EAAWa,EAAA1G,OAAA,QAAA1C,IAAAoJ,EAAA,GAAAA,EAAA,GAAG,EAAGZ,EAAiBY,EAAA1G,OAAA,EAAA0G,EAAA,QAAApJ,EAAAqJ,EAAAvI,KAAA,EAC/C5C,KAAKiH,WAAU,OACN,GADvBnC,EAAKqG,EAAApI,KACL+D,EAAShC,EAAMoD,GACR,CAAFiD,EAAAvI,KAAA,eAAAuI,EAAAnI,OAAA,cACFlB,GAAS,cAAAqJ,EAAAvI,KAAA,GAGG5C,KAAKoL,mBAAmBtE,GAAO,QAAxC,GAANyD,EAAMY,EAAApI,OAERsH,EAAc,GAAC,CAAAc,EAAAvI,KAAA,eACX,IAAIyI,UAAU,qCAAoC,QAuBP,YApBjCvJ,IAAdwI,GAA2BA,EAAYC,EAAO9B,WAChD6B,EAAYC,EAAO9B,SAGfW,EAAUpJ,KAAKsL,sBACnBjB,EACAC,EACAC,EAAOnB,QAAQC,OACfkB,EAAOnB,QAAQ7B,OAEXiC,EAAaxJ,KAAKsL,sBACtBjB,EACAC,EACAC,EAAOf,WAAWH,OAClBkB,EAAOf,WAAWjC,OAGdiD,EAAY/G,EAAOC,YACvB6H,KAAKC,MAAMlB,EAAYD,GAAe,GAAK,GAEvCI,EAAkBc,KAAKE,MAAMpB,EAAc,GAAEc,EAAAvI,KAAA,GAC1B5C,KAAKwB,WAAWgC,KACvCgH,EACA,EACAA,EAAUhG,OACV+F,EAAOZ,YAAcc,GACtB,QAGD,IAHCC,EAAAS,EAAApI,KALOO,EAAMoH,EAANpH,OAOJqH,EAAgB,GAEdC,EAAkBP,EACtBO,EAAkBN,EAClBM,GAAmB,EACnB,CAEA,KAAOpB,EAAWhF,QAAUgF,EAAW,GAAGkC,KAAOd,GAC/CpB,EAAWmC,QAQb,GANMd,EACJrB,EAAW,IACXA,EAAW,GAAGoC,OAAShB,GACvBpB,EAAW,GAAGkC,IAAMd,EAIpBxB,EAAQ,IACRwB,GAAmBxB,EAAQ,GAAGwC,OAC9BhB,EAAkBxB,EAAQ,GAAGsC,IAC7B,CAEA,IADMZ,EAAgB1B,EAAQuC,QAG5Bf,EAAkBE,EAAcY,KAAOd,EAAkBN,EACzDM,GAAmB,EAEnBD,GAAiBE,EAAe,IAAM,IAExCD,GAAmB,C,MAEbG,EAAeQ,KAAKE,MAAMb,EAAkB,GAAKH,EACjDO,EAAcJ,EAAkB,EAChCK,EAAO3H,EAAOyH,GACpBJ,GAAiBE,EACbvK,EAAmB2K,GAAMD,GACzB7K,EAAa8K,GAAMD,E,CAE1B,OAAAG,EAAAnI,OAAA,SAEM2H,GAAa,yBAAAQ,EAAAlI,OAAA,GAAAmH,EAAA,WACrBlH,MAAA,KAAAC,UAAA,IAAAnB,IAAA,wBAAAC,MAED,SACEoI,EACAC,EACAuB,EACAC,GAKA,IAFA,IAAIC,EACAC,EACK5L,EAAI,EAAGA,EAAIyL,EAAYrH,OAAQpE,GAAK,EAAG,CAC9C,IAAM6L,EAAaJ,EAAYzL,GAE/B,GAAIiK,GAAe4B,EADDH,EAAW1L,IACgBkK,GAAa2B,GAExD,QAAmBnK,IAAfiK,EAA0B,CAC5BC,EAAW5L,EACX,K,YAEsB0B,IAAfiK,IACTA,EAAa3L,E,CAIjB,QAAmB0B,IAAfiK,EACF,MAAO,QAIQjK,IAAbkK,IACFA,EAAWH,EAAYrH,QAIzB,IADA,IAAM0H,EAAS,IAAIC,MAAMH,EAAWD,GAC3BK,EAAWL,EAAYK,EAAWJ,EAAUI,GAAY,EAC/DF,EAAOE,EAAWL,GAAc,CAC9BH,MAAOC,EAAYO,GACnBV,IAAKG,EAAYO,GAAYN,EAAWM,GACxCC,KAAMP,EAAWM,IAGrB,OAAOF,CACT,KAACxL,CAAA,CAhZ4B,GAmZ/BjB,EAAYiB,EAAY,eACxBjB,EAAYiB,EAAY,YACxBjB,EAAYiB,EAAY,a,cC3aH4L,EAAa,SAAAC,EAAAC,EAAAC,EAAAC,IAAAC,EAAAA,EAAAA,GAAAL,EAAAC,GAAA,IAAAK,GAAAC,EAAAA,EAAAA,GAAAP,GA4BhC,SAAAA,EACEQ,EACAC,EACAC,GACC,IAADhH,GAAAtE,EAAAA,EAAAA,GAAA,KAAA4K,IACAtG,EAAA4G,EAAA3M,KAAA,KAAM6M,EAAQC,EAAeC,IAhCvBC,YAAM,EAGdjH,EACUkH,oBAAc,EA6BtB,IAAMC,EAAKnH,EAAKgH,cAId,OAHFhH,EAAKkH,eAAiBlH,EAAKoH,iBAC3BpH,EAAKiH,OAAS,IAAIvM,EAAW,CAC3Bc,YAAY6L,EAAAA,EAAAA,cAAarH,EAAKsH,QAAQ,kBAAmBH,KACzDnH,CACJ,CAsD+C,OAtD9CjE,EAAAA,EAAAA,GAAAuK,EAAA,EAAAtK,IAAA,iBAAAC,MAAA,kBAAAuK,EAAAA,IAAArK,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAhCD,SAAAC,IAAA,IAAAiL,EAAAC,EAAAC,EAAA,OAAArL,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIE,GACiB,kCAJX2K,GAAOG,EAAAA,EAAAA,gBAAe1N,KAAK8M,OAAQ,uBAIhCa,KAAuD,KAAbJ,EAAKI,IAAU,CAAAjL,EAAAE,KAAA,QACb,OAA7C4K,GAAOH,EAAAA,EAAAA,cAAaE,EAAMvN,KAAKgN,eAActK,EAAAE,KAAA,EAChC4K,EAAKI,SAAS,QAAO,OAA9B,OAAJH,EAAI/K,EAAAK,KAAAL,EAAAM,OAAA,SACHkE,OAAO2G,YACR,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EACIK,MAAM,cACPC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,MAAM,IAC5B1N,KAAI,SAAAyN,GACH,IAAAE,EAAuBF,EAAKF,MAAM,MAAKK,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GACvC,MAAO,CADIC,EAAA,IAAQA,EAAA,GAErB,MACH,cAAAzL,EAAAM,OAAA,cAEIlB,GAAS,wBAAAY,EAAAO,OAAA,GAAAX,EAAA,WACjBY,MAAA,KAAAC,UAAA,IAAAnB,IAAA,cAAAC,MAAA,kBAAAwK,EAAAA,IAAAtK,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAeD,SAAAe,IAAA,IAAA8J,EAAA,OAAA9K,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAAAW,EAAAX,KAAA,EAC+B5C,KAAKkN,eAAc,OAA5B,KAAdA,EAAc3J,EAAAR,MACD,CAADQ,EAAAX,KAAA,eAAAW,EAAAP,OAAA,SACTkE,OAAOC,KAAK+F,IAAe,cAAA3J,EAAAP,OAAA,SAE7BhD,KAAKiN,OAAOoB,oBAAkB,wBAAA9K,EAAAN,OAAA,GAAAG,EAAA,WACtCF,MAAA,KAAAC,UAAA,IAAAnB,IAAA,aAAAC,MAAA,kBAAAyK,EAAAA,IAAAvK,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAyB,IAAA,IAAAoJ,EAAAoB,EAAA,OAAAlM,EAAAA,EAAAA,KAAAK,MAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,cAAAuB,EAAAvB,KAAA,EAC+B5C,KAAKkN,eAAc,OAA5B,KAAdA,EAAc/I,EAAApB,MACD,CAADoB,EAAAvB,KAAA,eAAAuB,EAAAnB,OAAA,SACTkE,OAAOC,KAAK+F,GAAgB3M,KAAI,SAAAgO,GAAO,MAAK,CACjDA,QAAAA,EACA3C,MAAO,EACPF,IAAKwB,EAAeqB,GACrB,KAAE,cAAApK,EAAAvB,KAAA,EAEkB5C,KAAKiN,OAAOuB,mBAAkB,OAAvC,OAARF,EAAQnK,EAAApB,KAAAoB,EAAAnB,OAAA,SACPkE,OAAOC,KAAKmH,GAAU/N,KAAI,SAAAgO,GAAO,MAAK,CAC3CA,QAAAA,EACA3C,MAAO,EACPF,IAAK4C,EAASC,GACf,KAAE,wBAAApK,EAAAlB,OAAA,GAAAa,EAAA,WACJZ,MAAA,KAAAC,UAAA,GAED,CAAAnB,IAAA,cAAAC,MAKA,SAAAV,GAA+D,IAAD8E,EAAAqB,EAAA,KAAzC6G,EAAOhN,EAAPgN,QAAS3C,EAAKrK,EAALqK,MAAOF,EAAGnK,EAAHmK,IACnC,OAAO+C,EAAAA,EAAAA,mBAAgB,SAAAvM,GAAA,OAAAmE,EAAAA,IAAAlE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAU,SAAA+C,EAAMsJ,GAAQ,IAAArC,EAAA/B,EAAAqE,EAAA,OAAAvM,EAAAA,EAAAA,KAAAK,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EAC1B8E,EAAKuF,OAAO2B,gBAAgBL,GAAQ,OACS,OAD1DlC,EAAI9G,EAAAxC,KACJuH,OAAqBxI,IAATuK,EAAqBd,KAAKsD,IAAIxC,EAAMX,GAAOA,EAAGnG,EAAA3C,KAAA,EAC9C8E,EAAKuF,OAAO6B,YAAYP,EAAS3C,EAAOtB,GAAU,QAA9DqE,EAAGpJ,EAAAxC,OAEP2L,EAAS9L,KACP,IAAImM,EAAAA,EAAc,CAChBC,GAAG,GAADjP,OAAKwO,EAAO,KAAAxO,OAAI6L,EAAK,KAAA7L,OAAIuK,GAC3BmD,KAAM,CAAEc,QAAAA,EAAS3C,MAAAA,EAAOF,IAAKpB,EAAWqE,IAAAA,MAI9CD,EAASO,WAAU,wBAAA1J,EAAAtC,OAAA,GAAAmC,EAAA,MACpBlC,MAAA,KAAAC,UAAA,GACH,GAEA,CAAAnB,IAAA,gBAAAC,MAKA,WAA8C,KAACqK,CAAA,CA7Ff,CAAS4C,EAAAA,oB","sources":["../../../node_modules/@gmod/twobit/src/twoBitFile.ts","../../../plugins/sequence/src/TwoBitAdapter/TwoBitAdapter.ts"],"sourcesContent":["import Long from 'long'\nimport { LocalFile, GenericFilehandle } from 'generic-filehandle'\nimport { Parser } from '@gmod/binary-parser'\n\nconst TWOBIT_MAGIC = 0x1a412743\n\nfunction tinyMemoize(_class: any, methodName: string) {\n  const method = _class.prototype[methodName]\n  const memoAttrName = `_memo_${methodName}`\n  _class.prototype[methodName] = function _tinyMemoized() {\n    if (!(memoAttrName in this)) {\n      this[memoAttrName] = method.call(this)\n    }\n    return this[memoAttrName]\n  }\n}\n\nconst twoBit = ['T', 'C', 'A', 'G']\n// byteTo4Bases is an array of byteValue -> 'ACTG'\n// the weird `...keys()` incantation generates an array of numbers 0 to 255\nconst byteTo4Bases = [] as string[]\nfor (let i = 0; i < 256; i++) {\n  byteTo4Bases.push(\n    twoBit[(i >> 6) & 3] +\n      twoBit[(i >> 4) & 3] +\n      twoBit[(i >> 2) & 3] +\n      twoBit[i & 3],\n  )\n}\n\ntype ParserName = 'header' | 'index' | 'record1' | 'record2' | 'record3'\nconst maskedByteTo4Bases = byteTo4Bases.map(bases => bases.toLowerCase())\n\nexport default class TwoBitFile {\n  private filehandle: GenericFilehandle\n  private isBigEndian?: boolean\n  private version?: number\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path] filesystem path for the .2bit file to open\n   * @param {Filehandle} [args.filehandle] node fs.promises-like filehandle for the .2bit file.\n   *  Only needs to support `filehandle.read(buffer, offset, length, position)`\n   */\n  constructor({\n    filehandle,\n    path,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new Error('must supply path or filehandle')\n    }\n    this.isBigEndian = undefined\n  }\n\n  async _getParser(name: ParserName) {\n    const parser = (await this._getParsers())[name]\n    if (!parser) {\n      throw new Error(`parser ${name} not found`)\n    }\n    return parser\n  }\n\n  async _detectEndianness() {\n    const ret = await this.filehandle.read(Buffer.allocUnsafe(8), 0, 8, 0)\n    const { buffer } = ret\n    if (buffer.readInt32LE(0) === TWOBIT_MAGIC) {\n      this.isBigEndian = false\n      this.version = buffer.readInt32LE(4)\n    } else if (buffer.readInt32BE(0) === TWOBIT_MAGIC) {\n      this.isBigEndian = true\n      this.version = buffer.readInt32BE(4)\n    } else {\n      throw new Error('not a 2bit file')\n    }\n  }\n\n  // memoize\n  /**\n   * @private\n   * detects the file's endianness and instantiates our binary parsers accordingly\n   */\n  async _getParsers() {\n    await this._detectEndianness()\n\n    const endianess = this.isBigEndian ? 'big' : 'little'\n    const lebe = this.isBigEndian ? 'be' : 'le'\n\n    let indexEntryParser = new Parser()\n      .endianess(endianess)\n      .uint8('nameLength')\n      .string('name', { length: 'nameLength' })\n    if (this.version === 1) {\n      indexEntryParser = indexEntryParser.buffer('offsetBytes', {\n        length: 8,\n      })\n    } else {\n      indexEntryParser = indexEntryParser.uint32('offset')\n    }\n    /* istanbul ignore next */\n    const header = new Parser()\n      .endianess(endianess)\n      .int32('magic', {\n        assert: (m: number) => m === 0x1a412743,\n      })\n      .int32('version', {\n        /* istanbul ignore next */\n        assert: (v: number) => v === 0 || v === 1,\n      })\n      .uint32('sequenceCount', {\n        /* istanbul ignore next */\n        assert: (v: number) => v >= 0,\n      })\n      .uint32('reserved')\n\n    return {\n      header,\n      index: new Parser()\n        .endianess(endianess)\n        .uint32('sequenceCount')\n        .uint32('reserved')\n        .array('index', {\n          length: 'sequenceCount',\n          type: indexEntryParser,\n        }),\n      record1: new Parser()\n        .endianess(endianess)\n        .uint32('dnaSize')\n        .uint32('nBlockCount'),\n      record2: new Parser()\n        .endianess(endianess)\n        .uint32('nBlockCount')\n        .array('nBlockStarts', {\n          length: 'nBlockCount',\n          type: `uint32${lebe}`,\n        })\n        .array('nBlockSizes', {\n          length: 'nBlockCount',\n          type: `uint32${lebe}`,\n        })\n        .uint32('maskBlockCount'),\n      record3: new Parser()\n        .endianess(endianess)\n        .uint32('maskBlockCount')\n        .array('maskBlockStarts', {\n          length: 'maskBlockCount',\n          type: `uint32${lebe}`,\n        })\n        .array('maskBlockSizes', {\n          length: 'maskBlockCount',\n          type: `uint32${lebe}`,\n        })\n        .int32('reserved'),\n      // .buffer('packedDna', { length: 'dnaSize' }),\n    }\n  }\n\n  // memoize\n  /**\n   * @returns {Promise} for object with the file's header information, like\n   *  `{ magic: 0x1a412743, version: 0, sequenceCount: 42, reserved: 0 }`\n   */\n  async getHeader() {\n    await this._detectEndianness()\n\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(16),\n      0,\n      16,\n      0,\n    )\n    const headerParser = await this._getParser('header')\n    return headerParser.parse(buffer).result\n  }\n\n  // memoize\n  /**\n   * @returns {Promise} for object with the file's index of offsets, like `{ seqName: fileOffset, ...}`\n   */\n  async getIndex() {\n    const header = await this.getHeader()\n    const maxIndexLength =\n      8 + header.sequenceCount * (1 + 256 + (this.version === 1 ? 8 : 4))\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(maxIndexLength),\n      0,\n      maxIndexLength,\n      8,\n    )\n    const indexParser = await this._getParser('index')\n    const indexData = indexParser.parse(buffer).result.index\n    const index = {} as { [key: string]: number }\n    if (this.version === 1) {\n      indexData.forEach(\n        ({ name, offsetBytes }: { name: string; offsetBytes: number }) => {\n          const long = Long.fromBytes(offsetBytes, true, !this.isBigEndian)\n          if (long.greaterThan(Number.MAX_SAFE_INTEGER)) {\n            throw new Error(\n              'integer overflow. File offset greater than 2^53-1 encountered. This library can only handle offsets up to 2^53-1.',\n            )\n          }\n          index[name] = long.toNumber()\n        },\n      )\n    } else {\n      indexData.forEach(\n        ({ name, offset }: { name: string; offset: number }) => {\n          index[name] = offset\n        },\n      )\n    }\n    return index\n  }\n\n  /**\n   * @returns {Promise} for an array of string sequence names that are found in the file\n   */\n  async getSequenceNames() {\n    const index = await this.getIndex()\n    return Object.keys(index)\n  }\n\n  /**\n   * @returns {Promise} for an object listing the lengths of all sequences like `{seqName: length, ...}`\n   */\n  async getSequenceSizes() {\n    const index = await this.getIndex()\n    const seqNames = Object.keys(index)\n    const sizePromises = Object.values(index).map(offset =>\n      this._getSequenceSize(offset as number),\n    )\n    const sizes = await Promise.all(sizePromises)\n    const returnObject = {} as { [key: string]: number }\n    for (let i = 0; i < seqNames.length; i += 1) {\n      returnObject[seqNames[i]] = sizes[i]\n    }\n    return returnObject\n  }\n\n  /**\n   * @param {string} seqName name of the sequence\n   * @returns {Promise} for the sequence's length, or undefined if it is not in the file\n   */\n  async getSequenceSize(seqName: string) {\n    const index = await this.getIndex()\n    const offset = index[seqName]\n    if (!offset) {\n      return undefined\n    }\n    return this._getSequenceSize(offset)\n  }\n\n  async _getSequenceSize(offset: number) {\n    // we have to parse the sequence record in 3 parts, because we have to buffer 3 fixed-length file reads\n    if (offset === undefined || offset < 0) {\n      throw new Error('invalid offset')\n    }\n    const rec1 = await this._parseItem(offset, 8, 'record1')\n    return rec1.dnaSize\n  }\n\n  async _getSequenceRecord(offset: number) {\n    // we have to parse the sequence record in 3 parts, because we have to buffer 3 fixed-length file reads\n    if (offset === undefined || offset < 0) {\n      throw new Error('invalid offset')\n    }\n    const rec1 = await this._parseItem(offset, 8, 'record1')\n    const rec2DataLength = rec1.nBlockCount * 8 + 8\n    const rec2 = await this._parseItem(offset + 4, rec2DataLength, 'record2')\n    const rec3DataLength = rec2.maskBlockCount * 8 + 8\n    const rec3 = await this._parseItem(\n      offset + 4 + rec2DataLength - 4,\n      rec3DataLength,\n      'record3',\n    )\n\n    const rec = {\n      dnaSize: rec1.dnaSize,\n      nBlocks: { starts: rec2.nBlockStarts, sizes: rec2.nBlockSizes },\n      maskBlocks: { starts: rec3.maskBlockStarts, sizes: rec3.maskBlockSizes },\n      dnaPosition: offset + 4 + rec2DataLength - 4 + rec3DataLength,\n    }\n    return rec\n  }\n\n  async _parseItem(offset: number, length: number, parserName: ParserName) {\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(length),\n      0,\n      length,\n      offset,\n    )\n    const parser = await this._getParser(parserName)\n    return parser.parse(buffer).result\n  }\n\n  /**\n   * @param {string} seqName name of the sequence you want\n   * @param {number} [regionStart] optional 0-based half-open start of the sequence region to fetch.\n   * @param {number} [regionEnd] optional 0-based half-open end of the sequence region to fetch. defaults to end of the sequence\n   * @returns {Promise} for a string of sequence bases\n   */\n  async getSequence(seqName: string, regionStart = 0, regionEnd: number) {\n    const index = await this.getIndex()\n    const offset = index[seqName]\n    if (!offset) {\n      return undefined\n    }\n    // fetch the record for the seq\n    const record = await this._getSequenceRecord(offset)\n\n    if (regionStart < 0) {\n      throw new TypeError('regionStart cannot be less than 0')\n    }\n    // end defaults to the end of the sequence\n    if (regionEnd === undefined || regionEnd > record.dnaSize) {\n      regionEnd = record.dnaSize\n    }\n\n    const nBlocks = this._getOverlappingBlocks(\n      regionStart,\n      regionEnd,\n      record.nBlocks.starts,\n      record.nBlocks.sizes,\n    )\n    const maskBlocks = this._getOverlappingBlocks(\n      regionStart,\n      regionEnd,\n      record.maskBlocks.starts,\n      record.maskBlocks.sizes,\n    )\n\n    const baseBytes = Buffer.allocUnsafe(\n      Math.ceil((regionEnd - regionStart) / 4) + 1,\n    )\n    const baseBytesOffset = Math.floor(regionStart / 4)\n    const { buffer } = await this.filehandle.read(\n      baseBytes,\n      0,\n      baseBytes.length,\n      record.dnaPosition + baseBytesOffset,\n    )\n\n    let sequenceBases = ''\n    for (\n      let genomicPosition = regionStart;\n      genomicPosition < regionEnd;\n      genomicPosition += 1\n    ) {\n      // check whether we are currently masked\n      while (maskBlocks.length && maskBlocks[0].end <= genomicPosition) {\n        maskBlocks.shift()\n      }\n      const baseIsMasked =\n        maskBlocks[0] &&\n        maskBlocks[0].start <= genomicPosition &&\n        maskBlocks[0].end > genomicPosition\n\n      // process the N block if we have one\n      if (\n        nBlocks[0] &&\n        genomicPosition >= nBlocks[0].start &&\n        genomicPosition < nBlocks[0].end\n      ) {\n        const currentNBlock = nBlocks.shift()\n        for (\n          ;\n          genomicPosition < currentNBlock.end && genomicPosition < regionEnd;\n          genomicPosition += 1\n        ) {\n          sequenceBases += baseIsMasked ? 'n' : 'N'\n        }\n        genomicPosition -= 1\n      } else {\n        const bytePosition = Math.floor(genomicPosition / 4) - baseBytesOffset\n        const subPosition = genomicPosition % 4\n        const byte = buffer[bytePosition]\n        sequenceBases += baseIsMasked\n          ? maskedByteTo4Bases[byte][subPosition]\n          : byteTo4Bases[byte][subPosition]\n      }\n    }\n\n    return sequenceBases\n  }\n\n  _getOverlappingBlocks(\n    regionStart: number,\n    regionEnd: number,\n    blockStarts: number[],\n    blockSizes: number[],\n  ) {\n    // find the start and end indexes of the blocks that match\n    let startIndex\n    let endIndex\n    for (let i = 0; i < blockStarts.length; i += 1) {\n      const blockStart = blockStarts[i]\n      const blockSize = blockSizes[i]\n      if (regionStart >= blockStart + blockSize || regionEnd <= blockStart) {\n        // block does not overlap the region\n        if (startIndex !== undefined) {\n          endIndex = i\n          break\n        }\n      } else if (startIndex === undefined) {\n        startIndex = i\n      } // block does overlap the region, record this if it is the first\n    }\n\n    if (startIndex === undefined) {\n      return []\n    }\n\n    // now format some block objects to return\n    if (endIndex === undefined) {\n      endIndex = blockStarts.length\n    }\n\n    const blocks = new Array(endIndex - startIndex)\n    for (let blockNum = startIndex; blockNum < endIndex; blockNum += 1) {\n      blocks[blockNum - startIndex] = {\n        start: blockStarts[blockNum],\n        end: blockStarts[blockNum] + blockSizes[blockNum],\n        size: blockSizes[blockNum],\n      }\n    }\n    return blocks\n  }\n}\n\ntinyMemoize(TwoBitFile, '_getParsers')\ntinyMemoize(TwoBitFile, 'getIndex')\ntinyMemoize(TwoBitFile, 'getHeader')\n","import { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TwoBitFile } from '@gmod/twobit'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class TwoBitAdapter extends BaseSequenceAdapter {\n  private twobit: TwoBitFile\n\n  // the chromSizesData can be used to speed up loading since TwoBit has to do\n  // many range requests at startup to perform the getRegions request\n  protected chromSizesData: Promise<Record<string, number> | undefined>\n\n  private async initChromSizes() {\n    const conf = readConfObject(this.config, 'chromSizesLocation')\n    // check against default and empty in case someone makes the field blank in\n    // config editor, may want better way to check \"optional config slots\" in\n    // future\n    if (conf.uri !== '/path/to/default.chrom.sizes' && conf.uri !== '') {\n      const file = openLocation(conf, this.pluginManager)\n      const data = await file.readFile('utf8')\n      return Object.fromEntries(\n        data\n          ?.split(/\\n|\\r\\n|\\r/)\n          .filter(line => !!line.trim())\n          .map(line => {\n            const [name, length] = line.split('\\t')\n            return [name, +length]\n          }),\n      )\n    }\n    return undefined\n  }\n\n  constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const pm = this.pluginManager\n    this.chromSizesData = this.initChromSizes()\n    this.twobit = new TwoBitFile({\n      filehandle: openLocation(this.getConf('twoBitLocation'), pm),\n    })\n  }\n\n  public async getRefNames() {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData)\n    }\n    return this.twobit.getSequenceNames()\n  }\n\n  public async getRegions(): Promise<NoAssemblyRegion[]> {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData).map(refName => ({\n        refName,\n        start: 0,\n        end: chromSizesData[refName],\n      }))\n    }\n    const refSizes = await this.twobit.getSequenceSizes()\n    return Object.keys(refSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: refSizes[refName],\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.twobit.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const seq = await this.twobit.getSequence(refName, start, regionEnd)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["TWOBIT_MAGIC","tinyMemoize","_class","methodName","method","prototype","memoAttrName","concat","this","call","twoBit","byteTo4Bases","i","push","maskedByteTo4Bases","map","bases","toLowerCase","TwoBitFile","_getParser2","_detectEndianness2","_getParsers2","_getHeader","_getIndex","_getSequenceNames","_getSequenceSizes","_getSequenceSize2","_getSequenceSize3","_getSequenceRecord2","_parseItem2","_getSequence","_ref","filehandle","path","_classCallCheck","Error","LocalFile","isBigEndian","undefined","_createClass","key","value","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","parser","wrap","_context","prev","next","_getParsers","t0","sent","abrupt","stop","apply","arguments","_callee2","ret","buffer","_context2","read","Buffer","allocUnsafe","readInt32LE","version","readInt32BE","_callee3","endianess","lebe","indexEntryParser","header","_context3","_detectEndianness","Parser","uint8","string","length","uint32","int32","assert","m","v","index","array","type","record1","record2","record3","_callee4","_yield$this$filehandl","headerParser","_context4","_getParser","parse","result","_callee5","maxIndexLength","_yield$this$filehandl2","indexParser","indexData","_this","_context5","getHeader","sequenceCount","forEach","_ref2","offsetBytes","long","Long","greaterThan","Number","MAX_SAFE_INTEGER","toNumber","_ref3","offset","_callee6","_context6","getIndex","Object","keys","_callee7","seqNames","sizePromises","sizes","returnObject","_i","_this2","_context7","values","_getSequenceSize","Promise","all","_x2","_callee8","seqName","_context8","_x3","_callee9","rec1","_context9","_parseItem","dnaSize","_x4","_callee10","rec2DataLength","rec2","rec3DataLength","rec3","rec","_context10","nBlockCount","maskBlockCount","nBlocks","starts","nBlockStarts","nBlockSizes","maskBlocks","maskBlockStarts","maskBlockSizes","dnaPosition","_x5","_x6","_x7","_callee11","parserName","_yield$this$filehandl3","_context11","_x8","_callee12","regionStart","regionEnd","record","baseBytes","baseBytesOffset","_yield$this$filehandl4","sequenceBases","genomicPosition","baseIsMasked","currentNBlock","bytePosition","subPosition","byte","_args12","_context12","_getSequenceRecord","TypeError","_getOverlappingBlocks","Math","ceil","floor","end","shift","start","blockStarts","blockSizes","startIndex","endIndex","blockStart","blocks","Array","blockNum","size","TwoBitAdapter","_BaseSequenceAdapter","_initChromSizes","_getRefNames","_getRegions","_inherits","_super","_createSuper","config","getSubAdapter","pluginManager","twobit","chromSizesData","pm","initChromSizes","openLocation","getConf","conf","file","data","readConfObject","uri","readFile","fromEntries","split","filter","line","trim","_line$split","_line$split2","_slicedToArray","getSequenceNames","refSizes","refName","getSequenceSizes","ObservableCreate","observer","seq","getSequenceSize","min","getSequence","SimpleFeature","id","complete","BaseSequenceAdapter"],"sourceRoot":""}