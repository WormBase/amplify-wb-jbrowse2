{"version":3,"file":"static/js/2323.38345296.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedTabixAdapter/BedTabixAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { FileLocation, Region, Feature } from '@jbrowse/core/util'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { featureData } from '../util'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n  private parser: BED\n\n  protected bed: TabixIndexedFile\n\n  protected columnNames: string[]\n\n  protected scoreColumn: string\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const bedGzLoc = this.getConf('bedGzLocation') as FileLocation\n    const type = this.getConf(['index', 'indexType'])\n    const loc = this.getConf(['index', 'location'])\n    const autoSql = this.getConf('autoSql')\n    const pm = this.pluginManager\n\n    this.bed = new TabixIndexedFile({\n      filehandle: openLocation(bedGzLoc, pm),\n      csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n      tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    this.columnNames = this.getConf('columnNames')\n    this.scoreColumn = this.getConf('scoreColumn')\n    this.parser = new BED({ autoSql })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.bed.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    return this.bed.getHeader()\n  }\n\n  async getNames() {\n    if (this.columnNames.length) {\n      return this.columnNames\n    }\n    const header = await this.bed.getHeader()\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const meta = await this.bed.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      // colSame handles special case for tabix where a single column is both\n      // the start and end, this is assumed to be covering the base at this\n      // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n      const names = await this.getNames()\n      await this.bed.getLines(query.refName, query.start, query.end, {\n        lineCallback: (line, fileOffset) => {\n          observer.next(\n            featureData(\n              line,\n              colRef,\n              colStart,\n              colEnd,\n              this.scoreColumn,\n              this.parser,\n              `${this.id}-${fileOffset}`,\n              names,\n            ),\n          )\n        },\n        signal: opts.signal,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["BedTabixAdapter","BaseFeatureDataAdapter","constructor","config","getSubAdapter","pluginManager","super","parser","bed","columnNames","scoreColumn","bedGzLoc","this","getConf","type","loc","autoSql","pm","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","BED","getRefNames","opts","arguments","length","getReferenceSequenceNames","getHeader","getNames","defline","split","filter","f","at","includes","slice","map","trim","getFeatures","query","ObservableCreate","async","meta","getMetadata","columnNumbers","colRef","ref","colStart","start","colEnd","end","names","getLines","refName","lineCallback","line","fileOffset","observer","next","featureData","concat","id","signal","complete","freeResources","capabilities","ucscProcessedTranscript","feature","children","thickStart","get","thickEnd","blocks","child","sort","a","b","newChildren","forEach","block","prime","push","leftPrime","rightPrime","newData","Object","fromEntries","tags","tag","subfeatures","uniqueId","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","data","l","colSame","fields","i","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score"],"sourceRoot":""}