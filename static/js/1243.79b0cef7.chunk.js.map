{"version":3,"file":"static/js/1243.79b0cef7.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/gtf/src/util.ts","../../../node_modules/@gmod/gtf/src/parse.ts","../../../node_modules/@gmod/gtf/src/api.ts","../../../node_modules/@gmod/gtf/src/index.ts","../../../plugins/gtf/src/util.ts","../../../plugins/gtf/src/GtfAdapter/GtfAdapter.ts"],"sourcesContent":["//@ts-nocheck\n/** @module util */\n\n// Forks @gmod/gff-js and adapts it to parse and format GTF.\n\nconst fieldNames = [\n  'seq_name',\n  'source',\n  'featureType',\n  'start',\n  'end',\n  'score',\n  'strand',\n  'frame',\n  'attributes',\n]\n\n// TODO: check about enconding/escaping in gtf 9th column\n/**\n * Unescape a string/text value used in a GTF attribute.\n * Textual attributes should be surrounded by double quotes\n * source info:\n * https://mblab.wustl.edu/GTF22.html\n * https://en.wikipedia.org/wiki/Gene_transfer_format\n *\n * @param {String} s\n * @returns {String}\n */\nexport function unescape(s) {\n  if (s === null) {\n    return null\n  }\n  return String(s).replace(/%([0-9A-Fa-f]{2})/g, (_, seq) =>\n    String.fromCharCode(parseInt(seq, 16)),\n  )\n}\n\n/**\n * Escape a value for use in a GTF attribute value.\n *\n * @param {String} s\n * @returns {String}\n */\nfunction _escape(regex, s) {\n  return String(s).replace(regex, ch => {\n    let hex = ch.charCodeAt(0).toString(16).toUpperCase()\n\n    // lol, apparently there's no native function for fixed-width hex output\n    if (hex.length < 2) {\n      hex = `0${hex}`\n    }\n    return `%${hex}`\n  })\n}\n\nexport function escape(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n;\\r\\t=%&,\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Escape a value for use in a GTF column value.\n *\n * @param {String} s\n * @returns {String}\n */\nexport function escapeColumn(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n\\r\\t%\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Parse the 9th column (attributes) of a GTF feature line.\n *\n * @param {String} attrString\n * @returns {Object}\n */\nexport function parseAttributes(attrString) {\n  if (!(attrString && attrString.length) || attrString === '.') {\n    return {}\n  }\n\n  const attrs = {}\n\n  attrString\n    .replace(/\\r?\\n$/, '')\n    .slice(0, -1) // need to remove the last semicolon in the attributes\n    .split(';')\n    .forEach(attribute => {\n      if (!attribute) {\n        return\n      }\n      const attr = attribute.trim().split(' ')\n      if (!(attr[1] && attr[1].length)) {\n        return\n      }\n\n      attr[0] = attr[0].trim()\n      let arec = attrs[attr[0].trim()]\n      if (!arec) {\n        arec = []\n        attrs[attr[0]] = arec\n      }\n\n      // arec.push(unescape(attr[1].trim()))\n      arec.push(\n        ...attr[1]\n          .split(',')\n          .map(s => s.trim())\n          .map(unescape),\n      )\n    })\n  return attrs\n}\n\n/**\n * Parse a GTF feature line.\n *\n * @param {String} line\n * returns the parsed line in an object\n */\nexport function parseFeature(line) {\n  // assumed that there are no comments at the end of a line\n  // split the line into columns and replace '.' with null in each column\n  const f = line.split('\\t').map(a => (a === '.' ? null : a))\n\n  // unescape only the seq_name, source, and feature columns\n  f[0] = unescape(f[0])\n  f[1] = unescape(f[1])\n  f[2] = unescape(f[2])\n\n  f[8] = parseAttributes(f[8])\n  const parsed = {}\n  for (let i = 0; i < fieldNames.length; i += 1) {\n    parsed[fieldNames[i]] = f[i] === '.' ? null : f[i]\n  }\n  if (parsed.start !== null) {\n    parsed.start = parseInt(parsed.start, 10)\n  }\n  if (parsed.end !== null) {\n    parsed.end = parseInt(parsed.end, 10)\n  }\n  if (parsed.score !== null) {\n    parsed.score = parseFloat(parsed.score, 10)\n  }\n  if (parsed.strand != null) {\n    parsed.strand = parsed.strand\n  }\n  return parsed\n}\n\n/**\n * Parse a GTF directive/comment line.\n *\n * @param {String} line\n * @returns {Object} the information in the directive\n */\nexport function parseDirective(line) {\n  const match = /^\\s*##\\s*(\\S+)\\s*(.*)/.exec(line)\n  // const match = /^\\s*\\#\\#\\s*(\\S+)\\s*(.*)/.exec(line)\n  if (!match) {\n    return null\n  }\n\n  // let [, name, contents] = match\n  const name = match[1]\n  let contents = match[2]\n  const parsed = { directive: name }\n  if (contents.length) {\n    contents = contents.replace(/\\r?\\n$/, '')\n    parsed.value = contents\n  }\n\n  // do a little additional parsing for sequence-region and genome-build directives\n  if (name === 'sequence-region') {\n    const [seqId, contentStart, contentEnd] = contents.split(/\\s+/, 3)\n    parsed.seq_id = seqId\n    parsed.start = contentStart && contentStart.replace(/\\D/g, '')\n    parsed.end = contentEnd && contentEnd.replace(/\\D/g, '')\n  } else if (name === 'genome-build') {\n    const [source, buildname] = contents.split(/\\s+/, 2)\n    parsed.source = source\n    parsed.buildname = buildname\n  }\n\n  return parsed\n}\n\n/**\n * Format an attributes object into a string suitable for the 9th column of GTF.\n *\n * @param {Object} attrs\n */\nexport function formatAttributes(attrs) {\n  const attrOrder = []\n  Object.keys(attrs).forEach(tag => {\n    const val = attrs[tag]\n    let valstring\n    // eslint-disable-next-line no-prototype-builtins\n    if (val.hasOwnProperty('toString')) {\n      valstring = escape(val.toString())\n    } else if (Array.isArray(val.values)) {\n      valstring = val.values.map(escape).join(',')\n    } else if (Array.isArray(val)) {\n      valstring = val.map(escape).join(',')\n    } else {\n      valstring = escape(val)\n    }\n    attrOrder.push(`${escape(tag)} ${valstring}`)\n  })\n  return attrOrder.length ? attrOrder.join('; ').concat(';') : '.'\n}\n\nconst translateStrand = ['-', '.', '+']\n\nfunction _formatSingleFeature(f, seenFeature) {\n  const attrString =\n    f.attributes === null || f.attributes === undefined\n      ? '.'\n      : formatAttributes(f.attributes)\n\n  const fields = []\n  for (let i = 0; i < 8; i += 1) {\n    const val = f[fieldNames[i]]\n    // deserialize strand\n    if (i === 6) {\n      fields[i] =\n        val === null || val === undefined\n          ? '.'\n          : translateStrand[val + 1] || val\n    } else {\n      fields[i] =\n        val === null || val === undefined ? '.' : escapeColumn(String(val))\n    }\n  }\n  fields[8] = attrString\n\n  const formattedString = `${fields.join('\\t')}\\n`\n\n  // if we have already output this exact feature, skip it\n  if (seenFeature[formattedString]) {\n    return ''\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  seenFeature[formattedString] = true\n  return formattedString\n}\n\nfunction _formatFeature(feature, seenFeature) {\n  if (Array.isArray(feature)) {\n    return feature.map(f => _formatFeature(f, seenFeature)).join('')\n  }\n\n  const strings = [_formatSingleFeature(feature, seenFeature)]\n  ;['child_features', 'derived_features'].forEach(multiSlot => {\n    if (feature[multiSlot]) {\n      strings.push(\n        ...feature[multiSlot].map(f => _formatFeature(f, seenFeature)),\n      )\n    }\n  })\n  return strings.join('')\n}\n\n/**\n * Format a feature object or array of\n * feature objects into one or more lines of GTF.\n *\n * @param {Object|Array[Object]} featureOrFeatures\n */\nexport function formatFeature(featureOrFeatures) {\n  const seen = {}\n  return _formatFeature(featureOrFeatures, seen)\n}\n\n/**\n * Format a directive into a line of GTF.\n *\n * @param {Object} directive\n * @returns {String}\n */\nexport function formatDirective(directive) {\n  let str = `##${directive.directive}`\n  if (directive.value) {\n    str += ` ${directive.value}`\n  }\n  str += '\\n'\n  return str\n}\n\n/**\n * Format a comment into a GTF comment.\n * Yes I know this is just adding a # and a newline.\n *\n * @param {Object} comment\n * @returns {String}\n */\nexport function formatComment(comment) {\n  return `# ${comment.comment}\\n`\n}\n\n/**\n * Format a sequence object as FASTA\n *\n * @param {Object} seq\n * @returns {String} formatted single FASTA sequence\n */\nexport function formatSequence(seq) {\n  return `>${seq.id}${seq.description ? ` ${seq.description}` : ''}\\n${\n    seq.sequence\n  }\\n`\n}\n\n/**\n * Format a directive, comment, or feature,\n * or array of such items, into one or more lines of GTF.\n *\n * @param {Object|Array} itemOrItems\n */\nexport function formatItem(itemOrItems) {\n  function formatSingleItem(item) {\n    if (item[0] || item.attributes) {\n      return formatFeature(item)\n    }\n    if (item.directive) {\n      return formatDirective(item)\n    }\n    if (item.sequence) {\n      return formatSequence(item)\n    }\n    if (item.comment) {\n      return formatComment(item)\n    }\n    return '# (invalid item found during format)\\n'\n  }\n\n  if (Array.isArray(itemOrItems)) {\n    return itemOrItems.map(item => formatSingleItem(item))\n  }\n  return formatSingleItem(itemOrItems)\n}\n","//@ts-nocheck\nimport * as GTF from './util'\n\nconst containerAttributes = {\n  Parent: 'child_features',\n  Derives_from: 'derived_features',\n}\n\nexport default class Parser {\n  constructor(args) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const nullFunc = () => {}\n\n    Object.assign(this, {\n      featureCallback: args.featureCallback || nullFunc,\n      endCallback: args.endCallback || nullFunc,\n      commentCallback: args.commentCallback || nullFunc,\n      errorCallback: args.errorCallback || nullFunc,\n      directiveCallback: args.directiveCallback || nullFunc,\n      sequenceCallback: args.sequenceCallback || nullFunc,\n\n      // number of lines to buffer\n      bufferSize: args.bufferSize === undefined ? 1000 : args.bufferSize,\n\n      // features that we have to keep on hand for now because they\n      // might be referenced by something else\n      _underConstructionTopLevel: [],\n      // index of the above by ID\n      _underConstructionById: {},\n\n      _completedReferences: {},\n\n      // features that reference something we have not seen yet\n      // structured as:\n      // {  'some_id' : {\n      //     'Parent' : [ orphans that have a Parent attr referencing it ],\n      //     'Derives_from' : [ orphans that have a Derives_from attr referencing it ],\n      //    }\n      // }\n      _underConstructionOrphans: {},\n\n      // if this is true, the parser ignores the\n      // rest of the lines in the file.\n      eof: false,\n\n      lineNumber: 0,\n    })\n  }\n\n  addLine(line) {\n    if (this.eof) {\n      // otherwise, if we are done, ignore this line\n      return\n    }\n\n    this.lineNumber += 1\n\n    if (/^\\s*[^#\\s>]/.test(line)) {\n      // feature line, most common case\n      this._bufferLine(line)\n      return\n    }\n\n    const match = /^\\s*(#+)(.*)/.exec(line)\n    if (match) {\n      // directive or comment\n      // eslint-disable-next-line prefer-const\n      let [, hashsigns, contents] = match\n\n      if (hashsigns.length === 3) {\n        // sync directive, all forward-references are resolved.\n        this._emitAllUnderConstructionFeatures()\n      } else if (hashsigns.length === 2) {\n        const directive = GTF.parseDirective(line)\n\n        this._emitItem(directive)\n      } else {\n        contents = contents.replace(/\\s*/, '')\n        this._emitItem({ comment: contents })\n      }\n    } else if (/^\\s*$/.test(line)) {\n      // blank line, do nothing\n    } else {\n      // it's a parse error\n      const errLine = line.replace(/\\r?\\n?$/g, '')\n      throw new Error(`GTF parse error.  Cannot parse '${errLine}'.`)\n    }\n  }\n\n  _emitItem(i) {\n    if (i[0]) {\n      this.featureCallback(i)\n    } else if (i.directive) {\n      this.directiveCallback(i)\n    } else if (i.comment) {\n      this.commentCallback(i)\n    }\n  }\n\n  finish() {\n    this._emitAllUnderConstructionFeatures()\n    this.endCallback()\n  }\n\n  _enforceBufferSizeLimit(additionalItemCount = 0) {\n    const _unbufferItem = item => {\n      if (\n        item &&\n        item[0] &&\n        item[0].attributes &&\n        item[0].attributes.ID &&\n        item[0].attributes.ID[0]\n      ) {\n        const ids = item[0].attributes.ID\n        ids.forEach(id => {\n          delete this._underConstructionById[id]\n          delete this._completedReferences[id]\n        })\n        item.forEach(i => {\n          if (i.child_features) {\n            i.child_features.forEach(c => _unbufferItem(c))\n          }\n          if (i.derived_features) {\n            i.derived_features.forEach(d => _unbufferItem(d))\n          }\n        })\n      }\n    }\n\n    while (\n      this._underConstructionTopLevel.length + additionalItemCount >\n      this.bufferSize\n    ) {\n      const item = this._underConstructionTopLevel.shift()\n      this._emitItem(item)\n      _unbufferItem(item)\n    }\n  }\n\n  /**\n   * return all under-construction features, called when we know\n   * there will be no additional data to attach to them\n   * @private\n   */\n  _emitAllUnderConstructionFeatures() {\n    this._underConstructionTopLevel.forEach(this._emitItem.bind(this))\n\n    this._underConstructionTopLevel = []\n    this._underConstructionById = {}\n    this._completedReferences = {}\n\n    // if we have any orphans hanging around still, this is a\n    // problem. die with a parse error\n    if (\n      Object.values(this._underConstructionOrphans).filter(\n        entry => Object.keys(entry).length,\n      ).length\n    ) {\n      throw new Error(\n        `some features reference other features that do not exist in the file (or in the same '###' scope). ${JSON.stringify(\n          this._underConstructionOrphans,\n        )}`,\n      )\n    }\n  }\n\n  // do the right thing with a newly-parsed feature line\n  _bufferLine(line) {\n    const featureLine = GTF.parseFeature(line)\n    featureLine.child_features = []\n    featureLine.derived_features = []\n    // featureLine._lineNumber = this.lineNumber //< debugging aid\n\n    const featureNumber = this.lineNumber // no such thing as unique ID in GTF. make one up.\n    const isTranscript = featureLine.featureType === 'transcript' // trying to support the Cufflinks convention of adding a transcript line\n    // NOTE: a feature is an arrayref of one or more feature lines.\n    const ids = isTranscript\n      ? featureLine.attributes.transcript_id || []\n      : [featureNumber]\n    const parents = isTranscript\n      ? []\n      : featureLine.attributes.transcript_id || []\n    const derives = featureLine.attributes.Derives_from || []\n\n    if (!ids.length && !parents.length && !derives.length) {\n      // if it has no IDs and does not refer to anything, we can just\n      // output it\n      this._emitItem([featureLine])\n      return\n    }\n\n    function createTranscript(feature) {\n      const result = JSON.parse(JSON.stringify(feature))\n      result.featureType = 'transcript'\n      return GTF.formatFeature(result)\n    }\n\n    parents.forEach(parent => {\n      const underConst = this._underConstructionById[parent]\n      if (!underConst) {\n        this._bufferLine(createTranscript(featureLine))\n      }\n    })\n\n    let feature\n    ids.forEach(id => {\n      const existing = this._underConstructionById[id]\n      if (existing) {\n        existing.push(featureLine)\n        feature = existing\n      } else {\n        // haven't seen it yet, so buffer it so we can attach\n        // child features to it\n        feature = [featureLine]\n\n        this._enforceBufferSizeLimit(1)\n        if (!parents.length && !derives.length) {\n          this._underConstructionTopLevel.push(feature)\n        }\n        this._underConstructionById[id] = feature\n\n        // see if we have anything buffered that refers to it\n        this._resolveReferencesTo(feature, id)\n      }\n    })\n\n    // try to resolve all its references\n    this._resolveReferencesFrom(\n      feature || [featureLine],\n      { Parent: parents, Derives_from: derives },\n      ids,\n    )\n  }\n\n  _resolveReferencesTo(feature, id) {\n    const references = this._underConstructionOrphans[id]\n    if (!references) {\n      return\n    }\n\n    Object.keys(references).forEach(attrname => {\n      const pname = containerAttributes[attrname] || attrname.toLowerCase()\n      feature.forEach(loc => {\n        loc[pname].push(...references[attrname])\n        delete references[attrname]\n      })\n    })\n  }\n\n  _parseError(message) {\n    this.eof = true\n    this.errorCallback(`${this.lineNumber}: ${message}`)\n  }\n\n  _resolveReferencesFrom(feature, references, ids) {\n    // this is all a bit more awkward in javascript than it was in perl\n    function postSet(obj, slot1, slot2) {\n      let subObj = obj[slot1]\n      if (!subObj) {\n        subObj = {}\n        // eslint-disable-next-line no-param-reassign\n        obj[slot1] = subObj\n      }\n      const returnVal = subObj[slot2] || false\n      subObj[slot2] = true\n      return returnVal\n    }\n\n    function expandFeature(parentFeature, childFeature) {\n      // eslint-disable-next-line no-param-reassign\n      parentFeature[0].start = Math.min(\n        parentFeature[0].start,\n        childFeature[0].start,\n      )\n      // eslint-disable-next-line no-param-reassign\n      parentFeature[0].end = Math.max(parentFeature[0].end, childFeature[0].end)\n    }\n\n    Object.entries(references).forEach(([attrname, toIds]) => {\n      let pname\n      toIds.forEach(toId => {\n        const otherFeature = this._underConstructionById[toId]\n        if (otherFeature) {\n          expandFeature(otherFeature, feature)\n          if (!pname) {\n            pname = containerAttributes[attrname] || attrname.toLowerCase()\n          }\n\n          if (\n            !ids.filter(id =>\n              postSet(this._completedReferences, id, `${attrname},${toId}`),\n            ).length\n          ) {\n            otherFeature.forEach(location => {\n              location[pname].push(feature)\n            })\n          }\n        } else {\n          if (!this._underConstructionOrphans[toId]) {\n            this._underConstructionOrphans[toId] = {}\n          }\n          if (!this._underConstructionOrphans[toId][attrname]) {\n            this._underConstructionOrphans[toId][attrname] = []\n          }\n          this._underConstructionOrphans[toId][attrname].push(feature)\n        }\n      })\n    })\n  }\n}\n","//@ts-nocheck\nimport Parser from './parse'\nimport { formatItem, formatSequence } from './util'\n\nimport { Transform } from 'stream'\nimport { StringDecoder as Decoder } from 'string_decoder'\n\n// don't load fs native module if running in webpacked code\n// eslint-disable-next-line camelcase\nconst fs = typeof __webpack_require__ !== 'function' ? require('fs') : null\n\n// call a callback on the next process tick if running in\n// an environment that supports it\nfunction _callback(callback) {\n  if (process && process.nextTick) {\n    process.nextTick(callback)\n  } else {\n    callback()\n  }\n}\n\n// shared arg processing for the parse routines\nfunction _processParseOptions(options, additionalDefaults = {}) {\n  const out = Object.assign(\n    {\n      parseFeatures: true,\n      parseDirectives: false,\n      parseSequences: true,\n      parseComments: false,\n    },\n    additionalDefaults,\n    options,\n  )\n\n  if (options.parseAll) {\n    out.parseFeatures = true\n    out.parseDirectives = true\n    out.parseComments = true\n    out.parseSequences = true\n  }\n\n  return out\n}\n\nclass GTFTransform extends Transform {\n  constructor(inputOptions = {}) {\n    const options = _processParseOptions(inputOptions)\n    super({ objectMode: true })\n\n    this.encoding = inputOptions.encoding || 'utf8'\n\n    this.decoder = new Decoder()\n    this.textBuffer = ''\n\n    const push = this.push.bind(this)\n    this.parser = new Parser({\n      featureCallback: options.parseFeatures ? push : null,\n      directiveCallback: options.parseDirectives ? push : null,\n      commentCallback: options.parseComments ? push : null,\n      sequenceCallback: options.parseSequences ? push : null,\n      errorCallback: err => this.emit('error', err),\n      bufferSize: options.bufferSize,\n    })\n  }\n\n  _addLine(data) {\n    const line = data.toString('utf8')\n    if (line) {\n      this.parser.addLine(line)\n    }\n  }\n\n  _nextText(buffer) {\n    const pieces = (this.textBuffer + buffer).split(/\\r?\\n/)\n    this.textBuffer = pieces.pop()\n\n    if (this.maxLineLength && this.textBuffer.length > this.maxLineLength) {\n      this.emit('error', new Error('maximum line size exceeded'))\n      return\n    }\n\n    pieces.forEach(piece => this._addLine(piece))\n  }\n\n  _transform(chunk, encoding, callback) {\n    this._nextText(this.decoder.write(chunk))\n    _callback(callback)\n  }\n\n  _flush(callback) {\n    if (this.decoder.end) {\n      this._nextText(this.decoder.end())\n    }\n    if (this.textBuffer != null) {\n      this._addLine(this.textBuffer)\n    }\n    this.parser.finish()\n    _callback(callback)\n  }\n}\n\n/**\n * Parse a stream of text data into a stream of feature,\n * directive, and comment objects.\n *\n * @param {Object} options optional options object\n * @param {string} options.encoding text encoding of the input GTF. default 'utf8'\n * @param {boolean} options.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} options.parseFeatures default true\n * @param {boolean} options.parseDirectives default false\n * @param {boolean} options.parseComments default false\n * @param {boolean} options.parseSequences default true\n * @param {Number} options.bufferSize maximum number of GTF lines to buffer. defaults to 1000\n * @returns {ReadableStream} stream (in objectMode) of parsed items\n */\nexport function parseStream(options = {}) {\n  const newOptions = Object.assign({ bufferSize: 1000 }, options)\n  return new GTFTransform(newOptions)\n}\n\n/**\n * Read and parse a GTF file from the filesystem.\n *\n * @param {string} filename the filename of the file to parse\n * @param {Object} options optional options object\n * @param {string} options.encoding the file's string encoding, defaults to 'utf8'\n * @param {boolean} options.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} options.parseFeatures default true\n * @param {boolean} options.parseDirectives default false\n * @param {boolean} options.parseComments default false\n * @param {boolean} options.parseSequences default true\n * @param {Number} options.bufferSize maximum number of GTF lines to buffer. defaults to 1000\n * @returns {ReadableStream} stream (in objectMode) of parsed items\n */\nexport function parseFile(filename, options) {\n  return fs.createReadStream(filename).pipe(parseStream(options))\n}\n\n/**\n * Synchronously parse a string containing GTF and return\n * an arrayref of the parsed items.\n *\n * @param {string} str\n * @param {Object} inputOptions optional options object\n * @param {boolean} inputOptions.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} inputOptions.parseFeatures default true\n * @param {boolean} inputOptions.parseDirectives default false\n * @param {boolean} inputOptions.parseComments default false\n * @param {boolean} inputOptions.parseSequences default true\n * @returns {Array} array of parsed features, directives, and/or comments\n */\nexport function parseStringSync(str, inputOptions = {}) {\n  if (!str) {\n    return []\n  }\n\n  const options = _processParseOptions(inputOptions)\n\n  const items = []\n  const push = items.push.bind(items)\n\n  const parser = new Parser({\n    featureCallback: options.parseFeatures ? push : null,\n    directiveCallback: options.parseDirectives ? push : null,\n    commentCallback: options.parseComments ? push : null,\n    sequenceCallback: options.parseSequences ? push : null,\n    bufferSize: Infinity,\n    errorCallback: err => {\n      throw err\n    },\n  })\n\n  str.split(/\\r?\\n/).forEach(parser.addLine.bind(parser))\n  parser.finish()\n\n  return items\n}\n\n/**\n * Format an array of GTF items (features,directives,comments) into string of GTF.\n * Does not insert synchronization (###) marks.\n * Does not insert directive if it's not already there.\n *\n * @param {Array[Object]} items\n * @returns {String} the formatted GTF\n */\nexport function formatSync(items) {\n  // sort items into seq and other\n  const other = []\n  const sequences = []\n  items.forEach(i => {\n    if (i.sequence) {\n      sequences.push(i)\n    } else {\n      other.push(i)\n    }\n  })\n  let str = other.map(formatItem).join('')\n  if (sequences.length) {\n    str += '##FASTA\\n'\n    str += sequences.map(formatSequence).join('')\n  }\n  return str\n}\n\nclass FormattingTransform extends Transform {\n  constructor(options = {}) {\n    super(Object.assign(options, { objectMode: true }))\n    this.linesSinceLastSyncMark = 0\n    this.minLinesBetweenSyncMarks = options.minSyncLines || 100\n    this.insertVersionDirective = options.insertVersionDirective || false\n    this.haveWeEmittedData = false\n    this.fastaMode = false\n  }\n\n  _transform(chunk, encoding, callback) {\n    // if we have not emitted anything yet, and this first\n    // chunk is not a gtf directive, emit one\n    let str\n    if (\n      !this.haveWeEmittedData &&\n      this.insertVersionDirective &&\n      (chunk[0] || chunk).directive !== 'gtf'\n    ) {\n      this.push('##gtf\\n')\n    }\n\n    // if it's a sequence chunk coming down, emit a FASTA directive and\n    // change to FASTA mode\n    if (chunk.sequence && !this.fastaMode) {\n      this.push('##FASTA\\n')\n      this.fastaMode = true\n    }\n\n    if (Array.isArray(chunk)) {\n      str = chunk.map(formatItem).join('')\n    } else {\n      str = formatItem(chunk)\n    }\n\n    this.push(str)\n\n    if (this.linesSinceLastSyncMark >= this.minLinesBetweenSyncMarks) {\n      this.push('###\\n')\n      this.linesSinceLastSyncMark = 0\n    } else {\n      // count the number of newlines in this chunk\n      let count = 0\n      for (let i = 0; i < str.length; i += 1) {\n        if (str[i] === '\\n') {\n          count += 1\n        }\n      }\n      this.linesSinceLastSyncMark += count\n    }\n\n    this.haveWeEmittedData = true\n    _callback(callback)\n  }\n}\n\n/**\n * Format a stream of items (of the type produced\n * by this script) into a stream of GTF text.\n *\n * Inserts synchronization (###) marks automatically.\n *\n * @param {Object} options\n * @param {Object} options.minSyncLines minimum number of lines between ### marks. default 100\n * @param {Boolean} options.insertVersionDirective\n *  if the first item in the stream is not a ##gff-version directive, insert one to show it's gtf\n *  default false\n */\nexport function formatStream(options) {\n  return new FormattingTransform(options)\n}\n\n/**\n * Format a stream of items (of the type produced\n * by this script) into a GTF file and write it to the filesystem.\n\n * Inserts synchronization (###) marks and a ##gtf\n * directive automatically (if one is not already present).\n *\n * @param {ReadableStream} stream the stream to write to the file\n * @param {String} filename the file path to write to\n * @param {Object} options\n * @param {String} options.encoding default 'utf8'. encoding for the written file\n * @param {Number} options.minSyncLines\n *  minimum number of lines between sync (###) marks. default 100\n * @param {Boolean} options.insertVersionDirective\n *  if the first item in the stream is not a ##gtf directive, insert one.\n *  default false\n * @returns {Promise} promise for the written filename\n */\nexport function formatFile(stream, filename, options = {}) {\n  const newOptions = Object.assign(\n    {\n      insertVersionDirective: false,\n    },\n    options,\n  )\n\n  return new Promise((resolve, reject) => {\n    stream\n      .pipe(new FormattingTransform(newOptions))\n      .on('end', () => resolve(filename))\n      .on('error', reject)\n      .pipe(\n        fs.createWriteStream(filename, {\n          encoding: newOptions.encoding || 'utf8',\n        }),\n      )\n  })\n}\n","//@ts-nocheck\nimport {\n  parseStream,\n  parseFile,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n} from './api'\n\nimport * as util from './util'\n\nexport default {\n  parseStream,\n  parseFile,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n  util,\n}\n","export type Strand = '+' | '-' | '.' | '?'\nexport interface FeatureLoc {\n  [key: string]: unknown\n  start: number\n  end: number\n  strand: Strand\n  seq_name: string\n  child_features: FeatureLoc[][]\n  data: unknown\n  derived_features: unknown\n  attributes: Record<string, unknown[]>\n}\n\nexport function featureData(data: FeatureLoc) {\n  const f: Record<string, unknown> = { ...data }\n  ;(f.start as number) -= 1 // convert to interbase\n  f.strand = { '+': 1, '-': -1, '.': 0, '?': undefined }[data.strand] // convert strand\n  f.phase = Number(data.frame)\n  f.refName = data.seq_name\n  if (data.score === null) {\n    delete f.score\n  }\n  if (data.frame === null) {\n    delete f.score\n  }\n  const defaultFields = new Set([\n    'start',\n    'end',\n    'seq_name',\n    'score',\n    'featureType',\n    'source',\n    'frame',\n    'strand',\n  ])\n  for (const a of Object.keys(data.attributes)) {\n    let b = a.toLowerCase()\n    if (defaultFields.has(b)) {\n      // add \"suffix\" to tag name if it already exists\n      // reproduces behavior of NCList\n      b += '2'\n    }\n    if (data.attributes[a] !== null) {\n      let attr = data.attributes[a] as string[] | string\n      if (Array.isArray(attr) && attr.length === 1) {\n        // gtf uses double quotes for text values in the attributes column,\n        // remove them\n        attr = `${attr[0]}`.replaceAll(/^\"|\"$/g, '')\n      }\n      f[b] = attr\n    }\n  }\n  f.refName = f.seq_name\n  f.type = f.featureType\n\n  // the SimpleFeature constructor takes care of recursively inflating subfeatures\n  if (data.child_features && data.child_features.length > 0) {\n    f.subfeatures = data.child_features.flatMap(childLocs =>\n      childLocs.map(childLoc => featureData(childLoc)),\n    )\n  }\n\n  delete f.child_features\n  delete f.data\n  delete f.derived_features\n  // eslint-disable-next-line no-underscore-dangle\n  delete f._linehash\n  delete f.attributes\n  delete f.seq_name\n  delete f.featureType\n  delete f.frame\n\n  if (f.transcript_id) {\n    f.name = f.transcript_id\n  }\n  return f\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport gtf from '@gmod/gtf'\n\n// locals\nimport { FeatureLoc, featureData } from '../util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gtfFeatures?: Promise<{\n    feats: Record<string, string[]>\n  }>\n\n  protected intervalTrees: Record<\n    string,\n    Promise<IntervalTree | undefined> | undefined\n  > = {}\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const gtfLoc = this.getConf('gtfLocation')\n    const buffer = await openLocation(gtfLoc, this.pluginManager).readFile(opts)\n\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buf)\n\n    const lines = data\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && !f.startsWith('#'))\n    const feats = {} as Record<string, string[]>\n    for (const line of lines) {\n      if (line.startsWith('#')) {\n        continue\n      }\n      const tab = line.indexOf('\\t')\n      const refName = line.slice(0, tab)\n      if (!feats[refName]) {\n        feats[refName] = []\n      }\n      feats[refName].push(line)\n    }\n\n    return { feats }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.gtfFeatures) {\n      this.gtfFeatures = this.loadDataP(opts).catch(e => {\n        this.gtfFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gtfFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { feats } = await this.loadData(opts)\n    return Object.keys(feats)\n  }\n\n  private async loadFeatureIntervalTreeHelper(refName: string) {\n    const { feats } = await this.loadData()\n    const lines = feats[refName]\n    if (!lines) {\n      return undefined\n    }\n    const data = gtf.parseStringSync(lines.join('\\n'), {\n      parseFeatures: true,\n      parseComments: false,\n      parseDirectives: false,\n      parseSequences: false,\n    }) as FeatureLoc[][]\n\n    const intervalTree = new IntervalTree()\n    const ret = data.flat().map(\n      (f, i) =>\n        new SimpleFeature({\n          data: featureData(f),\n          id: `${this.id}-${refName}-${i}`,\n        }),\n    )\n\n    for (const obj of ret) {\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n    return intervalTree\n  }\n\n  private async loadFeatureIntervalTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(\n        refName,\n      ).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = query\n        const intervalTree = await this.loadFeatureIntervalTree(refName)\n        intervalTree?.search([start, end]).forEach(f => observer.next(f))\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n  public freeResources(/* { region } */) {}\n}\n"],"names":["fieldNames","unescape","s","String","replace","_","seq","fromCharCode","parseInt","_escape","regex","ch","hex","charCodeAt","toString","toUpperCase","length","concat","escape","escapeColumn","parseAttributes","attrString","attrs","slice","split","forEach","attribute","attr","trim","arec","push","map","parseFeature","line","f","a","parsed","i","start","end","score","parseFloat","strand","parseDirective","match","exec","name","contents","directive","value","seqId","contentStart","contentEnd","seq_id","source","buildname","formatAttributes","attrOrder","Object","keys","tag","val","valstring","hasOwnProperty","Array","isArray","values","join","translateStrand","_formatSingleFeature","seenFeature","attributes","undefined","fields","formattedString","_formatFeature","feature","strings","multiSlot","formatFeature","featureOrFeatures","formatDirective","str","formatComment","comment","formatSequence","id","description","sequence","formatItem","itemOrItems","formatSingleItem","item","containerAttributes","Parent","Derives_from","Parser","constructor","args","nullFunc","assign","this","featureCallback","endCallback","commentCallback","errorCallback","directiveCallback","sequenceCallback","bufferSize","_underConstructionTopLevel","_underConstructionById","_completedReferences","_underConstructionOrphans","eof","lineNumber","addLine","test","_bufferLine","hashsigns","_emitAllUnderConstructionFeatures","GTF","_emitItem","errLine","Error","finish","_enforceBufferSizeLimit","additionalItemCount","arguments","_unbufferItem","ID","child_features","c","derived_features","d","shift","bind","filter","entry","JSON","stringify","featureLine","featureNumber","isTranscript","featureType","ids","transcript_id","parents","derives","parent","result","parse","createTranscript","existing","_resolveReferencesTo","_resolveReferencesFrom","references","attrname","pname","toLowerCase","loc","_parseError","message","entries","_ref","toIds","toId","otherFeature","parentFeature","childFeature","Math","min","max","obj","slot1","slot2","subObj","returnVal","postSet","location","fs","_callback","callback","process","nextTick","_processParseOptions","options","additionalDefaults","out","parseFeatures","parseDirectives","parseSequences","parseComments","parseAll","GTFTransform","Transform","inputOptions","super","objectMode","encoding","decoder","Decoder","textBuffer","parser","err","emit","_addLine","data","_nextText","buffer","pieces","pop","maxLineLength","piece","_transform","chunk","write","_flush","parseStream","newOptions","FormattingTransform","linesSinceLastSyncMark","minLinesBetweenSyncMarks","minSyncLines","insertVersionDirective","haveWeEmittedData","fastaMode","count","parseFile","filename","createReadStream","pipe","parseStringSync","items","Infinity","formatSync","other","sequences","formatStream","formatFile","stream","Promise","resolve","reject","on","createWriteStream","util","featureData","phase","Number","frame","refName","seq_name","defaultFields","Set","b","has","replaceAll","type","subfeatures","flatMap","childLocs","childLoc","_linehash","BaseFeatureDataAdapter","gtfFeatures","intervalTrees","loadDataP","opts","gtfLoc","getConf","openLocation","pluginManager","readFile","buf","isGzip","unzip","lines","TextDecoder","fatal","decode","startsWith","feats","tab","indexOf","loadData","catch","e","getRefNames","loadFeatureIntervalTreeHelper","gtf","intervalTree","IntervalTree","ret","flat","SimpleFeature","insert","get","loadFeatureIntervalTree","getFeatures","query","ObservableCreate","async","search","observer","next","complete","error","signal","freeResources"],"sourceRoot":""}