{"version":3,"file":"static/js/1007.0744d282.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGBackground.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGDotplotView.tsx"],"sourcesContent":["import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { getTickDisplayStr } from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { getBlockLabelKeysToHide } from './util'\nimport { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n}))\nexport const HorizontalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderY } = model\n  const { classes } = useStyles()\n  return (\n    <svg width={viewWidth} height={borderY} className={classes.htext}>\n      <HorizontalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const HorizontalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n  const theme = useTheme()\n  const hviewSnap = {\n    ...getSnapshot(hview),\n    width,\n    staticBlocks: hview.staticBlocks,\n  }\n\n  const ticks = hticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: hviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const x = region.offsetPx\n          const y = 0\n          const xoff = Math.floor(x - hview.offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${htextRotation},${xoff},${y})`}\n              key={JSON.stringify(region)}\n              x={xoff}\n              y={y + 1}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"hanging\"\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, x]) => {\n        return (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            x1={x}\n            x2={x}\n            y1={0}\n            y2={tick.type === 'major' ? 6 : 4}\n            strokeWidth={1}\n            stroke={theme.palette.grey[400]}\n          />\n        )\n      })}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, x]) => {\n          const y = 0\n          return x > 10 ? (\n            <text\n              x={x - 7}\n              y={y}\n              transform={`rotate(${htextRotation},${x},${y})`}\n              key={`text-${JSON.stringify(tick)}`}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              dominantBaseline=\"middle\"\n              textAnchor=\"end\"\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null\n        })}\n      <text\n        y={borderY - 12}\n        x={(viewWidth - borderX) / 2}\n        fill={theme.palette.text.primary}\n        textAnchor=\"middle\"\n        fontSize={11}\n        dominantBaseline=\"hanging\"\n      >\n        {hview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\nexport const VerticalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { borderX, viewHeight } = model\n  const { classes } = useStyles()\n  return (\n    <svg className={classes.vtext} width={borderX} height={viewHeight}>\n      <VerticalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const VerticalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewHeight, borderX, borderY, vview, vtextRotation, vticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n  const theme = useTheme()\n  const vviewSnap = {\n    ...getSnapshot(vview),\n    width,\n    staticBlocks: vview.staticBlocks,\n  }\n  const ticks = vticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: vviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const y = region.offsetPx\n          const x = borderX\n          const yoff = Math.floor(viewHeight - y + offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${vtextRotation},${x},${y})`}\n              key={JSON.stringify(region)}\n              x={x}\n              y={yoff}\n              fill={theme.palette.text.primary}\n              fontSize={11}\n              textAnchor=\"end\"\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, y]) => (\n        <line\n          key={`line-${JSON.stringify(tick)}`}\n          y1={viewHeight - y}\n          y2={viewHeight - y}\n          x1={borderX}\n          x2={borderX - (tick.type === 'major' ? 6 : 4)}\n          strokeWidth={1}\n          stroke={theme.palette.grey[400]}\n        />\n      ))}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, y]) => {\n          return y > 10 ? (\n            <text\n              y={viewHeight - y - 3}\n              x={borderX - 7}\n              key={`text-${JSON.stringify(tick)}`}\n              textAnchor=\"end\"\n              fill={theme.palette.text.primary}\n              dominantBaseline=\"hanging\"\n              fontSize={11}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null\n        })}\n      <text\n        y={(viewHeight - borderY) / 2}\n        x={12}\n        fill={theme.palette.text.primary}\n        transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n        textAnchor=\"middle\"\n        fontSize={11}\n      >\n        {vview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { useTheme } from '@mui/material'\n\n// locals\nimport { DotplotViewModel } from '../model'\n\nexport const GridRaw = observer(function ({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  if (!hblocks.length || !vblocks.length) {\n    return null\n  }\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0].offsetPx - hview.offsetPx\n  const vbottom = vblocks[0].offsetPx - vview.offsetPx\n  const theme = useTheme()\n  const stroke = theme.palette.divider\n\n  // Uses math.max/min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n\n  let lastx = Infinity\n  let lasty = Infinity\n  return (\n    <>\n      <rect\n        x={rx}\n        y={ry}\n        width={w}\n        height={h}\n        fill={theme.palette.background.default}\n      />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          const render = Math.floor(x) !== Math.floor(lastx)\n          if (render) {\n            lastx = x\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          const render = Math.floor(y) !== Math.floor(lasty)\n          if (render) {\n            lasty = y\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              stroke={stroke}\n            />\n          ) : null\n        })}\n        <line x1={htop} y1={0} x2={htop} y2={viewHeight} stroke={stroke} />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          stroke={stroke}\n        />\n      </g>\n      {children}\n    </>\n  )\n})\n\nexport default function Grid({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight } = model\n  return (\n    <svg\n      width={viewWidth}\n      height={viewHeight}\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n    >\n      <GridRaw model={model}>{children}</GridRaw>\n    </svg>\n  )\n}\n","import React from 'react'\nimport { useTheme } from '@mui/material'\nimport { stripAlpha } from '@jbrowse/core/util'\n\nexport default function SVGBackground({\n  width,\n  height,\n}: {\n  width: number\n  height: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { when } from 'mobx'\nimport { getSession } from '@jbrowse/core/util'\nimport { ThemeProvider } from '@mui/material'\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\n\n// locals\nimport { DotplotViewModel, ExportSvgOptions } from '../model'\nimport { GridRaw } from '../components/Grid'\nimport { HorizontalAxisRaw, VerticalAxisRaw } from '../components/Axes'\nimport SVGBackground from './SVGBackground'\n\n// render LGV to SVG\nexport async function renderToSvg(\n  model: DotplotViewModel,\n  opts: ExportSvgOptions,\n) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => <>{children}</> } =\n    opts\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, borderX, viewWidth, viewHeight, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n  const w = width + shift * 2\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w, height].toString()}\n        >\n          <SVGBackground width={w} height={height} />\n          <VerticalAxisRaw model={model} />\n          <g transform={`translate(${borderX} 0)`}>\n            <GridRaw model={model} />\n            <defs>\n              <clipPath id=\"clip-ruler\">\n                <rect x={0} y={0} width={viewWidth} height={viewHeight} />\n              </clipPath>\n            </defs>\n            <g clipPath=\"url(#clip-ruler)\">\n              {displayResults.map(({ result }, i) => (\n                <g key={i}>{result}</g>\n              ))}\n            </g>\n          </g>\n          <g transform={`translate(${borderX} ${viewHeight})`}>\n            <HorizontalAxisRaw model={model} />\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n"],"names":["useStyles","makeStyles","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","HorizontalAxis","observer","_ref","model","viewWidth","borderY","classes","_jsx","width","height","className","children","HorizontalAxisRaw","_ref2","borderX","hview","htextRotation","hticks","offsetPx","dynamicBlocks","bpPerPx","dblocks","contentBlocks","hide","getBlockLabelKeysToHide","theme","useTheme","hviewSnap","getSnapshot","staticBlocks","ticks","map","tick","_bpToPx","bpToPx","refName","coord","base","self","filter","f","undefined","_jsxs","_Fragment","region","has","key","x","xoff","Math","floor","transform","concat","y","fill","palette","text","primary","fontSize","dominantBaseline","textAnchor","JSON","stringify","_ref3","x1","x2","y1","y2","type","strokeWidth","stroke","grey","t","_ref4","getTickDisplayStr","assemblyNames","join","VerticalAxis","_ref5","viewHeight","VerticalAxisRaw","_ref6","vview","vtextRotation","vticks","vviewSnap","_bpToPx2","yoff","_ref7","_ref8","GridRaw","hblocks","vblocks","length","htop","displayedRegionsTotalPx","vtop","hbottom","vbottom","divider","rx","max","ry","w","min","h","lastx","Infinity","lasty","background","default","render","Grid","style","SVGBackground","stripAlpha","async","renderToSvg","opts","_session$allThemes","when","initialized","themeName","Wrapper","session","getSession","allThemes","call","tracks","displayResults","Promise","all","display","track","displays","ready","result","renderSvg","shift","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","xmlns","xmlnsXlink","viewBox","toString","id","clipPath","i"],"sourceRoot":""}