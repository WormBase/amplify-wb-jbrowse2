{"version":3,"file":"static/js/6652.08b1e676.chunk.js","mappings":"yPAYA,MAsDA,GAtD8BA,EAAAA,EAAAA,WAAS,SAA8BC,GAUjE,IAVkE,UACpEC,EAAY,CAAC,EAAC,QACdC,GAQDF,EACC,MAAM,KAAEG,EAAI,qBAAEC,EAAoB,sBAAEC,GAA0BJ,EAC9D,OACEK,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,SAAS,KAAKC,MAAK,qBAAAC,OAAuBR,EAAI,KAAIS,SAAA,EAC7DN,EAAAA,EAAAA,MAACO,EAAAA,EAAa,CAAAD,SAAA,CACXR,GACCE,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAF,SAAA,EACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAAAJ,SAAC,yCAGnBG,EAAAA,EAAAA,KAACE,EAAAA,EAAI,CAAAL,SACFM,OAAOC,QAAQf,GAAsBgB,KAAIC,IAAA,IAAEC,EAAKC,GAAMF,EAAA,OACrDN,EAAAA,EAAAA,KAACS,EAAAA,GAAQ,CAAAZ,SAAA,GAAAD,OAAeY,EAAK,KAAAZ,OAAIW,IAAlBA,EAAmC,SAItD,MACJP,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAAAJ,SAAC,wDAIrBN,EAAAA,EAAAA,MAACmB,EAAAA,EAAa,CAAAb,SAAA,EACZG,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CAACC,QAASA,IAAMzB,IAAW0B,MAAM,UAAShB,SAAC,YAGlDG,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACLG,QAAQ,YACRF,QACE1B,EACI,KACuB,OAArBI,QAAqB,IAArBA,GAAAA,IACAH,GAAS,EAEX,OAEN0B,MAAM,UAAShB,SAChB,YAMT,G","sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/dialogs/CloseConnectionDialog.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  DialogContent,\n  DialogContentText,\n  Button,\n  List,\n  ListItem,\n  DialogActions,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { observer } from 'mobx-react'\n\nconst CloseConnectionDialog = observer(function CloseConnectionDialog({\n  modalInfo = {},\n  onClose,\n}: {\n  modalInfo?: {\n    name?: string\n    dereferenceTypeCount?: Record<string, number>\n    safelyBreakConnection?: () => void\n  }\n  onClose: () => void\n}) {\n  const { name, dereferenceTypeCount, safelyBreakConnection } = modalInfo\n  return (\n    <Dialog open maxWidth=\"lg\" title={`Close connection \"${name}\"`}>\n      <DialogContent>\n        {dereferenceTypeCount ? (\n          <>\n            <DialogContentText>\n              Closing this connection will close:\n            </DialogContentText>\n            <List>\n              {Object.entries(dereferenceTypeCount).map(([key, value]) => (\n                <ListItem key={key}>{`${value} ${key}`}</ListItem>\n              ))}\n            </List>\n          </>\n        ) : null}\n        <DialogContentText>\n          Are you sure you want to close this connection?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => onClose()} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={\n            modalInfo\n              ? () => {\n                  safelyBreakConnection?.()\n                  onClose()\n                }\n              : () => {}\n          }\n          color=\"primary\"\n        >\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default CloseConnectionDialog\n"],"names":["observer","_ref","modalInfo","onClose","name","dereferenceTypeCount","safelyBreakConnection","_jsxs","Dialog","open","maxWidth","title","concat","children","DialogContent","_Fragment","_jsx","DialogContentText","List","Object","entries","map","_ref2","key","value","ListItem","DialogActions","Button","onClick","color","variant"],"sourceRoot":""}