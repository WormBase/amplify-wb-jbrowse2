{"version":3,"file":"static/js/2936.5b0438f5.chunk.js","mappings":"mOAwCO,SAAeA,EAAWC,GAAA,OAAAC,EAAAA,IAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA1B,SAAAC,EACLC,GAA8D,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAI1B,GAJ0BT,GAE1BU,EAAAA,EAAAA,oBAAmBX,GAAjCE,EAASD,EAAvBW,aAAYT,GACGU,EAAAA,EAAAA,YAAWb,GAA1BI,EAAUD,EAAVC,YACFC,GAAOS,EAAAA,EAAAA,mBAAkBd,IAErBe,cAAef,EAAKgB,QAAShB,EAAKiB,eAAc,CAAAT,EAAAE,KAAA,eAAAF,EAAAU,OAAA,iBAIrC,OAArBlB,EAAKmB,YAAW,GAAKX,EAAAE,KAAA,EACFN,EAAWgB,KAAKlB,EAAW,2BAA4B,CACxEA,UAAAA,EACAmB,QAAShB,EAAKiB,aAAaC,cAC3BC,UAAUC,EAAAA,EAAAA,aAAYzB,EAAKwB,UAC3BE,cAAe1B,EAAK0B,gBACpB,OALIpB,EAAGE,EAAAmB,KAOT3B,EAAK4B,aAAatB,GAClBN,EAAKmB,YAAW,GAAM,yBAAAX,EAAAqB,OAAA,GAAA9B,EAAA,MACvB+B,MAAA,KAAAC,UAAA,CCrDM,SAASC,EACdhC,EACAiC,GAeA,SAASC,EAAK7B,GACZ,IAAM8B,EAASnC,EAAKoC,IACpB,GAAKD,EAAL,CAIA,IAAME,EAAMF,EAAOG,WAAW,MACzBD,GAIArC,EAAKuC,YAIVF,EAAIG,UAAU,EAAG,EAAGL,EAAOM,MAAqB,EAAdzC,EAAK0C,QACvCL,EAAIM,iBACJN,EAAIO,MAAM,EAAG,GACbX,EAAGjC,EAAMqC,EAAKF,EAAOM,MAAOzC,EAAK0C,QACjC1C,EAAK6C,qBAAqBxC,EAAKyC,UAC/B9C,EAAK+C,oBAAoB1C,EAAK2C,SAhB9B,CAiBF,EA7BAC,EAAAA,EAAAA,IACEjD,GAAIJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACJ,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQjB,EAAYO,GAAK,wBAAAQ,EAAAqB,OAAA,GAAA9B,EAAA,KAEzB,CAAEmD,MAAO,OA2BXD,EAAAA,EAAAA,IAAcjD,GAAIJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAqD,IAAA,IAAA9C,EAAA,OAAAR,EAAAA,EAAAA,KAAAU,MAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,QACZL,GAAOS,EAAAA,EAAAA,mBAAkBd,IACtBgD,UAAYhD,EAAKqD,kBACxBnB,EAAK7B,GACN,wBAAA+C,EAAAvB,OAAA,GAAAsB,EAAA,OAIHF,EAAAA,EAAAA,IACEjD,GAAIJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACJ,SAAAwD,IAAA,OAAAzD,EAAAA,EAAAA,KAAAU,MAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,OAEEwB,GADapB,EAAAA,EAAAA,mBAAkBd,IACrB,wBAAAuD,EAAA1B,OAAA,GAAAyB,EAAA,KAEZ,CAAEJ,MAAO,KAEb,C","sources":["../../../plugins/alignments/src/shared/fetchChains.ts","../../../plugins/alignments/src/shared/afterAttach.tsx"],"sourcesContent":["import {\n  getContainingTrack,\n  getContainingView,\n  getSession,\n} from '@jbrowse/core/util'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { LinearReadArcsDisplayModel } from '../LinearReadArcsDisplay/model'\nimport { LinearReadCloudDisplayModel } from '../LinearReadCloudDisplay/model'\n\ntype LGV = LinearGenomeViewModel\n\nexport interface ReducedFeature {\n  name: string\n  strand: number\n  refName: string\n  start: number\n  end: number\n  id: string\n  flags: number\n  tlen: number\n  pair_orientation: string\n  next_ref?: string\n  next_pos?: number\n  clipPos: number\n  SA?: string\n}\n\nexport interface ChainStats {\n  max: number\n  min: number\n  upper: number\n  lower: number\n}\n\nexport interface ChainData {\n  chains: ReducedFeature[][]\n  stats?: ChainStats\n}\n\nexport async function fetchChains(\n  self: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel,\n) {\n  const { rpcSessionId: sessionId } = getContainingTrack(self)\n  const { rpcManager } = getSession(self)\n  const view = getContainingView(self) as LGV\n\n  if (!view.initialized || self.error || self.regionTooLarge) {\n    return\n  }\n\n  self.setLoading(true)\n  const ret = (await rpcManager.call(sessionId, 'PileupGetReducedFeatures', {\n    sessionId,\n    regions: view.staticBlocks.contentBlocks,\n    filterBy: getSnapshot(self.filterBy),\n    adapterConfig: self.adapterConfig,\n  })) as ChainData\n\n  self.setChainData(ret)\n  self.setLoading(false)\n}\n","import { getContainingView } from '@jbrowse/core/util'\nimport { createAutorun } from '../util'\nimport { fetchChains } from './fetchChains'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\ntype LGV = LinearGenomeViewModel\n\nexport function doAfterAttach<T extends IAnyStateTreeNode>(\n  self: T,\n  cb: (\n    self: T,\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n  ) => void,\n) {\n  createAutorun(\n    self,\n    async () => {\n      await fetchChains(self)\n    },\n    { delay: 1000 },\n  )\n\n  function draw(view: LGV) {\n    const canvas = self.ref\n    if (!canvas) {\n      return\n    }\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) {\n      return\n    }\n\n    if (!self.chainData) {\n      return\n    }\n\n    ctx.clearRect(0, 0, canvas.width, self.height * 2)\n    ctx.resetTransform()\n    ctx.scale(2, 2)\n    cb(self, ctx, canvas.width, self.height)\n    self.setLastDrawnOffsetPx(view.offsetPx)\n    self.setLastDrawnBpPerPx(view.bpPerPx)\n  }\n\n  // first autorun instantly draws if bpPerPx changes\n  createAutorun(self, async () => {\n    const view = getContainingView(self) as LGV\n    if (view.bpPerPx !== self.lastDrawnBpPerPx) {\n      draw(view)\n    }\n  })\n\n  // second autorun draws after delay 1000 e.g. if offsetPx changes\n  createAutorun(\n    self,\n    async () => {\n      const view = getContainingView(self) as LGV\n      draw(view)\n    },\n    { delay: 1000 },\n  )\n}\n"],"names":["fetchChains","_x","_fetchChains","_asyncToGenerator","_regeneratorRuntime","mark","_callee","self","_getContainingTrack","sessionId","_getSession","rpcManager","view","ret","wrap","_context","prev","next","getContainingTrack","rpcSessionId","getSession","getContainingView","initialized","error","regionTooLarge","abrupt","setLoading","call","regions","staticBlocks","contentBlocks","filterBy","getSnapshot","adapterConfig","sent","setChainData","stop","apply","arguments","doAfterAttach","cb","draw","canvas","ref","ctx","getContext","chainData","clearRect","width","height","resetTransform","scale","setLastDrawnOffsetPx","offsetPx","setLastDrawnBpPerPx","bpPerPx","createAutorun","delay","_callee2","_context2","lastDrawnBpPerPx","_callee3","_context3"],"sourceRoot":""}