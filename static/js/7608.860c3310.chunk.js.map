{"version":3,"file":"static/js/7608.860c3310.chunk.js","mappings":"iPAIe,soDAoMNA,MAAM,SC/LRC,eAAeC,EAAaC,GACjC,IACE,MAAMC,QAAoBC,EAAAA,EAAAA,cAAaF,GAAaG,SAAS,SACvD,QAAEC,SAAkB,gCAC1B,OAAO,IAAIA,EAAQH,EACrB,CAAE,MAAOI,GACP,MAAM,IAAIC,MAAM,yCAADC,OAA0CF,EAAK,KAChE,CACF,CAEOP,eAAeU,EAAiBC,GACrC,MAAMC,QAAwBR,EAAAA,EAAAA,cAAaO,GAAYN,SAAS,SAC1D,YAAEQ,SAAsB,gCAC9B,OAAO,IAAIA,EAAYD,EACzB,CAEOZ,eAAec,EAAiBC,GACrC,MAAMC,QAAaZ,EAAAA,EAAAA,cAAaW,GAAYV,SAAS,SAC/C,YAAEY,SAAsB,gCAC9B,OAAO,IAAIA,EAAYD,EACzB,CAEO,SAASE,EAAQC,EAAeC,GACrC,MAAO,CACLC,IAAK,IAAIC,IAAIH,EAAOC,EAAKC,KAAKE,KAC9BC,aAAc,cAElB,CAEO,SAASC,EAAWN,EAAeO,EAAaN,GACrD,OAAeF,EAARC,GAAuCO,EAAhBN,EAChC,CAEO,SAASO,EAASR,EAAeO,GACtC,OAAOP,EACH,CACEE,IAAKF,EACLK,aAAc,aAEhB,CACEH,IAAKK,EACLF,aAAc,cAEtB,CAEO,SAASI,EACdC,EACAd,EACAe,EACAC,GAEA,MAAMC,EAAc,GAEpB,IAAK,MAAOC,EAAWC,KAAUL,EAAQM,UAAW,CAClD,MAAMC,EAAY,IAAIF,EAAMG,QACtBC,EAAkB,IAAIC,IAAI,CAC9B,aACA,iBACA,YACA,SAEF,GAAIH,EAAUI,MAAKC,GAAOH,EAAgBI,IAAID,KAC5C,SAEF,MAAME,EAAe,GACrB,IAAIC,EAAmBX,EACvB,EAAG,CAAC,IAADY,EACDD,GAAgD,QAA7BC,EAAAhB,EAAQiB,IAAIF,UAAiB,IAAAC,OAAA,EAA7BA,EAA+BC,IAAI,YAAa,GAC/DF,KACAA,GAAoBA,EAAiB7C,MAAM,KAC7C4C,EAAaI,KAAKlB,EAAQiB,IAAIF,IAElC,OAASA,GACTD,EAAaK,UACb,MAGMC,EAAMC,EACVhB,EAJiBS,EAChBQ,KAAIC,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGN,IAAI,gBAChBO,QAAQC,KAAqBA,IAI9BvC,EACAc,EACAE,GAEFC,EAAOe,KAAK,IACPE,EACHM,QAAQ,iBAAD9C,QAAmB+C,EAAAA,EAAAA,YAAWP,IACrCQ,cAAe,CAAC3B,IAEpB,CAEA,OAAOE,CACT,CAEA,SAASkB,EACPhB,EACAwB,EACA3C,EACAc,EACAE,GACC,IAAD4B,EACA,IAAIC,EAAY1B,EAAMY,IAAI,QAC1B,MAAMe,EAAO3B,EAAMY,IAAI,eAAiB,GAClCgB,EAAa5B,EAAMY,IAAI,eAAiB,GACxCiB,EAAa7B,EAAMY,IAAI,iBAAmB,GAC1CkB,GAAQC,EAAAA,EAAAA,eAAclD,GACX,IAADmD,EAAXN,IACHA,EAAkD,QAAzCM,EAAGrC,EAAQiB,IAAIZ,EAAMY,IAAI,WAAa,WAAG,IAAAoB,OAAA,EAAtCA,EAAwCpB,IAAI,SAE1D,IAAIqB,GAAyB,QAATR,EAAAC,SAAS,IAAAD,OAAA,EAATA,EAAW5D,MAAM,KAAK,KAAM,GAC1B,QAAlBoE,GAA2BL,EAAWM,cAAcC,SAAS,UAC/DF,EAAgB,QAElB,MAAMG,EAAkBN,EACpB9C,EAAQ4C,EAAY/C,GACpBY,EAASmC,GAEb,OAAQK,GACN,IAAK,MACH,MAAO,CACLI,KAAM,kBACNV,KAAM3B,EAAMY,IAAI,cAChB0B,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,aACNI,YAAaL,EACbM,MAAO,CACLC,SAAUb,EACNvC,EAAWsC,EAAYD,EAAa,OAAQ/C,GAC5CY,EAASoC,EAAYD,EAAa,WAK9C,IAAK,cAoCL,IAAK,WAcL,IAAK,cAcL,IAAK,SAcL,IAAK,SACH,MAAO,CACLS,KAAM,eACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,gBACNO,eAAgBR,GAElBS,SAAU,CACRR,KAAM,uBA3EZ,IAAK,SAWL,IAAK,cA+FL,IAAK,gBACH,MAAO,CACLA,KAAM,eACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,gBACNO,eAAgBR,IApCtB,IAAK,SACH,MAAO,CACLC,KAAM,oBACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,gBACNS,eAAgBV,IAItB,IAAK,OACH,MAAO,CACLC,KAAM,kBACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,cACNU,aAAcX,EACdY,aAAclB,EACVvC,EAAWsC,EAAYD,EAAa,QAAS/C,GAC7CY,EAASoC,EAAYD,EAAa,SACtC/B,oBAeN,IAAK,iBACH,OAAOoD,EAAAA,EAAAA,8BAA6BtB,EAAMM,EAAeT,GAC3D,IAAK,WACH,MAAO,CACLa,KAAM,eACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,kBACNa,cAAed,EACfM,MAAO,CACLC,SAAUb,EACNvC,EAAWsC,EAAYD,EAAa,OAAQ/C,GAC5CY,EAASoC,EAAYD,EAAa,WAK9C,IAAK,MACH,MAAO,CACLS,KAAM,WACNV,OACAW,YAAatC,EAAMY,IAAI,aACvB2B,SAAUf,EACVgB,QAAS,CACPH,KAAM,aACNc,YAAaf,IAiBnB,QACE,OAAOgB,EAAAA,EAAAA,0BAAyBzB,EAAMM,EAAeT,GAE3D,C","sources":["../../../plugins/data-management/src/ucsc-trackhub/ucscAssemblies.ts","../../../plugins/data-management/src/ucsc-trackhub/ucscTrackHub.ts"],"sourcesContent":["// These are the assemblies for which there is a sequence file located at\n// http://hgdownload.soe.ucsc.edu/goldenPath/${assemblyName}/bigZips/${assemblyName}.2bit\n// This list was generated by `getUcscAssemblies.js`\n\nexport default `ailMel1\nallMis1\nanoCar1\nanoCar2\nanoGam1\nanoGam3\napiMel1\napiMel2\naplCal1\naptMan1\naquChr2\nbalAcu1\nbisBis1\nbosTau2\nbosTau3\nbosTau4\nbosTau6\nbosTau7\nbosTau8\nbraFlo1\ncaeJap1\ncaePb1\ncaePb2\ncaeRem2\ncaeRem3\ncalJac1\ncalJac3\ncalMil1\ncanFam1\ncanFam3\ncavPor3\ncb3\nce10\nce11\nce2\nce4\nce6\ncerSim1\nchlSab2\nchoHof1\nchrPic1\nci1\nci2\nci3\ncriGri1\ncriGriChoV1\ndanRer10\ndanRer11\ndanRer3\ndanRer4\ndanRer5\ndanRer6\ndanRer7\ndasNov3\ndipOrd1\ndm1\ndm2\ndm3\ndm6\ndp2\ndp3\ndroAna1\ndroAna2\ndroEre1\ndroGri1\ndroMoj1\ndroMoj2\ndroPer1\ndroSec1\ndroSim1\ndroVir1\ndroVir2\ndroYak1\ndroYak2\neboVir3\nechTel1\nechTel2\nequCab1\nequCab2\neriEur1\neriEur2\nfelCat3\nfelCat4\nfelCat5\nfelCat8\nfr1\nfr2\nfr3\ngadMor1\ngalGal2\ngalGal3\ngalGal4\ngalGal5\ngalGal6\ngalVar1\ngasAcu1\ngeoFor1\ngorGor3\ngorGor4\ngorGor5\nhetGla1\nhetGla2\nhg16\nhg18\nhg19\nhg38\nlatCha1\nloxAfr3\nmacEug2\nmacFas5\nmanPen1\nmelGal1\nmelGal5\nmelUnd1\nmicMur1\nmicMur2\nmm10\nmm7\nmm8\nmm9\nmonDom2\nmonDom4\nmonDom5\nmusFur1\nmyoLuc2\nnanPar1\nnasLar1\nnomLeu1\nnomLeu2\nnomLeu3\nochPri2\nochPri3\noreNil2\nornAna1\nornAna2\noryCun2\noryLat2\notoGar3\noviAri1\noviAri3\noviAri4\npanPan1\npanPan2\npanTro1\npanTro2\npanTro3\npanTro4\npanTro5\npanTro6\npapAnu2\npapHam1\npetMar1\npetMar2\nponAbe2\nponAbe3\npriPac1\nproCap1\npteVam1\nrheMac2\nrheMac3\nrheMac8\nrhiRox1\nrn4\nrn5\nrn6\nsacCer1\nsacCer2\nsacCer3\nsaiBol1\nsarHar1\nsorAra1\nsorAra2\nspeTri2\nstrPur1\nstrPur2\nsusScr11\nsusScr2\nsusScr3\ntaeGut1\ntaeGut2\ntarSyr1\ntarSyr2\ntetNig1\ntetNig2\nthaSir1\ntriMan1\ntupBel1\nturTru2\nventer1\nvicPac1\nvicPac2\nxenLae2\nxenTro1\nxenTro2\nxenTro3\nxenTro7\nxenTro9`.split(/\\r?\\n/)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { RaStanza, TrackDbFile } from '@gmod/ucsc-hub'\nimport { FileLocation, isUriLocation, objectHash } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  generateUnsupportedTrackConf,\n  generateUnknownTrackConf,\n} from '@jbrowse/core/util/tracks'\n\nexport async function fetchHubFile(hubLocation: FileLocation) {\n  try {\n    const hubFileText = await openLocation(hubLocation).readFile('utf8')\n    const { HubFile } = await import('@gmod/ucsc-hub')\n    return new HubFile(hubFileText)\n  } catch (error) {\n    throw new Error(`Not a valid hub.txt file, got error: '${error}'`)\n  }\n}\n\nexport async function fetchGenomesFile(genomesLoc: FileLocation) {\n  const genomesFileText = await openLocation(genomesLoc).readFile('utf8')\n  const { GenomesFile } = await import('@gmod/ucsc-hub')\n  return new GenomesFile(genomesFileText)\n}\n\nexport async function fetchTrackDbFile(trackDbLoc: FileLocation) {\n  const text = await openLocation(trackDbLoc).readFile('utf8')\n  const { TrackDbFile } = await import('@gmod/ucsc-hub')\n  return new TrackDbFile(text)\n}\n\nexport function makeLoc(first: string, base: { uri: string }) {\n  return {\n    uri: new URL(first, base.uri).href,\n    locationType: 'UriLocation',\n  }\n}\n\nexport function makeLocAlt(first: string, alt: string, base: { uri: string }) {\n  return first ? makeLoc(first, base) : makeLoc(alt, base)\n}\n\nexport function makeLoc2(first: string, alt?: string) {\n  return first\n    ? {\n        uri: first,\n        locationType: 'LocalPath',\n      }\n    : {\n        uri: alt,\n        locationType: 'UriLocation',\n      }\n}\n\nexport function generateTracks(\n  trackDb: TrackDbFile,\n  trackDbLoc: FileLocation,\n  assemblyName: string,\n  sequenceAdapter: any,\n) {\n  const tracks: any = []\n\n  for (const [trackName, track] of trackDb.entries()) {\n    const trackKeys = [...track.keys()]\n    const parentTrackKeys = new Set([\n      'superTrack',\n      'compositeTrack',\n      'container',\n      'view',\n    ])\n    if (trackKeys.some(key => parentTrackKeys.has(key))) {\n      continue\n    }\n    const parentTracks = []\n    let currentTrackName = trackName\n    do {\n      currentTrackName = trackDb.get(currentTrackName)?.get('parent') || ''\n      if (currentTrackName) {\n        ;[currentTrackName] = currentTrackName.split(' ')\n        parentTracks.push(trackDb.get(currentTrackName))\n      }\n    } while (currentTrackName)\n    parentTracks.reverse()\n    const categories = parentTracks\n      .map(p => p?.get('shortLabel'))\n      .filter((f): f is string => !!f)\n    const res = makeTrackConfig(\n      track,\n      categories,\n      trackDbLoc,\n      trackDb,\n      sequenceAdapter,\n    )\n    tracks.push({\n      ...res,\n      trackId: `ucsc-trackhub-${objectHash(res)}`,\n      assemblyNames: [assemblyName],\n    })\n  }\n\n  return tracks\n}\n\nfunction makeTrackConfig(\n  track: RaStanza,\n  categories: string[],\n  trackDbLoc: FileLocation,\n  trackDb: TrackDbFile,\n  sequenceAdapter: any,\n) {\n  let trackType = track.get('type')\n  const name = track.get('shortLabel') || ''\n  const bigDataUrl = track.get('bigDataUrl') || ''\n  const bigDataIdx = track.get('bigDataIndex') || ''\n  const isUri = isUriLocation(trackDbLoc)\n  if (!trackType) {\n    trackType = trackDb.get(track.get('parent') || '')?.get('type')\n  }\n  let baseTrackType = trackType?.split(' ')[0] || ''\n  if (baseTrackType === 'bam' && bigDataUrl.toLowerCase().endsWith('cram')) {\n    baseTrackType = 'cram'\n  }\n  const bigDataLocation = isUri\n    ? makeLoc(bigDataUrl, trackDbLoc)\n    : makeLoc2(bigDataUrl)\n\n  switch (baseTrackType) {\n    case 'bam':\n      return {\n        type: 'AlignmentsTrack',\n        name: track.get('shortLabel'),\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BamAdapter',\n          bamLocation: bigDataLocation,\n          index: {\n            location: isUri\n              ? makeLocAlt(bigDataIdx, bigDataUrl + '.bai', trackDbLoc)\n              : makeLoc2(bigDataIdx, bigDataUrl + '.bai'),\n          },\n        },\n      }\n\n    case 'bigBarChart':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n        renderer: {\n          type: 'SvgFeatureRenderer',\n        },\n      }\n    case 'bigBed':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n      }\n    case 'bigGenePred':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n      }\n    case 'bigChain':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n        renderer: {\n          type: 'SvgFeatureRenderer',\n        },\n      }\n    case 'bigInteract':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n        renderer: {\n          type: 'SvgFeatureRenderer',\n        },\n      }\n    case 'bigMaf':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n        renderer: {\n          type: 'SvgFeatureRenderer',\n        },\n      }\n    case 'bigPsl':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n        renderer: {\n          type: 'SvgFeatureRenderer',\n        },\n      }\n    case 'bigWig':\n      return {\n        type: 'QuantitativeTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigWigAdapter',\n          bigWigLocation: bigDataLocation,\n        },\n      }\n\n    case 'cram':\n      return {\n        type: 'AlignmentsTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'CramAdapter',\n          cramLocation: bigDataLocation,\n          craiLocation: isUri\n            ? makeLocAlt(bigDataIdx, bigDataUrl + '.crai', trackDbLoc)\n            : makeLoc2(bigDataIdx, bigDataUrl + '.crai'),\n          sequenceAdapter,\n        },\n      }\n\n    case 'bigNarrowPeak':\n      return {\n        type: 'FeatureTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'BigBedAdapter',\n          bigBedLocation: bigDataLocation,\n        },\n      }\n    case 'peptideMapping':\n      return generateUnsupportedTrackConf(name, baseTrackType, categories)\n    case 'vcfTabix':\n      return {\n        type: 'VariantTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'VcfTabixAdapter',\n          vcfGzLocation: bigDataLocation,\n          index: {\n            location: isUri\n              ? makeLocAlt(bigDataIdx, bigDataUrl + '.tbi', trackDbLoc)\n              : makeLoc2(bigDataIdx, bigDataUrl + '.tbi'),\n          },\n        },\n      }\n\n    case 'hic':\n      return {\n        type: 'HicTrack',\n        name,\n        description: track.get('longLabel'),\n        category: categories,\n        adapter: {\n          type: 'HicAdapter',\n          hicLocation: bigDataLocation,\n        },\n      }\n\n    // unsupported types\n    //     case 'gvf':\n    //     case 'ld2':\n    //     case 'narrowPeak':\n    //     case 'wig':\n    //     case 'wigMaf':\n    //     case 'halSnake':\n    //     case 'bed':\n    //     case 'bed5FloatScore':\n    //     case 'bedGraph':\n    //     case 'bedRnaElements':\n    //     case 'broadPeak':\n    //     case 'coloredExon':\n    default:\n      return generateUnknownTrackConf(name, baseTrackType, categories)\n  }\n}\n\nexport { default as ucscAssemblies } from './ucscAssemblies'\n"],"names":["split","async","fetchHubFile","hubLocation","hubFileText","openLocation","readFile","HubFile","error","Error","concat","fetchGenomesFile","genomesLoc","genomesFileText","GenomesFile","fetchTrackDbFile","trackDbLoc","text","TrackDbFile","makeLoc","first","base","uri","URL","href","locationType","makeLocAlt","alt","makeLoc2","generateTracks","trackDb","assemblyName","sequenceAdapter","tracks","trackName","track","entries","trackKeys","keys","parentTrackKeys","Set","some","key","has","parentTracks","currentTrackName","_trackDb$get","get","push","reverse","res","makeTrackConfig","map","p","filter","f","trackId","objectHash","assemblyNames","categories","_trackType","trackType","name","bigDataUrl","bigDataIdx","isUri","isUriLocation","_trackDb$get2","baseTrackType","toLowerCase","endsWith","bigDataLocation","type","description","category","adapter","bamLocation","index","location","bigBedLocation","renderer","bigWigLocation","cramLocation","craiLocation","generateUnsupportedTrackConf","vcfGzLocation","hicLocation","generateUnknownTrackConf"],"sourceRoot":""}