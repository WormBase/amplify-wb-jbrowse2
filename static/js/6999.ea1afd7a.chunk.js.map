{"version":3,"file":"static/js/6999.ea1afd7a.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/util.ts","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/SequenceDisplay.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDNASequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/ProteinSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/GenomicSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDSSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequencePanel.tsx"],"sourcesContent":["// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nexport const intronColor = undefined\nexport const utrColor = 'rgb(200,240,240)'\nexport const proteinColor = 'rgb(220,160,220)'\nexport const cdsColor = 'rgb(220,220,180)'\nexport const updownstreamColor = 'rgba(250,200,200)'\nexport const genomeColor = 'rgb(200,280,200)'\n\nexport function splitString({\n  str,\n  width,\n  showCoordinates,\n  currRemainder = 0,\n  splitSize = 10,\n}: {\n  str: string\n  width: number\n  showCoordinates: boolean\n  currRemainder?: number\n  splitStart?: number\n  splitSize?: number\n}) {\n  const numChunks = Math.ceil(str.length / width)\n  const chunks = new Array(numChunks)\n  let splitStart = currRemainder % 10\n\n  let iter = 0\n  let offset = 0\n  for (; iter < numChunks + 1; ++iter) {\n    const inc = iter === 0 ? width - currRemainder : width\n    const r = str.slice(offset, offset + inc)\n    if (!r) {\n      break\n    }\n    if (showCoordinates) {\n      let res = ''\n      for (let i = 0, j = splitStart; i < r.length; i++, j++) {\n        // note: this adds a space at the start but it causes trouble to try to\n        // say e.g. j%splitSize==0 && j to try to only add non-zero spaces\n        if (j % splitSize === 0) {\n          res += ' '\n          j = 0\n        }\n        res += r[i]\n      }\n      if (res) {\n        chunks[iter] = res\n      }\n    } else {\n      chunks[iter] = r\n    }\n    splitStart = 0 // after newline, reset\n    offset += inc\n  }\n\n  return {\n    segments: chunks,\n    remainder:\n      ((chunks.at(-1)?.replaceAll(' ', '').length || 0) +\n        (iter < 2 ? currRemainder : 0)) %\n      width,\n  }\n}\n","import React from 'react'\nimport { SequenceFeatureDetailsModel } from '../model'\nimport { observer } from 'mobx-react'\n\nconst SequenceDisplay = observer(function ({\n  chunks,\n  start,\n  color,\n  coordStart = start,\n  coordMultiplier = 1,\n  model,\n}: {\n  chunks: string[]\n  start: number\n  coordStart?: number\n  coordMultiplier?: number\n  color?: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { width, showCoordinates } = model\n  return chunks.map((chunk, idx) => {\n    const f = coordStart - (start % 100)\n    const prefix =\n      (idx == 0 && start % width == 0) || idx > 0\n        ? `${f + idx * width * coordMultiplier}`.padStart(4) + '   '\n        : ''\n    const postfix =\n      idx === chunks.length - 1 &&\n      (chunks.at(-1)?.replaceAll(' ', '').length || 0) +\n        (idx === 0 ? start % 100 : 0) !==\n        width\n        ? null\n        : showCoordinates\n          ? ' \\n'\n          : ''\n    return (\n      <React.Fragment key={`${chunk}-${idx}`}>\n        {showCoordinates ? prefix : null}\n        <span style={{ background: color }}>{chunk}</span>\n        {postfix}\n      </React.Fragment>\n    )\n  })\n})\n\nexport default SequenceDisplay\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { Feat } from '../../util'\nimport { splitString, cdsColor, updownstreamColor, utrColor } from '../util'\nimport { SequenceFeatureDetailsModel } from '../model'\nimport SequenceDisplay from './SequenceDisplay'\n\nconst CDNASequence = observer(function ({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  includeIntrons,\n  collapseIntron,\n  model,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  model: SequenceFeatureDetailsModel\n}) {\n  const { upperCaseCDS, intronBp, width, showCoordinates } = model\n  const hasCds = cds.length > 0\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  const toLower = (s: string) => (upperCaseCDS ? s.toLowerCase() : s)\n  const toUpper = (s: string) => (upperCaseCDS ? s.toUpperCase() : s)\n\n  let coordStart = 0\n  let currStart = 0\n  let currRemainder = 0\n\n  let upstreamChunk = null as React.ReactNode\n  if (upstream) {\n    const { segments, remainder } = splitString({\n      str: toLower(upstream),\n      width,\n      showCoordinates,\n    })\n    currRemainder = remainder\n    upstreamChunk = (\n      <SequenceDisplay\n        model={model}\n        color={updownstreamColor}\n        start={currStart}\n        coordStart={coordStart}\n        chunks={segments}\n      />\n    )\n    currStart += upstream.length\n    coordStart += upstream.length\n  }\n\n  const middleChunks = [] as React.ReactNode[]\n  for (let idx = 0; idx < chunks.length; idx++) {\n    const chunk = chunks[idx]\n    const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n    const s = sequence.slice(chunk.start, chunk.end)\n    const { segments, remainder } = splitString({\n      str: hasCds\n        ? chunk.type === 'CDS'\n          ? toUpper(s)\n          : toLower(s)\n        : toUpper(s),\n      width,\n      currRemainder,\n      showCoordinates,\n    })\n    currRemainder = remainder\n\n    middleChunks.push(\n      <SequenceDisplay\n        key={JSON.stringify(chunk) + '-mid'}\n        model={model}\n        color={chunk.type === 'CDS' ? cdsColor : utrColor}\n        start={currStart}\n        coordStart={coordStart}\n        chunks={segments}\n      />,\n    )\n    currStart += s.length\n    coordStart += s.length\n\n    if (intron && includeIntrons && idx < chunks.length - 1) {\n      const str = toLower(\n        collapseIntron && intron.length > intronBp * 2\n          ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n          : intron,\n      )\n      const { segments, remainder } = splitString({\n        str,\n        width,\n        currRemainder,\n        showCoordinates,\n      })\n\n      if (segments.length) {\n        currRemainder = remainder\n        middleChunks.push(\n          <SequenceDisplay\n            key={JSON.stringify(chunk) + '-intron'}\n            model={model}\n            coordStart={coordStart}\n            start={currStart}\n            chunks={segments}\n          />,\n        )\n        currStart += str.length\n        coordStart += str.length\n      }\n    }\n  }\n\n  let downstreamChunk = null as React.ReactNode\n  if (downstream) {\n    const { segments, remainder } = splitString({\n      str: toLower(downstream),\n      width,\n      currRemainder,\n      showCoordinates,\n    })\n    downstreamChunk = (\n      <SequenceDisplay\n        start={currStart}\n        model={model}\n        chunks={segments}\n        coordStart={coordStart}\n        color={updownstreamColor}\n      />\n    )\n    currRemainder = remainder\n    currStart += downstream.length\n    coordStart += downstream.length\n  }\n  return (\n    <>\n      {upstreamChunk}\n      {middleChunks}\n      {downstreamChunk}\n    </>\n  )\n})\n\nexport default CDNASequence\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { Feat, stitch } from '../../util'\nimport { proteinColor, splitString } from '../util'\nimport { SequenceFeatureDetailsModel } from '../model'\nimport SequenceDisplay from './SequenceDisplay'\n\nconst ProteinSequence = observer(function ({\n  cds,\n  sequence,\n  codonTable,\n  model,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: Record<string, string>\n  model: SequenceFeatureDetailsModel\n}) {\n  const { width, showCoordinates } = model\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n  const { segments } = splitString({\n    str: protein,\n    width,\n    showCoordinates,\n  })\n  return (\n    <SequenceDisplay\n      model={model}\n      color={proteinColor}\n      chunks={segments}\n      start={0}\n    />\n  )\n})\n\nexport default ProteinSequence\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { genomeColor, splitString, updownstreamColor } from '../util'\nimport { SequenceFeatureDetailsModel } from '../model'\nimport SequenceDisplay from './SequenceDisplay'\n\nconst GenomicSequence = observer(function ({\n  sequence,\n  upstream,\n  downstream,\n  model,\n}: {\n  sequence: string\n  upstream?: string\n  downstream?: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { width, showCoordinates } = model\n  let currStart = 0\n  let upstreamChunk = null as React.ReactNode\n  let currRemainder = 0\n\n  if (upstream) {\n    const { segments, remainder } = splitString({\n      str: upstream,\n      width,\n      showCoordinates,\n    })\n    currRemainder = remainder\n    upstreamChunk = (\n      <SequenceDisplay\n        model={model}\n        color={updownstreamColor}\n        start={currStart}\n        chunks={segments}\n      />\n    )\n    currStart += upstream.length\n  }\n\n  const { segments, remainder } = splitString({\n    str: sequence,\n    width,\n    showCoordinates,\n    currRemainder,\n  })\n  currRemainder = remainder\n  const middleChunk = (\n    <SequenceDisplay\n      model={model}\n      color={genomeColor}\n      start={currStart}\n      chunks={segments}\n    />\n  )\n  currStart += sequence.length\n\n  let downstreamChunk = null as React.ReactNode\n  if (downstream) {\n    const { segments, remainder } = splitString({\n      str: downstream,\n      width,\n      currRemainder,\n      showCoordinates,\n    })\n    downstreamChunk = (\n      <SequenceDisplay\n        start={currStart}\n        model={model}\n        chunks={segments}\n        color={updownstreamColor}\n      />\n    )\n    currRemainder = remainder\n    currStart += downstream.length\n  }\n\n  return (\n    <>\n      {upstreamChunk}\n      {middleChunk}\n      {downstreamChunk}\n    </>\n  )\n})\n\nexport default GenomicSequence\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { cdsColor, splitString } from '../util'\nimport { Feat, stitch } from '../../util'\nimport { SequenceFeatureDetailsModel } from '../model'\nimport SequenceDisplay from './SequenceDisplay'\n\nconst CDSSequence = observer(function ({\n  cds,\n  sequence,\n  model,\n}: {\n  cds: Feat[]\n  sequence: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { width, showCoordinates } = model\n  const { segments } = splitString({\n    str: stitch(cds, sequence),\n    width,\n    showCoordinates,\n  })\n  return (\n    <SequenceDisplay\n      model={model}\n      color={cdsColor}\n      chunks={segments}\n      start={0}\n    />\n  )\n})\n\nexport default CDSSequence\n","import React from 'react'\n\nimport {\n  SimpleFeatureSerialized,\n  defaultCodonTable,\n  generateCodonTable,\n  revcom,\n} from '../../util'\nimport {\n  SeqState,\n  calculateUTRs,\n  calculateUTRs2,\n  dedupe,\n  revlist,\n} from '../util'\nimport CDNASequence from './seqtypes/CDNASequence'\nimport ProteinSequence from './seqtypes/ProteinSequence'\nimport GenomicSequence from './seqtypes/GenomicSequence'\nimport CDSSequence from './seqtypes/CDSSequence'\nimport { SequenceFeatureDetailsModel } from './model'\nimport { observer } from 'mobx-react'\n\ninterface SequencePanelProps {\n  sequence: SeqState\n  feature: SimpleFeatureSerialized\n  mode: string\n  model: SequenceFeatureDetailsModel\n}\n\nfunction getStrand(strand: number) {\n  if (strand === -1) {\n    return '-'\n  } else if (strand === 1) {\n    return '+'\n  } else {\n    return '.'\n  }\n}\n\nfunction WordWrap({ children }: { children: React.ReactNode }) {\n  return (\n    <pre\n      style={{\n        /* raw styles instead of className so that html copy works */\n        fontFamily: 'monospace',\n        color: 'black',\n        fontSize: 11,\n      }}\n    >\n      {children}\n    </pre>\n  )\n}\n\nfunction NoWordWrap({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      style={{\n        /* raw styles instead of className so that html copy works */\n        fontFamily: 'monospace',\n        color: 'black',\n        fontSize: 11,\n        maxWidth: 600,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-all',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst SequencePanel = observer(\n  React.forwardRef<HTMLDivElement, SequencePanelProps>(\n    function SequencePanel2(props, ref) {\n      const { model, feature, mode } = props\n      const { showCoordinates } = model\n      let {\n        sequence: { seq, upstream = '', downstream = '' },\n      } = props\n      const { subfeatures = [] } = feature\n\n      const children = subfeatures\n        .sort((a, b) => a.start - b.start)\n        .map(sub => ({\n          ...sub,\n          start: sub.start - feature.start,\n          end: sub.end - feature.start,\n        }))\n\n      // we filter duplicate entries in cds and exon lists duplicate entries may be\n      // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n      // probably worth ignoring here (produces broken protein translations if\n      // included)\n      //\n      // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n      // transcript ENST00000445597.6\n      //\n      // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n      let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n      let utr = dedupe(children.filter(sub => sub.type?.match(/utr/i)))\n      let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n      if (!utr.length && cds.length && exons.length) {\n        utr = calculateUTRs(cds, exons)\n      }\n      if (!utr.length && cds.length && !exons.length) {\n        utr = calculateUTRs2(cds, {\n          start: 0,\n          end: feature.end - feature.start,\n          type: 'gene',\n        })\n      }\n\n      if (feature.strand === -1) {\n        // doing this in a single assignment is needed because downstream and\n        // upstream are swapped so this avoids a temp variable\n        ;[seq, upstream, downstream] = [\n          revcom(seq),\n          revcom(downstream),\n          revcom(upstream),\n        ]\n        cds = revlist(cds, seq.length)\n        exons = revlist(exons, seq.length)\n        utr = revlist(utr, seq.length)\n      }\n      const codonTable = generateCodonTable(defaultCodonTable)\n\n      const Container = showCoordinates ? WordWrap : NoWordWrap\n      return (\n        <div\n          data-testid=\"sequence_panel\"\n          ref={ref}\n          style={{ maxHeight: 300, overflow: 'auto' }}\n        >\n          <Container>\n            <div style={{ background: 'white' }}>\n              {`>${[\n                (feature.name || feature.id) + '-' + mode,\n                `${feature.refName}:${feature.start + 1}-${feature.end}(${getStrand(feature.strand as number)})`,\n                mode.endsWith('updownstream')\n                  ? `+/- ${model.upDownBp} up/downstream bp`\n                  : '',\n              ]\n                .filter(f => !!f)\n                .join(' ')}\\n`}\n            </div>\n            {mode === 'genomic' ? (\n              <GenomicSequence model={model} sequence={seq} />\n            ) : mode === 'genomic_sequence_updownstream' ? (\n              <GenomicSequence\n                model={model}\n                sequence={seq}\n                upstream={upstream}\n                downstream={downstream}\n              />\n            ) : mode === 'cds' ? (\n              <CDSSequence model={model} cds={cds} sequence={seq} />\n            ) : mode === 'cdna' ? (\n              <CDNASequence\n                model={model}\n                exons={exons}\n                cds={cds}\n                utr={utr}\n                sequence={seq}\n              />\n            ) : mode === 'protein' ? (\n              <ProteinSequence\n                model={model}\n                cds={cds}\n                codonTable={codonTable}\n                sequence={seq}\n              />\n            ) : mode === 'gene' ? (\n              <CDNASequence\n                model={model}\n                exons={exons}\n                cds={cds}\n                utr={utr}\n                sequence={seq}\n                includeIntrons\n              />\n            ) : mode === 'gene_collapsed_intron' ? (\n              <CDNASequence\n                model={model}\n                exons={exons}\n                cds={cds}\n                sequence={seq}\n                utr={utr}\n                includeIntrons\n                collapseIntron\n              />\n            ) : mode === 'gene_updownstream' ? (\n              <CDNASequence\n                model={model}\n                exons={exons}\n                cds={cds}\n                sequence={seq}\n                utr={utr}\n                upstream={upstream}\n                downstream={downstream}\n                includeIntrons\n              />\n            ) : mode === 'gene_updownstream_collapsed_intron' ? (\n              <CDNASequence\n                model={model}\n                exons={exons}\n                cds={cds}\n                sequence={seq}\n                utr={utr}\n                upstream={upstream}\n                downstream={downstream}\n                includeIntrons\n                collapseIntron\n              />\n            ) : (\n              <div>Unknown type</div>\n            )}\n          </Container>\n        </div>\n      )\n    },\n  ),\n)\n\nexport default SequencePanel\n"],"names":["cdsColor","updownstreamColor","splitString","str","width","showCoordinates","currRemainder","splitSize","numChunks","Math","ceil","length","chunks","Array","splitStart","iter","offset","inc","r","slice","res","i","j","segments","remainder","at","replaceAll","observer","start","color","coordStart","coordMultiplier","model","map","chunk","idx","prefix","padStart","postfix","React","key","style","background","utr","cds","exons","sequence","upstream","downstream","includeIntrons","collapseIntron","upperCaseCDS","intronBp","hasCds","sort","a","b","filter","f","end","toLower","s","toLowerCase","toUpper","toUpperCase","currStart","upstreamChunk","SequenceDisplay","middleChunks","intron","type","push","JSON","stringify","downstreamChunk","codonTable","stitch","protein","middleChunk","WordWrap","children","fontFamily","fontSize","NoWordWrap","maxWidth","whiteSpace","wordBreak","props","ref","feature","mode","seq","subfeatures","sub","dedupe","match","calculateUTRs","calculateUTRs2","strand","revcom","revlist","generateCodonTable","defaultCodonTable","Container","maxHeight","overflow","name","id","refName","endsWith","upDownBp","join","GenomicSequence","CDSSequence","CDNASequence","ProteinSequence"],"sourceRoot":""}