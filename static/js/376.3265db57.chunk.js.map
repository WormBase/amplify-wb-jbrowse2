{"version":3,"file":"static/js/376.3265db57.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MashMapAdapter/MashMapAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { parseLineByLine } from '../util'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class MashMapAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const outLoc = openLocation(this.getConf('outLocation'), this.pluginManager)\n    const buffer = (await outLoc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parseMashMapLine)\n  }\n}\n\nfunction parseMashMapLine(line: string) {\n  const fields = line.split(' ')\n  if (fields.length < 9) {\n    // xref https://github.com/marbl/MashMap/issues/38\n    throw new Error('improperly formatted line: ' + line)\n  }\n  const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] = fields\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      mappingQual: +mq,\n    },\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["isGzip","buf","MashMapAdapter","_PAFAdapter","_setupPre","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","outLoc","buffer","wrap","_context","prev","next","openLocation","this","getConf","pluginManager","readFile","sent","unzip","t0","abrupt","parseLineByLine","parseMashMapLine","stop","PAFAdapter","line","fields","split","length","Error","_fields","_slicedToArray","qname","qstart","qend","strand","tname","tstart","tend","extra","mappingQual","getMismatches","MismatchParser","SyntenyFeature","_SimpleFeature","arg","get","_get","_getPrototypeOf","prototype","call","SimpleFeature","getWeightedMeans","ret","_step","scoreMap","_iterator","_createForOfIteratorHelper","s","n","done","entry","quals","len","push","blockLen","err","e","f","_step2","meanScoreMap","Object","fromEntries","entries","map","_ref","_ref2","val","weightedMean","zip","_iterator2","meanScore","_step3","min","max","_iterator3","Math","_step4","_iterator4","b","tuples","_tuples$reduce","reduce","_ref3","_ref4","_ref5","valueSum","weightSum","_ref6","weight","_tuples$reduce2","parsePAFLine","_line$split","_line$split2","_toArray","numMatches","slice","rest","field","r","indexOf","_objectSpread","flipCigar","cigar","arr","i","op","parseCigar","_BaseFeatureDataAdapt","_setup","_hasDataForRefName","_getRefNames","_this","_len","args","Array","_key","concat","setupP","_this2","setupPre","catch","undefined","_x2","_callee2","pm","pafLocation","_context2","_callee3","_context3","assemblyNames","_callee4","_opts$regions","r1","feats","idx","set","feat","_args4","_context4","regions","assemblyName","setup","getAssemblyNames","Set","add","_toConsumableArray","console","warn","query","_this3","ObservableCreate","_x3","_callee5","observer","pafRecords","config","index","qref","start","end","refName","mateName","mateStart","mateEnd","flip","_assemblyName","_extra$numMatches","_extra$blockLen","CIGAR","_context5","readConfObject","complete","doesIntersect2","cg","_objectWithoutProperties","_excluded","join","replaceAll","uniqueId","type","syntenyId","identity","mate","BaseFeatureDataAdapter","capabilities","parseBed","text","Map","filter","startsWith","name","score","_readFile","file","TextDecoder","fatal","t1","t2","decode","a","decoder","cb","blockStart","toString","trim"],"sourceRoot":""}