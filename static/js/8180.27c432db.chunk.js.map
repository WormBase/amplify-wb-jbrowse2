{"version":3,"file":"static/js/8180.27c432db.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/STARFusionImport.ts"],"sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName?: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc?.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {},\n) {\n  const {\n    hasColumnNameLine = false,\n    columnNameLineNumber = 1,\n    isValidRefName = () => false,\n    selectedAssemblyName,\n  } = options\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (hasColumnNameLine && columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(columnNameLineNumber - 1, 1)\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(rowSet, columnNumber, isValidRefName)\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      for (const row of rowSet.rows) {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, isValidRefName)\n      }\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!hasColumnNameLine,\n    columns,\n    assemblyName: selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import { parseTsvBuffer, ParseOptions } from './ImportUtils'\n\nfunction parseSTARFusionBreakpointString(str: string) {\n  const fields = str.split(':')\n  const refName = fields[0]\n  const pos = Number.parseInt(fields[1], 10)\n  const strand = fields[2] === '-' ? -1 : 1\n  return { refName, pos, strand }\n}\n\nconst numericColumns: Record<string, boolean> = {\n  SpanningFragCount: true,\n  FFPM: true,\n  LeftBreakEntropy: true,\n  RightBreakEntropy: true,\n  JunctionReadCount: true,\n}\n\nexport async function parseSTARFusionBuffer(\n  buffer: Buffer,\n  options: ParseOptions,\n) {\n  const data = await parseTsvBuffer(buffer, {\n    hasColumnNameLine: true,\n    columnNameLineNumber: 1,\n    selectedAssemblyName: options.selectedAssemblyName,\n    isValidRefName: () => false,\n  })\n\n  // remove the # in #FusionName\n  data.columns[0].name = data.columns[0].name.replace('#', '')\n  // set some columns to be numeric\n  data.columns.forEach(col => {\n    if (numericColumns[col.name]) {\n      col.dataType = { type: 'Number' }\n    }\n  })\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const column = data.columns[columnNumber]\n      if (column.name === 'LeftBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.refName = refName\n        featureData.start = pos\n        featureData.end = pos\n        featureData.strand = strand\n      } else if (column.name === 'RightBreakpoint' && text) {\n        const { refName, pos, strand } = parseSTARFusionBreakpointString(text)\n        featureData.mate = {\n          refName,\n          start: pos,\n          end: pos,\n          strand,\n        }\n      } else if (text && numericColumns[column.name]) {\n        // some other column, numeric\n        featureData[column.name] = parseFloat(text)\n      } else {\n        // some other column, text\n        featureData[column.name] = text\n      }\n    })\n    featureData.uniqueId = `sf-${rowNumber + 1}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  return data\n}\n"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","async","parseWith","options","arguments","length","undefined","then","module","default","noheader","output","fromString","guessColumnType","rowSet","columnNumber","isValidRefName","_parsedLoc","text","rows","cells","parsedLoc","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","selectedAssemblyName","maxCols","isLoaded","map","row","rowNumber","id","String","columnNames","colNamesRow","splice","forEach","cell","columns","columnDisplayOrder","push","extendedData","name","dataType","type","hasColumnNames","assemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","parseSTARFusionBreakpointString","str","fields","split","pos","Number","parseInt","strand","numericColumns","SpanningFragCount","FFPM","LeftBreakEntropy","RightBreakEntropy","JunctionReadCount","parseSTARFusionBuffer","data","replace","col","featureData","_ref","column","end","mate","parseFloat","uniqueId","concat","feature"],"sourceRoot":""}