{"version":3,"file":"static/js/441.3136e3e8.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts","../../../node_modules/abortable-promise-cache/esm/AbortablePromiseCache.js","../../../node_modules/abortable-promise-cache/esm/AggregateAbortController.js","../../../node_modules/abortable-promise-cache/esm/AggregateStatusReporter.js","../../../node_modules/abortable-promise-cache/esm/abortcontroller-ponyfill.js","../../../node_modules/abortable-promise-cache/esm/index.js"],"sourcesContent":["import Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    if (typeof DOMException !== 'undefined') {\n      // eslint-disable-next-line  no-undef\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    if (dif !== 0) {\n      return dif\n    } else {\n      return c0.minv.dataPosition - c1.minv.dataPosition\n    }\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  })\n\n  return mergedChunks\n}\n","import { Buffer } from 'buffer'\nexport default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  /**\n   * @param {VirtualOffset} minv\n   * @param {VirtualOffset} maxv\n   * @param {number} bin\n   * @param {number} [fetchedSize]\n   */\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport VirtualOffset from './virtualOffset'\nimport Chunk from './chunk'\n\nexport interface Options {\n  // support having some unknown parts of the options\n  [key: string]: unknown\n  signal?: AbortSignal\n}\n\nexport interface IndexData {\n  refNameToId: { [key: string]: number }\n  refIdToName: string[]\n  metaChar: string | null\n  columnNumbers: { ref: number; start: number; end: number }\n  coordinateType: string\n  format: string\n  [key: string]: any\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private parseP?: Promise<IndexData>\n\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<IndexData>\n\n  public async getMetadata(opts: Options = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this.parseP) {\n      this.parseP = this._parse(opts).catch(e => {\n        this.parseP = undefined\n        throw e\n      })\n    }\n    return this.parseP\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    return !!((await this.parse(opts)).indices[seqId] || {}).binIndex\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { longToNumber, optimizeChunks, checkAbortSignal } from './util'\nimport IndexFile, { Options } from './indexFile'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const buf = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buf)\n    checkAbortSignal(opts.signal)\n\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n      // TODO: do we need to support big-endian TBI files?\n    }\n\n    // number of reference sequences in the index\n    const refCount = bytes.readInt32LE(4)\n    const formatFlags = bytes.readInt32LE(8)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: { [key: number]: string } = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(12),\n      start: bytes.readInt32LE(16),\n      end: bytes.readInt32LE(20),\n    }\n    const metaValue = bytes.readInt32LE(24)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(28)\n\n    // read sequence dictionary\n    const nameSectionLength = bytes.readInt32LE(32)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: number]: Chunk[] } = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = bytes.readInt32LE(currOffset)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return { binIndex, linearIndex, stats }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 16, offset + 24) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import Long from 'long'\nimport { Buffer } from 'buffer'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport { longToNumber, optimizeChunks } from './util'\n\nimport IndexFile, { Options } from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return -1\n    }\n    const refId = indexData.refNameToId[refName]\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n  async indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.slice(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Buffer) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: { [key: string]: number } = {}\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          let refName = namesBytes.toString('utf8', currNameStart, i)\n          refName = this.renameRefSeq(refName)\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return { refNameToId, refIdToName }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip((await this.filehandle.readFile(opts)) as Buffer)\n\n    // check TBI magic numbers\n    let csiVersion\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n    const auxLength = bytes.readInt32LE(12)\n    const aux =\n      auxLength && auxLength >= 30\n        ? this.parseAuxData(bytes, 16)\n        : {\n            refIdToName: [],\n            refNameToId: {},\n            metaChar: null,\n            columnNumbers: { ref: 0, start: 1, end: 2 },\n            coordinateType: 'zero-based-half-open',\n            format: 'generic',\n          }\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = bytes.readInt32LE(currOffset)\n      currOffset += 4\n      const binIndex: { [key: string]: Chunk[] } = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(currOffset)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information\n          // about the reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = bytes.readInt32LE(currOffset + 12)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            // this._findFirstData(data, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Buffer, offset: number) {\n    const lineCount = longToNumber(\n      Long.fromBytesLE(\n        bytes.slice(offset + 28, offset + 36) as unknown as number[],\n        true,\n      ),\n    )\n    return { lineCount }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const refId = indexData.refNameToId[refName]\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = this.reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (let c = 0; c < binChunks.length; ++c) {\n            chunks.push(new Chunk(binChunks[c].minv, binChunks[c].maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n}\n","import AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from 'quick-lru'\nimport { Buffer } from 'buffer'\nimport { GenericFilehandle, LocalFile } from 'generic-filehandle'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { checkAbortSignal } from './util'\nimport IndexFile, { Options, IndexData } from './indexFile'\n\nimport Chunk from './chunk'\nimport TBI from './tbi'\nimport CSI from './csi'\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8') : undefined\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\ninterface ReadChunk {\n  buffer: Buffer\n  cpositions: number[]\n  dpositions: number[]\n}\n\nfunction timeout(time: number) {\n  return new Promise(resolve => setTimeout(resolve, time))\n}\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private chunkSizeLimit: number\n  private yieldTime: number\n  private renameRefSeq: (n: string) => string\n  private chunkCache: AbortablePromiseCache<Chunk, ReadChunk>\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path]\n   * @param {filehandle} [args.filehandle]\n   * @param {string} [args.tbiPath]\n   * @param {filehandle} [args.tbiFilehandle]\n   * @param {string} [args.csiPath]\n   * @param {filehandle} [args.csiFilehandle]\n   * @param {number} [args.yieldTime] yield to main thread after N milliseconds if reading features is taking a long time to avoid hanging main thread\n   * @param {function} [args.renameRefSeqs] optional function with sig `string => string` to transform\n   * reference sequence names for the purpose of indexing and querying. note that the data that is returned is\n   * not altered, just the names of the reference sequences that are used for querying.\n   */\n  constructor({\n    path,\n    filehandle,\n    tbiPath,\n    tbiFilehandle,\n    csiPath,\n    csiFilehandle,\n    yieldTime = 500,\n    chunkSizeLimit = 50000000,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    tbiPath?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    yieldTime?: number\n    chunkSizeLimit?: number\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, or csiPath',\n      )\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit\n    this.renameRefSeq = renameRefSeqs\n    this.yieldTime = yieldTime\n    this.chunkCache = new AbortablePromiseCache<Chunk, ReadChunk>({\n      cache: new LRU({ maxSize: Math.floor(chunkCacheSize / (1 << 16)) }),\n      fill: (args: Chunk, signal?: AbortSignal) =>\n        this.readChunk(args, { signal }),\n    })\n  }\n\n  /**\n   * @param refName name of the reference sequence\n   * @param start start of the region (in 0-based half-open coordinates)\n   * @param end end of the region (in 0-based half-open coordinates)\n   * @param opts callback called for each line in the region. can also pass a object param containing obj.lineCallback, obj.signal, etc\n   * @returns promise that is resolved when the whole read is finished, rejected on error\n   */\n  async getLines(\n    refName: string,\n    start: number,\n    end: number,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n    if (typeof opts === 'undefined') {\n      throw new TypeError('line callback must be provided')\n    }\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n    }\n    if (refName === undefined) {\n      throw new TypeError('must provide a reference sequence name')\n    }\n    if (!callback) {\n      throw new TypeError('line callback must be provided')\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = metadata.maxRefLength\n    }\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n\n    // check the chunks for any that are over the size limit.  if\n    // any are, don't fetch any of them\n    for (let i = 0; i < chunks.length; i += 1) {\n      const size = chunks[i].fetchedSize()\n      if (size > this.chunkSizeLimit) {\n        throw new Error(\n          `Too much data. Chunk size ${size.toLocaleString()} bytes exceeds chunkSizeLimit of ${this.chunkSizeLimit.toLocaleString()}.`,\n        )\n      }\n    }\n\n    // now go through each chunk and parse and filter the lines out of it\n    let last = Date.now()\n    for (let chunkNum = 0; chunkNum < chunks.length; chunkNum += 1) {\n      let previousStartCoordinate: number | undefined\n      const c = chunks[chunkNum]\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n      while (blockStart < buffer.length) {\n        const n = buffer.indexOf('\\n', blockStart)\n        if (n === -1) {\n          break\n        }\n        const b = buffer.slice(blockStart, n)\n        const line = decoder?.decode(b) || b.toString()\n\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        // do a small check just to make sure that the lines are really sorted\n        // by start coordinate\n        if (\n          previousStartCoordinate !== undefined &&\n          startCoordinate !== undefined &&\n          previousStartCoordinate > startCoordinate\n        ) {\n          throw new Error(\n            `Lines not sorted by start coordinate (${previousStartCoordinate} > ${startCoordinate}), this file is not usable with Tabix.`,\n          )\n        }\n        previousStartCoordinate = startCoordinate\n\n        if (overlaps) {\n          callback(\n            line.trim(),\n            // cpositions[pos] refers to actual file offset of a bgzip block boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a \"unique\"\n            // address space so that data in that block could never overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset from\n            // that bgzip block boundary, and since the cpositions are multiplied by\n            // (1 << 8) these uncompressed offsets get a unique space\n            cpositions[pos] * (1 << 8) +\n              (blockStart - dpositions[pos]) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so\n          // we must be at the end of the relevant data and we can stop\n          // processing data now\n          return\n        }\n\n        // yield if we have emitted beyond the yield limit\n        if (this.yieldTime && last - Date.now() > this.yieldTime) {\n          last = Date.now()\n          checkAbortSignal(signal)\n          await timeout(1)\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of\n   * the file, which are the bytes up to the first\n   * non-meta line\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } = await this.getMetadata(\n      opts,\n    )\n    checkAbortSignal(opts.signal)\n    const maxFetch = (firstDataLine?.blockPosition || 0) + maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header\n    // actually takes up more than one block? this case is not covered here\n\n    let bytes = await this._readRegion(0, maxFetch, opts)\n    checkAbortSignal(opts.signal)\n    try {\n      bytes = await unzip(bytes)\n    } catch (e) {\n      console.error(e)\n      throw new Error(\n        //@ts-ignore\n        `error decompressing block ${e.code} at 0 (length ${maxFetch}) ${e}`,\n      )\n    }\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      bytes = bytes.slice(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the\n   * file, is the portion up to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const bytes = await this.getHeaderBuffer(opts)\n    return bytes.toString('utf8')\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which\n   * they occur in the file. reference sequence renaming is not applied\n   * to these names.\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index,\n   * containing columnNumbers, metaChar, and format\n   * @param {string} regionRefName\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   * @param {array[string]} line\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    metadata: IndexData,\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    const { columnNumbers, metaChar, coordinateType, format } = metadata\n    // skip meta lines\n    if (line.charAt(0) === metaChar) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast.\n    // basically, we want to avoid doing a split, because if the lines are really long\n    // that could lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    for (let i = 0; i < line.length + 1; i += 1) {\n      if (line[i] === '\\t' || i === line.length) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return { overlaps: false }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return { startCoordinate, overlaps: false }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return { startCoordinate, overlaps: false }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          let endCoordinate\n          // this will never match if there is no end column\n          if (format === 'VCF') {\n            endCoordinate = this._getVcfEnd(\n              startCoordinate,\n              refSeq,\n              line.slice(currentColumnStart, i),\n            )\n          } else {\n            endCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          }\n          if (endCoordinate <= regionStart) {\n            return { overlaps: false }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return { startCoordinate, overlaps: true }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END\n    // as being on a different chromosome\n    // if CHR2 is on the same chromosome, still ignore it\n    // because there should be another pairwise feature\n    // at the end of this one\n    const isTRA = info.indexOf('SVTYPE=TRA') !== -1\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference sequence\n   * @param refSeq reference sequence name\n   * @returns number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  async _readRegion(pos: number, size: number, opts: Options = {}) {\n    const b = Buffer.alloc(size)\n    const { bytesRead, buffer } = await this.filehandle.read(\n      b,\n      0,\n      size,\n      pos,\n      opts,\n    )\n\n    return buffer.slice(0, bytesRead)\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   */\n  async readChunk(c: Chunk, opts: Options = {}) {\n    // fetch the uncompressed data, uncompress carefully a block at a time,\n    // and stop when done\n\n    const data = await this._readRegion(\n      c.minv.blockPosition,\n      c.fetchedSize(),\n      opts,\n    )\n    try {\n      return unzipChunkSlice(data, c)\n    } catch (e) {\n      throw new Error(`error decompressing c ${c.toString()} ${e}`)\n    }\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nconst AggregateAbortController_1 = __importDefault(require(\"./AggregateAbortController\"));\nconst AggregateStatusReporter_1 = __importDefault(require(\"./AggregateStatusReporter\"));\nclass AbortablePromiseCache {\n    constructor({ fill, cache, }) {\n        if (typeof fill !== 'function') {\n            throw new TypeError('must pass a fill function');\n        }\n        if (typeof cache !== 'object') {\n            throw new TypeError('must pass a cache object');\n        }\n        if (typeof cache.get !== 'function' ||\n            typeof cache.set !== 'function' ||\n            typeof cache.delete !== 'function') {\n            throw new TypeError('cache must implement get(key), set(key, val), and and delete(key)');\n        }\n        this.cache = cache;\n        this.fillCallback = fill;\n    }\n    static isAbortException(exception) {\n        return (\n        // DOMException\n        exception.name === 'AbortError' ||\n            // standard-ish non-DOM abort exception\n            //@ts-ignore\n            exception.code === 'ERR_ABORTED' ||\n            // stringified DOMException\n            exception.message === 'AbortError: aborted' ||\n            // stringified standard-ish exception\n            exception.message === 'Error: aborted');\n    }\n    evict(key, entry) {\n        if (this.cache.get(key) === entry) {\n            this.cache.delete(key);\n        }\n    }\n    fill(key, data, signal, statusCallback) {\n        const aborter = new AggregateAbortController_1.default();\n        const statusReporter = new AggregateStatusReporter_1.default();\n        statusReporter.addCallback(statusCallback);\n        const newEntry = {\n            aborter: aborter,\n            promise: this.fillCallback(data, aborter.signal, (message) => {\n                statusReporter.callback(message);\n            }),\n            settled: false,\n            statusReporter,\n            get aborted() {\n                return this.aborter.signal.aborted;\n            },\n        };\n        newEntry.aborter.addSignal(signal);\n        // remove the fill from the cache when its abortcontroller fires, if still in there\n        newEntry.aborter.signal.addEventListener('abort', () => {\n            if (!newEntry.settled) {\n                this.evict(key, newEntry);\n            }\n        });\n        // chain off the cached promise to record when it settles\n        newEntry.promise\n            .then(() => {\n            newEntry.settled = true;\n        }, () => {\n            newEntry.settled = true;\n            // if the fill throws an error (including abort) and is still in the cache, remove it\n            this.evict(key, newEntry);\n        })\n            .catch(e => {\n            // this will only be reached if there is some kind of\n            // bad bug in this library\n            console.error(e);\n            throw e;\n        });\n        this.cache.set(key, newEntry);\n    }\n    static checkSinglePromise(promise, signal) {\n        // check just this signal for having been aborted, and abort the\n        // promise if it was, regardless of what happened with the cached\n        // response\n        function checkForSingleAbort() {\n            if (signal && signal.aborted) {\n                throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' });\n            }\n        }\n        return promise.then(result => {\n            checkForSingleAbort();\n            return result;\n        }, error => {\n            checkForSingleAbort();\n            throw error;\n        });\n    }\n    has(key) {\n        return this.cache.has(key);\n    }\n    /**\n     * Callback for getting status of the pending async\n     *\n     * @callback statusCallback\n     * @param {any} status, current status string or message object\n     */\n    /**\n     * @param {any} key cache key to use for this request\n     * @param {any} data data passed as the first argument to the fill callback\n     * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n     * @param {statusCallback} a callback to get the current status of a pending async operation\n     */\n    get(key, data, signal, statusCallback) {\n        if (!signal && data instanceof abortcontroller_ponyfill_1.AbortSignal) {\n            throw new TypeError('second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?');\n        }\n        const cacheEntry = this.cache.get(key);\n        if (cacheEntry) {\n            if (cacheEntry.aborted && !cacheEntry.settled) {\n                // if it's aborted but has not realized it yet, evict it and redispatch\n                this.evict(key, cacheEntry);\n                return this.get(key, data, signal, statusCallback);\n            }\n            if (cacheEntry.settled) {\n                // too late to abort, just return it\n                return cacheEntry.promise;\n            }\n            // request is in-flight, add this signal to its list of signals,\n            // or if there is no signal, the aborter will become non-abortable\n            cacheEntry.aborter.addSignal(signal);\n            cacheEntry.statusReporter.addCallback(statusCallback);\n            return AbortablePromiseCache.checkSinglePromise(cacheEntry.promise, signal);\n        }\n        // if we got here, it is not in the cache. fill.\n        this.fill(key, data, signal, statusCallback);\n        return AbortablePromiseCache.checkSinglePromise(\n        //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n        //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.cache.get(key).promise, signal);\n    }\n    /**\n     * delete the given entry from the cache. if it exists and its fill request has\n     * not yet settled, the fill will be signaled to abort.\n     *\n     * @param {any} key\n     */\n    delete(key) {\n        const cachedEntry = this.cache.get(key);\n        if (cachedEntry) {\n            if (!cachedEntry.settled) {\n                cachedEntry.aborter.abort();\n            }\n            this.cache.delete(key);\n        }\n    }\n    /**\n     * Clear all requests from the cache. Aborts any that have not settled.\n     * @returns {number} count of entries deleted\n     */\n    clear() {\n        // iterate without needing regenerator-runtime\n        const keyIter = this.cache.keys();\n        let deleteCount = 0;\n        for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n            this.delete(result.value);\n            deleteCount += 1;\n        }\n        return deleteCount;\n    }\n}\nexports.default = AbortablePromiseCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nclass NullSignal {\n}\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nclass AggregateAbortController {\n    constructor() {\n        this.signals = new Set();\n        this.abortController = new abortcontroller_ponyfill_1.AbortController();\n    }\n    /**\n     * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n     *  will be treated as a null-signal, and this abortcontroller will no\n     *  longer be abortable.\n     */\n    //@ts-ignore\n    addSignal(signal = new NullSignal()) {\n        if (this.signal.aborted) {\n            throw new Error('cannot add a signal, already aborted!');\n        }\n        // note that a NullSignal will never fire, so if we\n        // have one this thing will never actually abort\n        this.signals.add(signal);\n        if (signal.aborted) {\n            // handle the abort immediately if it is already aborted\n            // for some reason\n            this.handleAborted(signal);\n        }\n        else if (typeof signal.addEventListener === 'function') {\n            signal.addEventListener('abort', () => {\n                this.handleAborted(signal);\n            });\n        }\n    }\n    handleAborted(signal) {\n        this.signals.delete(signal);\n        if (this.signals.size === 0) {\n            this.abortController.abort();\n        }\n    }\n    get signal() {\n        return this.abortController.signal;\n    }\n    abort() {\n        this.abortController.abort();\n    }\n}\nexports.default = AggregateAbortController;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass AggregateStatusReporter {\n    constructor() {\n        this.callbacks = new Set();\n    }\n    addCallback(callback = () => { }) {\n        this.callbacks.add(callback);\n        callback(this.currentMessage);\n    }\n    callback(message) {\n        this.currentMessage = message;\n        this.callbacks.forEach(elt => {\n            elt(message);\n        });\n    }\n}\nexports.default = AggregateStatusReporter;\n","\"use strict\";\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortSignal = exports.AbortController = void 0;\nconst cjs_ponyfill_1 = require(\"abortcontroller-polyfill/dist/cjs-ponyfill\");\nvar getGlobal = function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n};\n//@ts-ignore\nlet AbortController = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortController : getGlobal().AbortController;\nexports.AbortController = AbortController;\n//@ts-ignore\nlet AbortSignal = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortSignal : getGlobal().AbortSignal;\nexports.AbortSignal = AbortSignal;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbortablePromiseCache_1 = __importDefault(require(\"./AbortablePromiseCache\"));\nexports.default = AbortablePromiseCache_1.default;\n"],"names":["longToNumber","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","Error","toNumber","AbortError","checkAbortSignal","signal","aborted","DOMException","e","code","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","length","sort","c0","c1","dif","minv","blockPosition","dataPosition","forEach","chunk","chunk1","chunk2","maxv","compareTo","push","VirtualOffset","constructor","this","toString","concat","b","min","i","_len","arguments","args","Array","_key","fromBytes","bytes","offset","undefined","Chunk","bin","fetchedSize","_fetchedSize","toUniqueString","IndexFile","_ref","filehandle","renameRefSeqs","n","renameRefSeq","getMetadata","opts","indices","rest","parse","_findFirstData","currentFdl","virtualOffset","parseP","_parse","catch","hasRefSeq","seqId","binIndex","TabixIndex","lineCount","refName","indexData","refId","refNameToId","stats","buf","readFile","unzip","readUInt32LE","refCount","readInt32LE","formatFlags","coordinateType","format","columnNumbers","ref","start","end","metaValue","maxBinNumber","metaChar","String","fromCharCode","skipLines","nameSectionLength","refIdToName","_parseNameBytes","slice","firstDataLine","currOffset","fill","map","binCount","j","chunkCount","parsePseudoBin","k","u","v","linearCount","linearIndex","maxRefLength","maxBlockSize","Long","namesBytes","currRefId","currNameStart","blocksForRange","max","ba","console","warn","overlappingBins","beg","binChunks","c","nintv","minLin","Math","maxLin","vp","rshift","num","bits","floor","CSI","super","depth","minShift","indexCov","parseAuxData","csiVersion","auxLength","aux","loffset","csi","reg2bins","l","t","s","bins","decoder","TextDecoder","timeout","time","Promise","resolve","setTimeout","TabixIndexedFile","path","tbiPath","tbiFilehandle","csiPath","csiFilehandle","yieldTime","chunkSizeLimit","chunkCacheSize","TypeError","LocalFile","index","TBI","chunkCache","AbortablePromiseCache","cache","LRU","maxSize","readChunk","getLines","callback","options","lineCallback","metadata","size","toLocaleString","last","Date","now","chunkNum","previousStartCoordinate","buffer","cpositions","dpositions","get","blockStart","pos","indexOf","line","decode","startCoordinate","overlaps","checkLine","trim","getHeaderBuffer","maxFetch","_readRegion","error","lastNewline","newlineByte","charCodeAt","metaByte","getHeader","getReferenceSequenceNames","regionRefName","regionStart","regionEnd","charAt","maxColumn","currentColumnNumber","currentColumnStart","refSeq","Infinity","parseInt","endCoordinate","_getVcfEnd","info","isTRA","prevChar","valueEnd","Buffer","alloc","bytesRead","read","data","unzipChunkSlice","__importDefault","mod","__esModule","Object","defineProperty","exports","value","abortcontroller_ponyfill_1","require","AggregateAbortController_1","AggregateStatusReporter_1","set","delete","fillCallback","isAbortException","exception","name","message","evict","key","entry","statusCallback","aborter","default","statusReporter","addCallback","newEntry","promise","settled","addSignal","addEventListener","then","checkSinglePromise","checkForSingleAbort","assign","result","has","AbortSignal","cacheEntry","cachedEntry","abort","clear","keyIter","keys","deleteCount","next","done","NullSignal","signals","Set","abortController","AbortController","add","handleAborted","callbacks","currentMessage","elt","cjs_ponyfill_1","getGlobal","self","window","global","AbortablePromiseCache_1"],"sourceRoot":""}