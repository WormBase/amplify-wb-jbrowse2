{"version":3,"file":"static/js/6117.6e1d247c.chunk.js","mappings":"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","sources":["../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/ShareBookmarksDialog.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/sessionSharing.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\nimport {\n  Alert,\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport copy from 'copy-to-clipboard'\n\nimport { getSession, isSessionWithShareURL } from '@jbrowse/core/util'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons'\n\n// locals\nimport { shareSessionToDynamo } from '../sessionSharing'\nimport { GridBookmarkModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  flexItem: {\n    margin: 5,\n  },\n}))\n\nconst ShareBookmarksDialog = observer(function ({\n  onClose,\n  model,\n}: {\n  onClose: () => void\n  model: GridBookmarkModel\n}) {\n  const { classes } = useStyles()\n  const [url, setUrl] = useState('')\n  const [error, setError] = useState<unknown>()\n  const [loading, setLoading] = useState(true)\n  const session = getSession(model)\n  const { selectedBookmarks } = model\n  const shareAll = selectedBookmarks.length === 0\n  const bookmarksToShare =\n    selectedBookmarks.length === 0\n      ? model.allBookmarksModel\n      : model.sharedBookmarksModel\n\n  useEffect(() => {\n    let cancelled = false\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        if (!isSessionWithShareURL(session)) {\n          throw new Error('No shareURL configured')\n        }\n        setLoading(true)\n        const snap = getSnapshot(bookmarksToShare)\n        const locationUrl = new URL(window.location.href)\n        const result = await shareSessionToDynamo(\n          snap,\n          session.shareURL,\n          locationUrl.href,\n        )\n        if (!cancelled) {\n          const params = new URLSearchParams(locationUrl.search)\n          params.set('bookmarks', `share-${result.json.sessionId}`)\n          params.set('password', result.password)\n          locationUrl.search = params.toString()\n          setUrl(locationUrl.href)\n          setLoading(false)\n        }\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [bookmarksToShare, session])\n  return (\n    <Dialog open onClose={onClose} title=\"Share bookmarks\">\n      <DialogContent\n        style={{ display: 'flex', flexFlow: 'column', gap: '5px' }}\n      >\n        <Alert severity=\"info\">\n          {shareAll ? (\n            <>\n              <span>All bookmarks will be shared.</span>\n              <br />\n              <span>\n                Use the checkboxes to select individual bookmarks to share.\n              </span>\n            </>\n          ) : (\n            'Only selected bookmarks will be shared.'\n          )}\n        </Alert>\n        <DialogContentText>\n          Copy the URL below to share your bookmarks.\n        </DialogContentText>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <Typography>Generating short URL...</Typography>\n        ) : (\n          <TextField\n            label=\"URL\"\n            value={url}\n            InputProps={{ readOnly: true }}\n            variant=\"filled\"\n            fullWidth\n            onClick={event => {\n              const target = event.target as HTMLTextAreaElement\n              target.select()\n            }}\n          />\n        )}\n        <DialogContentText>\n          The URL should be pasted into the \"Import from share link\" field in\n          the \"Import\" form found in the \"Bookmarked regions\" drawer.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          className={classes.flexItem}\n          data-testid=\"dialogShare\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n          startIcon={<ContentCopyIcon />}\n          onClick={async () => {\n            copy(url)\n            session.notify('Copied to clipboard', 'success')\n            onClose()\n          }}\n        >\n          Copy share link\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default ShareBookmarksDialog\n","// duplicated from products/jbrowse-web/src/sessionSharing.ts ; could possibly be moved into a higher directory and shared between the two\nimport { toUrlSafeB64 } from './utils'\n\n// from https://stackoverflow.com/questions/1349404/\nfunction generateUID(length: number) {\n  return window\n    .btoa(\n      [...window.crypto.getRandomValues(new Uint8Array(length * 2))]\n        .map(b => String.fromCharCode(b))\n        .join(''),\n    )\n    .replaceAll(/[+/]/g, '')\n    .slice(0, length)\n}\n\nconst encrypt = async (text: string, password: string) => {\n  const AES = await import('crypto-js/aes')\n  return AES.encrypt(text, password).toString()\n}\n\nconst decrypt = async (text: string, password: string) => {\n  const AES = await import('crypto-js/aes')\n  const Utf8 = await import('crypto-js/enc-utf8')\n  const bytes = AES.decrypt(text, password)\n  return bytes.toString(Utf8)\n}\n\nfunction getErrorMsg(err: string) {\n  try {\n    const obj = JSON.parse(err)\n    return obj.message\n  } catch (e) {\n    return err\n  }\n}\n// writes the encrypted session, current datetime, and referer to DynamoDB\nexport async function shareSessionToDynamo(\n  session: unknown,\n  url: string,\n  referer: string,\n) {\n  const sess = await toUrlSafeB64(JSON.stringify(session))\n  const password = generateUID(5)\n  const encryptedSession = await encrypt(sess, password)\n\n  const data = new FormData()\n  data.append('session', encryptedSession)\n  data.append('dateShared', `${Date.now()}`)\n  data.append('referer', referer)\n\n  const response = await fetch(`${url}share`, {\n    method: 'POST',\n    mode: 'cors',\n    body: data,\n  })\n\n  if (!response.ok) {\n    const err = await response.text()\n    throw new Error(getErrorMsg(err))\n  }\n  const json = await response.json()\n  return {\n    json,\n    encryptedSession,\n    password,\n  }\n}\n\nexport async function readSessionFromDynamo(\n  baseUrl: string,\n  sessionQueryParam: string,\n  password: string,\n  signal?: AbortSignal,\n) {\n  const sessionId = sessionQueryParam.split('share-')[1]\n  const url = `${baseUrl}?sessionId=${encodeURIComponent(sessionId)}`\n  const response = await fetch(url, {\n    signal,\n  })\n\n  if (!response.ok) {\n    const err = await response.text()\n    throw new Error(getErrorMsg(err))\n  }\n\n  const json = await response.json()\n  return decrypt(json.session, password)\n}\n"],"names":["useStyles","makeStyles","flexItem","margin","observer","_ref","onClose","model","classes","url","setUrl","useState","error","setError","loading","setLoading","session","getSession","selectedBookmarks","shareAll","length","bookmarksToShare","allBookmarksModel","sharedBookmarksModel","useEffect","cancelled","isSessionWithShareURL","Error","snap","getSnapshot","locationUrl","URL","window","location","href","result","shareSessionToDynamo","shareURL","params","URLSearchParams","search","set","concat","json","sessionId","password","toString","e","_jsxs","Dialog","open","title","children","DialogContent","style","display","flexFlow","gap","_jsx","Alert","severity","_Fragment","DialogContentText","ErrorMessage","Typography","TextField","label","value","InputProps","readOnly","variant","fullWidth","onClick","event","target","select","DialogActions","Button","className","color","disabled","startIcon","ContentCopyIcon","async","copy","notify","encrypt","text","decrypt","AES","Utf8","getErrorMsg","err","JSON","parse","message","referer","sess","toUrlSafeB64","stringify","btoa","crypto","getRandomValues","Uint8Array","map","b","String","fromCharCode","join","replaceAll","slice","encryptedSession","data","FormData","append","Date","now","response","fetch","method","mode","body","ok","readSessionFromDynamo","baseUrl","sessionQueryParam","signal","split","encodeURIComponent"],"sourceRoot":""}