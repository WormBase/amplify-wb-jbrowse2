{"version":3,"file":"static/js/6882.43fd2753.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/util.ts","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/CDNASequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/ProteinSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/GenomicSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/CDSSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequencePanel.tsx"],"sourcesContent":["// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nexport const intronColor = undefined\nexport const utrColor = 'rgb(200,240,240)'\nexport const proteinColor = 'rgb(220,160,220)'\nexport const cdsColor = 'rgb(220,220,180)'\nexport const updownstreamColor = 'rgba(250,200,200)'\nexport const genomeColor = 'rgb(200,280,200)'\n","import React from 'react'\nimport { Feat } from '../util'\nimport { cdsColor, intronColor, updownstreamColor, utrColor } from './util'\n\nexport default function CDNASequence({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  includeIntrons,\n  collapseIntron,\n  intronBp,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  intronBp: number\n}) {\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  return (\n    <>\n      {upstream ? (\n        <span style={{ background: updownstreamColor }}>{upstream}</span>\n      ) : null}\n\n      {chunks.map((chunk, idx) => {\n        const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n\n        return (\n          <React.Fragment key={JSON.stringify(chunk)}>\n            <span\n              style={{\n                background: chunk.type === 'CDS' ? cdsColor : utrColor,\n              }}\n            >\n              {sequence.slice(chunk.start, chunk.end)}\n            </span>\n            {includeIntrons && idx < chunks.length - 1 ? (\n              <span style={{ background: intronColor }}>\n                {collapseIntron && intron.length > intronBp * 2\n                  ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n                  : intron}\n              </span>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>{downstream}</span>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\nimport { Feat, stitch } from '../util'\nimport { proteinColor } from './util'\n\nexport default function ProteinSequence({\n  cds,\n  sequence,\n  codonTable,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: Record<string, string>\n}) {\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n\n  return <span style={{ background: proteinColor }}>{protein}</span>\n}\n","import React from 'react'\nimport { genomeColor, updownstreamColor } from './util'\n\nexport default function GenomicSequence({\n  sequence,\n  upstream,\n  downstream,\n}: {\n  sequence: string\n  upstream?: string\n  downstream?: string\n}) {\n  return (\n    <>\n      {upstream ? (\n        <span style={{ background: updownstreamColor }}>{upstream}</span>\n      ) : null}\n\n      <span style={{ background: genomeColor }}>{sequence}</span>\n\n      {downstream ? (\n        <span style={{ background: updownstreamColor }}>{downstream}</span>\n      ) : null}\n    </>\n  )\n}\n","import React from 'react'\nimport { cdsColor } from './util'\nimport { Feat, stitch } from '../util'\n\nexport default function CDSSequence({\n  cds,\n  sequence,\n}: {\n  cds: Feat[]\n  sequence: string\n}) {\n  return <span style={{ background: cdsColor }}>{stitch(cds, sequence)}</span>\n}\n","import React from 'react'\n\nimport { defaultCodonTable, generateCodonTable, revcom } from '../../util'\nimport {\n  ParentFeat,\n  SeqState,\n  calculateUTRs,\n  calculateUTRs2,\n  dedupe,\n  revlist,\n} from '../util'\nimport CDNASequence from './CDNASequence'\nimport ProteinSequence from './ProteinSequence'\nimport GenomicSequence from './GenomicSequence'\nimport CDSSequence from './CDSSequence'\n\ninterface SeqPanelProps {\n  sequence: SeqState\n  feature: ParentFeat\n  mode: string\n  intronBp?: number\n}\nconst SeqPanel = React.forwardRef<HTMLDivElement, SeqPanelProps>(\n  function SeqPanel2(props, ref) {\n    const { feature, mode, intronBp = 10 } = props\n    let {\n      sequence: { seq, upstream = '', downstream = '' },\n    } = props\n    const { subfeatures = [] } = feature\n\n    const children = subfeatures\n      .sort((a, b) => a.start - b.start)\n      .map(sub => ({\n        ...sub,\n        start: sub.start - feature.start,\n        end: sub.end - feature.start,\n      }))\n\n    // we filter duplicate entries in cds and exon lists duplicate entries may be\n    // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n    // probably worth ignoring here (produces broken protein translations if\n    // included)\n    //\n    // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n    // transcript ENST00000445597.6\n    //\n    // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n    let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n    let utr = dedupe(children.filter(sub => sub.type.match(/utr/i)))\n    let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n    if (!utr.length && cds.length && exons.length) {\n      utr = calculateUTRs(cds, exons)\n    }\n    if (!utr.length && cds.length && !exons.length) {\n      utr = calculateUTRs2(cds, {\n        start: 0,\n        end: feature.end - feature.start,\n        type: 'gene',\n      })\n    }\n\n    if (feature.strand === -1) {\n      // doing this in a single assignment is needed because downstream and\n      // upstream are swapped so this avoids a temp variable\n      ;[seq, upstream, downstream] = [\n        revcom(seq),\n        revcom(downstream),\n        revcom(upstream),\n      ]\n      cds = revlist(cds, seq.length)\n      exons = revlist(exons, seq.length)\n      utr = revlist(utr, seq.length)\n    }\n    const codonTable = generateCodonTable(defaultCodonTable)\n\n    return (\n      <div ref={ref} data-testid=\"sequence_panel\">\n        <div\n          style={{\n            /* raw styles instead of className so that html copy works */\n            fontFamily: 'monospace',\n            wordWrap: 'break-word',\n            overflow: 'auto',\n            color: 'black',\n            fontSize: 12,\n            maxWidth: 600,\n            maxHeight: 300,\n          }}\n        >\n          <span style={{ background: 'white' }}>\n            {`>${\n              feature.name ||\n              feature.id ||\n              `${feature.refName}:${feature.start + 1}-${feature.end}`\n            }-${mode}\\n`}\n          </span>\n          <br />\n          {mode === 'genomic' ? (\n            <GenomicSequence sequence={seq} />\n          ) : mode === 'genomic_sequence_updownstream' ? (\n            <GenomicSequence\n              sequence={seq}\n              upstream={upstream}\n              downstream={downstream}\n            />\n          ) : mode === 'cds' ? (\n            <CDSSequence cds={cds} sequence={seq} />\n          ) : mode === 'cdna' ? (\n            <CDNASequence\n              exons={exons}\n              cds={cds}\n              utr={utr}\n              sequence={seq}\n              intronBp={intronBp}\n            />\n          ) : mode === 'protein' ? (\n            <ProteinSequence cds={cds} codonTable={codonTable} sequence={seq} />\n          ) : mode === 'gene' ? (\n            <CDNASequence\n              exons={exons}\n              cds={cds}\n              utr={utr}\n              sequence={seq}\n              includeIntrons\n              intronBp={intronBp}\n            />\n          ) : mode === 'gene_collapsed_intron' ? (\n            <CDNASequence\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              includeIntrons\n              collapseIntron\n              intronBp={intronBp}\n            />\n          ) : mode === 'gene_updownstream' ? (\n            <CDNASequence\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              upstream={upstream}\n              downstream={downstream}\n              includeIntrons\n              intronBp={intronBp}\n            />\n          ) : mode === 'gene_updownstream_collapsed_intron' ? (\n            <CDNASequence\n              exons={exons}\n              cds={cds}\n              sequence={seq}\n              utr={utr}\n              upstream={upstream}\n              downstream={downstream}\n              includeIntrons\n              collapseIntron\n              intronBp={intronBp}\n            />\n          ) : (\n            <div>Unknown type</div>\n          )}\n        </div>\n      </div>\n    )\n  },\n)\n\nexport default SeqPanel\n"],"names":["cdsColor","updownstreamColor","CDNASequence","_ref","utr","cds","exons","sequence","upstream","downstream","includeIntrons","collapseIntron","intronBp","chunks","length","sort","a","b","start","filter","f","end","_jsxs","_Fragment","children","_jsx","style","background","map","chunk","idx","_chunks","intron","slice","React","type","undefined","concat","JSON","stringify","ProteinSequence","codonTable","str","stitch","protein","i","GenomicSequence","CDSSequence","props","ref","feature","mode","seq","subfeatures","sub","dedupe","match","calculateUTRs","calculateUTRs2","strand","revcom","revlist","generateCodonTable","defaultCodonTable","fontFamily","wordWrap","overflow","color","fontSize","maxWidth","maxHeight","name","id","refName"],"sourceRoot":""}