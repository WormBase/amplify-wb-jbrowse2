{"version":3,"file":"static/js/3880.ff42b22c.chunk.js","mappings":"yKAYOA,eAAeC,EACpBC,EACAC,EACAC,GAOA,MACMC,GADOC,EAAAA,EAAAA,mBAAkBJ,GACZK,cAAcC,aAC3BC,EAASP,EAAKO,OACpB,GAAIN,EAAKO,gBAAiB,CACxB,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAON,MAAgB,EAARA,EACfM,EAAOF,OAAkB,EAATA,EAChB,MAAMK,EAAMH,EAAOI,WAAW,MAC9B,IAAKD,EACH,OAIF,OAFAA,EAAIE,MAAM,EAAG,GACbZ,EAAGF,EAAMY,EAAKT,EAAOI,IAEnBQ,EAAAA,EAAAA,KAAA,SACEZ,MAAOA,EACPI,OAAQA,EACRS,UAAWP,EAAOQ,UAAU,cAGlC,CAAO,CAEL,MACML,EAAM,WADM,sCACEM,SAAQf,EAAOI,GACnCL,EAAGF,EAAMY,EAAKT,EAAOI,GACrB,MAAMY,EA1CV,SAAeC,GACb,MAAMC,EAAyB,qBAATC,KACtB,MAAM,YAANC,OAAmBF,EAASD,EAAK,OACnC,CAuCmBI,CAAMxB,EAAKoB,IAC1B,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEZ,EAAAA,EAAAA,KAAA,QAAAY,UACEZ,EAAAA,EAAAA,KAAA,YAAUK,GAAID,EAAOQ,UACnBZ,EAAAA,EAAAA,KAAA,QAAMa,EAAG,EAAGC,EAAG,EAAG1B,MAAOA,EAAOI,OAAQA,SAG5CQ,EAAAA,EAAAA,KAAA,KAEEe,wBAAyB,CAAEC,OAAQnB,EAAIoB,SAASC,WAChDC,SAAQ,QAAAX,OAAUJ,EAAM,SAIhC,CACF,C","sources":["../../../plugins/alignments/src/shared/renderSvg.tsx"],"sourcesContent":["import React from 'react'\nimport { getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// stabilize clipid under test for snapshot\nfunction getId(id: string) {\n  const isJest = typeof jest === 'undefined'\n  return `arc-clip-${isJest ? id : 'jest'}`\n}\n\ntype LGV = LinearGenomeViewModel\n\nexport async function renderSvg<T extends { id: string; height: number }>(\n  self: T,\n  opts: { rasterizeLayers?: boolean },\n  cb: (\n    model: T,\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n  ) => void,\n) {\n  const view = getContainingView(self) as LGV\n  const width = view.dynamicBlocks.totalWidthPx\n  const height = self.height\n  if (opts.rasterizeLayers) {\n    const canvas = document.createElement('canvas')\n    canvas.width = width * 2\n    canvas.height = height * 2\n    const ctx = canvas.getContext('2d')\n    if (!ctx) {\n      return\n    }\n    ctx.scale(2, 2)\n    cb(self, ctx, width, height)\n    return (\n      <image\n        width={width}\n        height={height}\n        xlinkHref={canvas.toDataURL('image/png')}\n      />\n    )\n  } else {\n    // @ts-ignore\n    const C2S = await import('canvas2svg')\n    const ctx = new C2S.default(width, height)\n    cb(self, ctx, width, height)\n    const clipid = getId(self.id)\n    return (\n      <>\n        <defs>\n          <clipPath id={clipid}>\n            <rect x={0} y={0} width={width} height={height} />\n          </clipPath>\n        </defs>\n        <g\n          /* eslint-disable-next-line react/no-danger */\n          dangerouslySetInnerHTML={{ __html: ctx.getSvg().innerHTML }}\n          clipPath={`url(#${clipid})`}\n        />\n      </>\n    )\n  }\n}\n"],"names":["async","renderSvg","self","opts","cb","width","getContainingView","dynamicBlocks","totalWidthPx","height","rasterizeLayers","canvas","document","createElement","ctx","getContext","scale","_jsx","xlinkHref","toDataURL","default","clipid","id","isJest","jest","concat","getId","_jsxs","_Fragment","children","x","y","dangerouslySetInnerHTML","__html","getSvg","innerHTML","clipPath"],"sourceRoot":""}