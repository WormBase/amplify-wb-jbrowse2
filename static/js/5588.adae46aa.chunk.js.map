{"version":3,"file":"static/js/5588.adae46aa.chunk.js","mappings":"oiBAwBA,SAASA,GAAc,QACrBC,EAAO,OACPC,EAAM,UACNC,IAMA,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAU,KAAC,kQAMXJ,EAAQK,KAAI,EAAGC,WACdH,EAAAA,cAACI,EAAAA,EAAS,CACRC,IAAM,UAASF,IACfG,YAAc,UAASH,IACvBI,MAAOT,EAAOK,IAAU,GACxBK,SAAUC,GACRV,EAAU,IAAKD,EAAQ,CAACK,GAAQM,EAAMC,OAAOH,YAMzD,CAEe,SAASI,EAAeC,GAIrC,MAAM,QAAEC,EAAO,aAAEC,EAAe,CAAC,GAAMF,GACjC,IAAEG,EAAG,WAAEC,IAAeC,EAAAA,EAAAA,MACrBnB,EAAQC,IAAamB,EAAAA,EAAAA,UAAkB,CAAC,GACzCC,EAAWN,EAAQM,SAAW,CAAC,EAC/BC,EAAkBC,OAAOC,QAAQH,GAEvC,IAAII,EACAC,EAAO,GACX,MAAMC,EAAUJ,OAAOK,KAAK5B,GAK5B,IACE0B,EAAOJ,EACJlB,KAAIyB,IACI,IACFN,OAAOO,YACRP,OAAOC,QAAQK,EAAI,IAAIzB,KAAI2B,GAAK,CAACA,EAAE,GAAK,GAAEA,EAAE,SAE9CC,OAAQH,EAAI,GACZI,GAAIJ,EAAI,OAGX7B,QAAO6B,IACNF,EAAQO,QACJP,EAAQQ,OAAM5B,IACZ,MAAM6B,EAAapC,EAAOO,GAC1B,OAAO6B,GACHP,EAAItB,GAAK8B,MAAM,IAAIC,OAAOF,EAAY,KAClC,KAIpB,CAAE,MAAOL,GACPN,EAAQM,CACV,CAEA,MAAMH,EAAO,CAAC,YAAaL,OAAOK,KAAKN,EAAgB,KAAK,IAAM,CAAC,KAC5DiB,EAASC,IAAcpB,EAAAA,EAAAA,WAAS,IAChCqB,EAAQC,IAAatB,EAAAA,EAAAA,UAC1BQ,EAAKxB,KAAI2B,IAAKY,EAAAA,EAAAA,kBAAiBjB,EAAKtB,KAAIwC,GAAKA,EAAEb,SAE3ChC,EAAU6B,EAAKxB,KAAI,CAACC,EAAOwC,KAAU,CACzCxC,QACAyC,YAAa9B,GAAc+B,SAAS1C,IAAQ2C,YAC5CC,MAAOR,EAAOI,OAKhB,OAAQvB,EAAgBY,OACtBhC,EAAAA,cAACgD,EAAAA,SAAQC,EAAA,GAAKrC,EAAK,CAAEsC,MAAM,YACxB3B,EAAQvB,EAAAA,cAACC,EAAAA,EAAU,CAACkD,MAAM,SAAU,GAAE5B,KAAwB,KAC/DvB,EAAAA,cAACoD,EAAAA,EAAgB,CACfC,QACErD,EAAAA,cAACsD,EAAAA,EAAQ,CACPjB,QAASA,EACT7B,SAAUC,GAAS6B,EAAW7B,EAAMC,OAAO2B,WAG/CkB,MAAOvD,EAAAA,cAACC,EAAAA,EAAU,CAACuD,QAAQ,SAAQ,kBAEpCnB,EACCrC,EAAAA,cAACJ,EAAa,CACZG,UAAWA,EACXF,QAASA,EACTC,OAAQA,IAER,KACJE,EAAAA,cAAA,OAAKe,IAAKA,GACRf,EAAAA,cAACyD,EAAAA,EAAS,CACRlB,OAAQA,EACRC,UAAWA,EACXxB,WAAYA,IAEdhB,EAAAA,cAAC0D,EAAAA,GAAQ,CACPlC,KAAMA,EACNmC,WAAYnC,EAAKQ,OAAS,IAC1BnC,QAASA,EACT+D,4BAA0B,EAC1BC,UAAW,GACXC,mBAAoB,GACpBC,mBAAiB,EACjBC,MAAO,CAAEC,QAAS5B,EAAU6B,EAAAA,EAAc,MAC1CC,UAAW,CACTF,QAAS,CAAEG,aAAc,CAAEC,sBAAsB,SAnC1B,IAyCnC,C,2FCvIA,MAAMC,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,MAAO,CACLC,QAAS,WAoGb,GAhG6BC,EAAAA,EAAAA,WAAS,UAAU,MAC9CC,EAAK,YACLC,EAAW,QACX/D,EAAO,SACPgE,IAOA,MAAM,QAAEC,GAAYR,KACbS,EAAYC,IAAiB9D,EAAAA,EAAAA,WAAS,IACtC+D,EAAcC,IAAmBhE,EAAAA,EAAAA,WAAS,GAEjD,OACElB,EAAAA,cAACmF,EAAAA,OAAM,CAACC,MAAI,EAACC,QAAST,EAAa1B,MAAM,iCACvClD,EAAAA,cAACsF,EAAAA,EAAa,KACZtF,EAAAA,cAACoD,EAAAA,EAAgB,CACfmC,UAAWT,EAAQN,MACnBnB,QACErD,EAAAA,cAACsD,EAAAA,EAAQ,CACPjB,QAAS0C,EACTvE,SAAUC,GAASuE,EAAcvE,EAAMC,OAAO2B,WAGlDkB,MAAM,kCAGRvD,EAAAA,cAACoD,EAAAA,EAAgB,CACfmC,UAAWT,EAAQN,MACnBnB,QACErD,EAAAA,cAACsD,EAAAA,EAAQ,CACPjB,QAAS4C,EACTzE,SAAUC,GAASyE,EAAgBzE,EAAMC,OAAO2B,WAGpDkB,MAAM,yDAGVvD,EAAAA,cAACwF,EAAAA,EAAa,KACZxF,EAAAA,cAACyF,EAAAA,EAAM,CACLC,QAASA,KACP,MAAM,KAAEC,GAAShB,EACXiB,GAAUC,EAAAA,EAAAA,YAAWlB,GAC3B,IACE,MAAMmB,EAAejB,EAASkB,4BAC5BlF,EACA8E,GAOF,SAASK,EAASC,GAChB,OAAOA,EAAI/F,KAAIgG,IAAK,IACfA,EACHnE,GAAK,GAAEmE,EAAEC,WAAWC,KAAKC,cAE7B,CACAP,EAAaQ,MAAM,GAAGC,UAAYZ,EAAK5C,MAAQ,EAAI,IACnD+C,EAAaQ,MAAM,GAAGC,UAAYZ,EAAK5C,MAAQ,EAAI,IACnD+C,EAAaU,YAAc3F,EAE3B,MAAM4F,GAAaC,EAAAA,EAAAA,aAAYf,EAAKgB,QACpCb,EAAaQ,MAAM,GAAGK,OAASX,EAASS,GACxCX,EAAaQ,MAAM,GAAGK,OAASX,EAC7Bf,EAAe,IAAIwB,GAAYG,UAAYH,GAG7Cb,EAAQiB,QAAQ,sBAAuBf,EACzC,CAAE,MAAOjE,GACPiF,QAAQvF,MAAMM,GACd+D,EAAQmB,OAAQ,GAAElF,IACpB,CACA+C,GAAa,EAEfpB,QAAQ,YACRL,MAAM,UACN6D,WAAS,GACV,MAGDhH,EAAAA,cAACyF,EAAAA,EAAM,CACLC,QAASA,IAAMd,IACfzB,MAAM,YACNK,QAAQ,aACT,WAMT,I,oOC1Ge,SAASyD,EAAcrG,GAKpC,MAAM,MAAE+D,EAAK,WAAEuC,EAAU,QAAErG,GAAYD,EACjCgF,GAAUC,EAAAA,EAAAA,YAAWlB,IACrB,cAAEwC,IAAkBC,EAAAA,EAAAA,QAAOxB,IAC1ByB,EAAkBC,IAAuBpG,EAAAA,EAAAA,WAAS,GACzD,IAAI2D,EAEJ,IACEA,EAAWsC,EAAcI,YAAY,sBACvC,CAAE,MAAO1F,GACP,CAGF,MAAM2F,EAAgB,IAAIC,EAAAA,EAAc5G,GACxC,OACEb,EAAAA,cAACgD,EAAAA,SAAQC,EAAA,GAAKrC,EAAK,CAAEsC,MAAM,cACzBlD,EAAAA,cAACC,EAAAA,EAAU,KAAC,6CACZD,EAAAA,cAAA,UACGkH,EAAWhH,KAAIwH,GACd1H,EAAAA,cAAA,MAAIK,IAAM,GAAEsH,KAAKC,UAAUF,MACzB1H,EAAAA,cAAC6H,EAAAA,EAAI,CACHC,KAAK,IACLpC,QAASjF,IACPA,EAAMsH,iBACN,MAAM,KAAEpC,GAAShB,EACjB,IACE,IAAIgB,EAGF,MAAM,IAAIqC,MACR,6DAHFrC,EAAKsC,iBAAiBP,EAM1B,CAAE,MAAO7F,GACPiF,QAAQvF,MAAMM,GACd+D,EAAQmB,OAAQ,GAAElF,IACpB,IAGA,SAAQ6F,SAKjB7C,EACC7E,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,EAAU,KAAC,sDAGZD,EAAAA,cAAA,UACGkH,EAAWhH,KAAIwH,GACd1H,EAAAA,cAAA,MAAIK,IAAM,GAAEsH,KAAKC,UAAUF,MACzB1H,EAAAA,cAAC6H,EAAAA,EAAI,CACHC,KAAK,IACLpC,QAASjF,IACPA,EAAMsH,iBACNT,GAAoB,EAAK,GAGzB,GAAEzG,EAAQqH,WAAWrH,EAAQsH,YAAYT,sBAKlDL,EACCrH,EAAAA,cAACoI,EAAoB,CACnBzD,MAAOA,EACP9D,QAAS2G,EACT3C,SAAUA,EACVD,YAAaA,KACX0C,GAAoB,EAAM,IAG5B,MAEJ,KAGV,CChFe,SAASe,GAAkB,KACxC7G,EAAI,QACJ3B,IAKA,MAAM,IAAEkB,EAAG,WAAEC,IAAeC,EAAAA,EAAAA,MACrBoB,EAASC,IAAcpB,EAAAA,EAAAA,WAAS,IAChCqB,EAAQC,IAAatB,EAAAA,EAAAA,UAC1BrB,EAAQK,KAAI2B,IAAKY,EAAAA,EAAAA,kBAAiBjB,EAAKtB,KAAIwC,GAAKA,EAAEb,EAAE1B,aAGtD,OAAOqB,EAAKQ,OACVhC,EAAAA,cAAA,OAAKe,IAAKA,GACRf,EAAAA,cAACoD,EAAAA,EAAgB,CACfC,QACErD,EAAAA,cAACsD,EAAAA,EAAQ,CACPjB,QAASA,EACT7B,SAAUC,GAAS6B,EAAW7B,EAAMC,OAAO2B,WAG/CkB,MAAOvD,EAAAA,cAACC,EAAAA,EAAU,CAACuD,QAAQ,SAAQ,kBAErCxD,EAAAA,cAAA,OAAKe,IAAKA,GACRf,EAAAA,cAACyD,EAAAA,EAAS,CACRlB,OAAQA,EACRC,UAAWA,EACXxB,WAAYA,IAEdhB,EAAAA,cAAC0D,EAAAA,GAAQ,CACPG,UAAW,GACXrC,KAAMA,EACN3B,QAASA,EAAQK,KAAI,CAACoI,EAAGC,KAAM,IAAMD,EAAGvF,MAAOR,EAAOgG,OACtDvE,MAAO,CAAEC,QAAS5B,EAAU6B,EAAAA,EAAc,UAI9C,IACN,CC/Ce,SAASsE,GAAuB,KAC7CC,EAAI,OACJC,EAAM,MACNxF,IAMA,OAAOuF,EAAKzG,OACVhC,EAAAA,cAACgD,EAAAA,SAAQ,CAACE,MAAOA,GACflD,EAAAA,cAAC2I,EAAS,CACRnH,KACEiH,EAAKvI,KAAI,CAAC0I,EAAK7G,KAAO,CACpBA,QACGV,OAAOO,YAAYgH,EAAIC,MAAM,KAAK3I,KAAI,CAAC2B,EAAG0G,IAAM,CAACG,EAAOH,GAAI1G,WAC1D,GAEThC,QAAS6I,EAAOxI,KAAIoI,IAAK,CAAGnI,MAAOmI,SAGrC,IACN,C,oOCdA,MAAMQ,EAAoB,CACxBC,MAAO,sDACPC,IAAK,wEACLC,GAAI,8EACJC,IAAK,4EACLC,IAAK,6EACLC,KAAM,oEACNC,OACE,oIAGJ,SAASC,GAAS,aAChBxI,EAAY,QACZD,IAKA,MAAM0I,EAAUzI,GAAc0I,MAAMC,KAAK3G,YACnC4G,EACJH,GAASpH,MAAM,sCAAsC,GAAG0G,MAAM,MAAQ,GAClEc,EAAM9I,EAAQ2I,MAAMC,KAAO,GACjC,OACEzJ,EAAAA,cAACwI,EAAsB,CACrBE,OAAQgB,EACRjB,KAAMkB,EACNzG,MAAM,qBAGZ,CAEA,SAAS0G,GAAS,aAChB9I,EAAY,QACZD,IAKA,MAAMgJ,EAAiB/I,GAAc0I,MAAMM,KAAKhH,YAC1CiH,EACJF,GAAgB1H,MAAM,oBAAoB,GAAG0G,MAAM,MAAQ,GACvDmB,EAAMnJ,EAAQ2I,MAAMM,KAAO,GACjC,OACE9J,EAAAA,cAACwI,EAAsB,CACrBE,OAAQqB,EACRtB,KAAMuB,EACN9G,MAAM,qBAGZ,CAEA,MAgDA,GAhD6BwB,EAAAA,EAAAA,WAAS,SAAU9D,GAM9C,MAAM,MAAE+D,GAAU/D,GACZ,YAAE4F,EAAW,aAAE1F,GAAiB6D,EAChCsF,EAAOtC,KAAKuC,MAAMvC,KAAKC,UAAUpB,KACjC,QAAErF,KAAYgJ,GAASF,EAE7B,OACEjK,EAAAA,cAACoK,EAAAA,EAAK,CAAC,cAAY,uBACjBpK,EAAAA,cAACqK,EAAAA,eAAcpH,EAAA,CACbpC,QAASsJ,EACTrJ,aAAc,IAAKgI,KAAsBhI,IACrCF,IAENZ,EAAAA,cAACsK,EAAAA,EAAO,MACRtK,EAAAA,cAAC4J,EAAQ,CAAC/I,QAASsJ,EAAMrJ,aAAcA,IACvCd,EAAAA,cAACsK,EAAAA,EAAO,MACRtK,EAAAA,cAACsJ,EAAQ,CAACzI,QAASsJ,EAAMrJ,aAAcA,IACvCd,EAAAA,cAACsK,EAAAA,EAAO,MACO,aAAdL,EAAKM,KACJvK,EAAAA,cAACiH,EAAa,CACZpG,QAASoJ,EACT/C,WAAY+C,EAAKd,IAAIjJ,KAClBsK,IAAgBC,EAAAA,EAAAA,GAAcD,IAAME,cAAgB,KAEvD/F,MAAOA,IAEP,KACW,kBAAdsF,EAAKM,KACJvK,EAAAA,cAACiH,EAAa,CACZpG,QAASoJ,EACTtF,MAAOA,EACPuC,WAAY,CAAE,GAAE+C,EAAKT,KAAKmB,KAAK,MAAMV,EAAKT,KAAKoB,SAE/C,KACJ5K,EAAAA,cAAC6K,EAAiB5H,EAAA,CAChBpC,QAASoJ,GACLrJ,EAAK,CACTE,aAAcA,KAItB,G","sources":["../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/BreakendOptionDialog.tsx","../../../plugins/variants/src/VariantFeatureWidget/BreakendPanel.tsx","../../../plugins/variants/src/VariantFeatureWidget/AnnotGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantAnnotationTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport {\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Typography,\n} from '@mui/material'\n\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { measureGridWidth, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport ResizeBar from '@jbrowse/core/ui/ResizeBar'\nimport { useResizeBar } from '@jbrowse/core/ui/useResizeBar'\n\ninterface Entry {\n  sample: string\n  id: string\n  [key: string]: string\n}\n\ntype InfoFields = Record<string, unknown>\ntype Filters = Record<string, string>\n\nfunction SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event =>\n            setFilter({ ...filter, [field]: event.target.value })\n          }\n        />\n      ))}\n    </>\n  )\n}\n\nexport default function VariantSamples(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: { FORMAT?: Record<string, { Description?: string }> } | null\n}) {\n  const { feature, descriptions = {} } = props\n  const { ref, scrollLeft } = useResizeBar()\n  const [filter, setFilter] = useState<Filters>({})\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const preFilteredRows = Object.entries(samples)\n\n  let error\n  let rows = [] as Entry[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(row => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(row[1]).map(e => [e[0], `${e[1]}`]),\n          ),\n          sample: row[0],\n          id: row[0],\n        } as Entry\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? row[key].match(new RegExp(currFilter, 'i'))\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    error = e\n  }\n\n  const keys = ['sample', ...Object.keys(preFilteredRows[0]?.[1] || {})]\n  const [checked, setChecked] = useState(false)\n  const [widths, setWidths] = useState(\n    keys.map(e => measureGridWidth(rows.map(r => r[e]))),\n  )\n  const columns = keys.map((field, index) => ({\n    field,\n    description: descriptions?.FORMAT?.[field]?.Description,\n    width: widths[index],\n  }))\n\n  // disableRowSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return !preFilteredRows.length ? null : (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => setChecked(event.target.checked)}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n      {checked ? (\n        <SampleFilters\n          setFilter={setFilter}\n          columns={columns}\n          filter={filter}\n        />\n      ) : null}\n      <div ref={ref}>\n        <ResizeBar\n          widths={widths}\n          setWidths={setWidths}\n          scrollLeft={scrollLeft}\n        />\n        <DataGrid\n          rows={rows}\n          hideFooter={rows.length < 100}\n          columns={columns}\n          disableRowSelectionOnClick\n          rowHeight={25}\n          columnHeaderHeight={35}\n          disableColumnMenu\n          slots={{ toolbar: checked ? GridToolbar : null }}\n          slotProps={{\n            toolbar: { printOptions: { disableToolbarButton: true } },\n          }}\n        />\n      </div>\n    </BaseCard>\n  )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { getSnapshot } from 'mobx-state-tree'\n// jbrowse\nimport { Dialog } from '@jbrowse/core/ui'\nimport { getSession, Feature } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()({\n  block: {\n    display: 'block',\n  },\n})\n\nconst BreakendOptionDialog = observer(function ({\n  model,\n  handleClose,\n  feature,\n  viewType,\n}: {\n  model: any\n  handleClose: () => void\n  feature: Feature\n  viewType: any\n}) {\n  const { classes } = useStyles()\n  const [copyTracks, setCopyTracks] = useState(true)\n  const [mirrorTracks, setMirrorTracks] = useState(true)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Breakpoint split view options\">\n      <DialogContent>\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={copyTracks}\n              onChange={event => setCopyTracks(event.target.checked)}\n            />\n          }\n          label=\"Copy tracks into the new view\"\n        />\n\n        <FormControlLabel\n          className={classes.block}\n          control={\n            <Checkbox\n              checked={mirrorTracks}\n              onChange={event => setMirrorTracks(event.target.checked)}\n            />\n          }\n          label=\"Mirror tracks vertically in vertically stacked view\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const { view } = model\n            const session = getSession(model)\n            try {\n              const viewSnapshot = viewType.snapshotFromBreakendFeature(\n                feature,\n                view,\n              )\n\n              interface Track {\n                trackId: string\n                [key: string]: unknown\n              }\n              function remapIds(arr: Track[]) {\n                return arr.map(v => ({\n                  ...v,\n                  id: `${v.trackId}-${Math.random()}`,\n                }))\n              }\n              viewSnapshot.views[0].offsetPx -= view.width / 2 + 100\n              viewSnapshot.views[1].offsetPx -= view.width / 2 + 100\n              viewSnapshot.featureData = feature\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n              const viewTracks = getSnapshot(view.tracks) as Track[]\n              viewSnapshot.views[0].tracks = remapIds(viewTracks)\n              viewSnapshot.views[1].tracks = remapIds(\n                mirrorTracks ? [...viewTracks].reverse() : viewTracks,\n              )\n\n              session.addView('BreakpointSplitView', viewSnapshot)\n            } catch (e) {\n              console.error(e)\n              session.notify(`${e}`)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n        <Button\n          onClick={() => handleClose()}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default BreakendOptionDialog\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from 'react'\nimport { Link, Typography } from '@mui/material'\nimport SimpleFeature, {\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport BreakendOptionDialog from './BreakendOptionDialog'\n\nexport default function BreakendPanel(props: {\n  locStrings: string[]\n  model: any\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  const [breakpointDialog, setBreakpointDialog] = useState(false)\n  let viewType\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  const simpleFeature = new SimpleFeature(feature)\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <Typography>Link to linear view of breakend endpoints</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={`${JSON.stringify(locString)}`}>\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              {`LGV - ${locString}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {viewType ? (\n        <div>\n          <Typography>\n            Launch split views with breakend source and target\n          </Typography>\n          <ul>\n            {locStrings.map(locString => (\n              <li key={`${JSON.stringify(locString)}`}>\n                <Link\n                  href=\"#\"\n                  onClick={event => {\n                    event.preventDefault()\n                    setBreakpointDialog(true)\n                  }}\n                >\n                  {`${feature.refName}:${feature.start} // ${locString} (split view)`}\n                </Link>\n              </li>\n            ))}\n          </ul>\n          {breakpointDialog ? (\n            <BreakendOptionDialog\n              model={model}\n              feature={simpleFeature}\n              viewType={viewType}\n              handleClose={() => {\n                setBreakpointDialog(false)\n              }}\n            />\n          ) : null}\n        </div>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  DataGrid,\n  GridColDef,\n  GridToolbar,\n  GridValidRowModel,\n} from '@mui/x-data-grid'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport ResizeBar from '@jbrowse/core/ui/ResizeBar'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { useResizeBar } from '@jbrowse/core/ui/useResizeBar'\n\nexport default function VariantAnnotPanel({\n  rows,\n  columns,\n}: {\n  rows: GridValidRowModel[]\n  columns: GridColDef[]\n}) {\n  const { ref, scrollLeft } = useResizeBar()\n  const [checked, setChecked] = useState(false)\n  const [widths, setWidths] = useState(\n    columns.map(e => measureGridWidth(rows.map(r => r[e.field]))),\n  )\n\n  return rows.length ? (\n    <div ref={ref}>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => setChecked(event.target.checked)}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n      <div ref={ref}>\n        <ResizeBar\n          widths={widths}\n          setWidths={setWidths}\n          scrollLeft={scrollLeft}\n        />\n        <DataGrid\n          rowHeight={25}\n          rows={rows}\n          columns={columns.map((c, i) => ({ ...c, width: widths[i] }))}\n          slots={{ toolbar: checked ? GridToolbar : null }}\n        />\n      </div>\n    </div>\n  ) : null\n}\n","import React from 'react'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport AnnotGrid from './AnnotGrid'\n\nexport default function VariantAnnotationTable({\n  data,\n  fields,\n  title,\n}: {\n  data: string[]\n  fields: string[]\n  title: string\n}) {\n  return data.length ? (\n    <BaseCard title={title}>\n      <AnnotGrid\n        rows={\n          data.map((elt, id) => ({\n            id,\n            ...Object.fromEntries(elt.split('|').map((e, i) => [fields[i], e])),\n          })) || []\n        }\n        columns={fields.map(c => ({ field: c }))}\n      />\n    </BaseCard>\n  ) : null\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Divider, Paper } from '@mui/material'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { parseBreakend } from '@gmod/vcf'\n\n// locals\nimport VariantSampleGrid from './VariantSampleGrid'\nimport BreakendPanel from './BreakendPanel'\nimport VariantAnnotationTable from './VariantAnnotationTable'\nimport { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\nconst basicDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions: { INFO?: { ANN?: { Description?: string } } }\n  feature: { INFO?: { ANN?: string[] } }\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1].split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantAnnotationTable\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions: { INFO?: { CSQ?: { Description?: string } } }\n  feature: { INFO?: { CSQ?: string[] } }\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1].split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantAnnotationTable\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: {\n    featureData: SimpleFeatureSerialized\n    descriptions: Record<string, string>\n  }\n}) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ...rest } = feat\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...basicDescriptions, ...descriptions }}\n        {...props}\n      />\n      <Divider />\n      <CsqPanel feature={rest} descriptions={descriptions} />\n      <Divider />\n      <AnnPanel feature={rest} descriptions={descriptions} />\n      <Divider />\n      {feat.type === 'breakend' ? (\n        <BreakendPanel\n          feature={feat}\n          locStrings={feat.ALT.map(\n            (alt: string) => parseBreakend(alt)?.MatePosition || '',\n          )}\n          model={model}\n        />\n      ) : null}\n      {feat.type === 'translocation' ? (\n        <BreakendPanel\n          feature={feat}\n          model={model}\n          locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n        />\n      ) : null}\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nexport default VariantFeatureWidget\n"],"names":["SampleFilters","columns","filter","setFilter","React","Typography","map","field","TextField","key","placeholder","value","onChange","event","target","VariantSamples","props","feature","descriptions","ref","scrollLeft","useResizeBar","useState","samples","preFilteredRows","Object","entries","error","rows","filters","keys","row","fromEntries","e","sample","id","length","every","currFilter","match","RegExp","checked","setChecked","widths","setWidths","measureGridWidth","r","index","description","FORMAT","Description","width","BaseCard","_extends","title","color","FormControlLabel","control","Checkbox","label","variant","ResizeBar","DataGrid","hideFooter","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","disableColumnMenu","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","useStyles","makeStyles","block","display","observer","model","handleClose","viewType","classes","copyTracks","setCopyTracks","mirrorTracks","setMirrorTracks","Dialog","open","onClose","DialogContent","className","DialogActions","Button","onClick","view","session","getSession","viewSnapshot","snapshotFromBreakendFeature","remapIds","arr","v","trackId","Math","random","views","offsetPx","featureData","viewTracks","getSnapshot","tracks","reverse","addView","console","notify","autoFocus","BreakendPanel","locStrings","pluginManager","getEnv","breakpointDialog","setBreakpointDialog","getViewType","simpleFeature","SimpleFeature","locString","JSON","stringify","Link","href","preventDefault","Error","navToLocString","refName","start","BreakendOptionDialog","VariantAnnotPanel","c","i","VariantAnnotationTable","data","fields","AnnotGrid","elt","split","basicDescriptions","CHROM","POS","ID","REF","ALT","QUAL","FILTER","AnnPanel","annDesc","INFO","ANN","annFields","ann","CsqPanel","csqDescription","CSQ","csqFields","csq","feat","parse","rest","Paper","FeatureDetails","Divider","type","alt","parseBreakend","MatePosition","CHR2","END","VariantSampleGrid"],"sourceRoot":""}