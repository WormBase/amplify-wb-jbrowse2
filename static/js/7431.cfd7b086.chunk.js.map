{"version":3,"file":"static/js/7431.cfd7b086.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/bam/src/virtualOffset.ts","../../../node_modules/@gmod/bam/src/chunk.ts","../../../node_modules/@gmod/bam/src/util.ts","../../../node_modules/@gmod/bam/src/indexFile.ts","../../../node_modules/@gmod/bam/src/bai.ts","../../../node_modules/@gmod/bam/src/csi.ts","../../../node_modules/@gmod/bam/src/constants.ts","../../../node_modules/@gmod/bam/src/record.ts","../../../node_modules/@gmod/bam/src/sam.ts","../../../node_modules/@gmod/bam/src/bamFile.ts","../../../node_modules/@gmod/bam/src/htsget.ts","../../../node_modules/abortable-promise-cache/esm/AbortablePromiseCache.js","../../../node_modules/abortable-promise-cache/esm/AggregateAbortController.js","../../../node_modules/abortable-promise-cache/esm/AggregateStatusReporter.js","../../../node_modules/abortable-promise-cache/esm/abortcontroller-ponyfill.js","../../../node_modules/abortable-promise-cache/esm/index.js","../../../node_modules/@babel/runtime/helpers/esm/OverloadYield.js","../../../node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../../../node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../../../node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../../../node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../../../node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js"],"sourcesContent":["export default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Buffer, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public buffer?: Buffer\n\n  constructor(\n    public minv: VirtualOffset,\n    public maxv: VirtualOffset,\n    public bin: number,\n    public _fetchedSize?: number,\n  ) {}\n\n  toUniqueString() {\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import Long from 'long'\nimport Chunk from './chunk'\nimport VirtualOffset from './virtualOffset'\n\nexport function timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function longToNumber(long: Long) {\n  if (\n    long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n    long.lessThan(Number.MIN_SAFE_INTEGER)\n  ) {\n    throw new Error('integer overflow')\n  }\n  return long.toNumber()\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new Error('aborted')\n      //@ts-ignore\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport interface BamOpts {\n  viewAsPairs?: boolean\n  pairAcrossChr?: boolean\n  maxInsertSize?: number\n  signal?: AbortSignal\n}\n\nexport interface BaseOpts {\n  signal?: AbortSignal\n}\n\nexport function makeOpts(obj: AbortSignal | BaseOpts = {}): BaseOpts {\n  return 'aborted' in obj ? ({ signal: obj } as BaseOpts) : (obj as BaseOpts)\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest?: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | undefined\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort((c0, c1) => {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif === 0 ? c0.minv.dataPosition - c1.minv.dataPosition : dif\n  })\n\n  for (const chunk of chunks) {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === undefined) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  }\n\n  return mergedChunks\n}\n\nexport function parsePseudoBin(bytes: Buffer, offset: number) {\n  const lineCount = longToNumber(\n    Long.fromBytesLE(\n      Array.prototype.slice.call(bytes, offset, offset + 8),\n      true,\n    ),\n  )\n  return { lineCount }\n}\n\nexport function findFirstData(\n  firstDataLine: VirtualOffset | undefined,\n  virtualOffset: VirtualOffset,\n) {\n  return firstDataLine\n    ? firstDataLine.compareTo(virtualOffset) > 0\n      ? virtualOffset\n      : firstDataLine\n    : virtualOffset\n}\n\nexport function parseNameBytes(\n  namesBytes: Buffer,\n  renameRefSeq: (arg: string) => string = s => s,\n) {\n  let currRefId = 0\n  let currNameStart = 0\n  const refIdToName = []\n  const refNameToId: { [key: string]: number } = {}\n  for (let i = 0; i < namesBytes.length; i += 1) {\n    if (!namesBytes[i]) {\n      if (currNameStart < i) {\n        let refName = namesBytes.toString('utf8', currNameStart, i)\n        refName = renameRefSeq(refName)\n        refIdToName[currRefId] = refName\n        refNameToId[refName] = currRefId\n      }\n      currNameStart = i + 1\n      currRefId += 1\n    }\n  }\n  return { refNameToId, refIdToName }\n}\n","import { GenericFilehandle } from 'generic-filehandle'\nimport Chunk from './chunk'\nimport { BaseOpts } from './util'\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (s: string) => string\n\n  /**\n   * @param {filehandle} filehandle\n   * @param {function} [renameRefSeqs]\n   */\n  constructor({\n    filehandle,\n    renameRefSeq = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeq?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeq\n  }\n  public abstract lineCount(refId: number): Promise<number>\n  public abstract indexCov(\n    refId: number,\n    start?: number,\n    end?: number,\n  ): Promise<{ start: number; end: number; score: number }[]>\n\n  public abstract blocksForRange(\n    chrId: number,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ): Promise<Chunk[]>\n}\n","import VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\n\nimport { optimizeChunks, parsePseudoBin, findFirstData, BaseOpts } from './util'\nimport IndexFile from './indexFile'\n\nconst BAI_MAGIC = 21578050 // BAI\\1\n\nfunction roundDown(n: number, multiple: number) {\n  return n - (n % multiple)\n}\nfunction roundUp(n: number, multiple: number) {\n  return n - (n % multiple) + multiple\n}\n\nfunction reg2bins(beg: number, end: number) {\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ]\n}\n\nexport default class BAI extends IndexFile {\n  public setupP?: ReturnType<BAI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  // fetch and parse the index\n  async _parse(opts?: BaseOpts) {\n    const bytes = (await this.filehandle.readFile(opts)) as Buffer\n\n    // check BAI magic numbers\n    if (bytes.readUInt32LE(0) !== BAI_MAGIC) {\n      throw new Error('Not a BAI file')\n    }\n\n    const refCount = bytes.readInt32LE(4)\n    const depth = 5\n    const binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7\n\n    // read the indexes for each reference sequence\n    let curr = 8\n    let firstDataLine: VirtualOffset | undefined\n\n    type BinIndex = { [key: string]: Chunk[] }\n    type LinearIndex = VirtualOffset[]\n    const indices = new Array<{\n      binIndex: BinIndex\n      linearIndex: LinearIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n      const binCount = bytes.readInt32LE(curr)\n      let stats\n\n      curr += 4\n      const binIndex: { [key: number]: Chunk[] } = {}\n\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = bytes.readUInt32LE(curr)\n        curr += 4\n        if (bin === binLimit + 1) {\n          curr += 4\n          stats = parsePseudoBin(bytes, curr + 16)\n          curr += 32\n        } else if (bin > binLimit + 1) {\n          throw new Error('bai index contains too many bins, please use CSI')\n        } else {\n          const chunkCount = bytes.readInt32LE(curr)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k++) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      const linearCount = bytes.readInt32LE(curr)\n      curr += 4\n      // as we're going through the linear index, figure out the smallest\n      // virtual offset in the indexes, which tells us where the BAM header\n      // ends\n      const linearIndex = new Array<VirtualOffset>(linearCount)\n      for (let j = 0; j < linearCount; j++) {\n        const offset = fromBytes(bytes, curr)\n        curr += 8\n        firstDataLine = findFirstData(firstDataLine, offset)\n        linearIndex[j] = offset\n      }\n\n      indices[i] = { binIndex, linearIndex, stats }\n    }\n\n    return {\n      bai: true,\n      firstDataLine,\n      maxBlockSize: 1 << 16,\n      indices,\n      refCount,\n    }\n  }\n\n  async indexCov(\n    seqId: number,\n    start?: number,\n    end?: number,\n    opts: BaseOpts = {},\n  ): Promise<{ start: number; end: number; score: number }[]> {\n    const v = 16384\n    const range = start !== undefined\n    const indexData = await this.parse(opts)\n    const seqIdx = indexData.indices[seqId]\n    if (!seqIdx) {\n      return []\n    }\n    const { linearIndex = [], stats } = seqIdx\n    if (linearIndex.length === 0) {\n      return []\n    }\n    const e = end === undefined ? (linearIndex.length - 1) * v : roundUp(end, v)\n    const s = start === undefined ? 0 : roundDown(start, v)\n    const depths = range\n      ? new Array((e - s) / v)\n      : new Array(linearIndex.length - 1)\n    const totalSize = linearIndex[linearIndex.length - 1].blockPosition\n    if (e > (linearIndex.length - 1) * v) {\n      throw new Error('query outside of range of linear index')\n    }\n    let currentPos = linearIndex[s / v].blockPosition\n    for (let i = s / v, j = 0; i < e / v; i++, j++) {\n      depths[j] = {\n        score: linearIndex[i + 1].blockPosition - currentPos,\n        start: i * v,\n        end: i * v + v,\n      }\n      currentPos = linearIndex[i + 1].blockPosition\n    }\n    return depths.map(d => ({\n      ...d,\n      score: (d.score * (stats?.lineCount || 0)) / totalSize,\n    }))\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    if (!indexData) {\n      return []\n    }\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // List of bin #s that overlap min, max\n    const overlappingBins = reg2bins(min, max)\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const binChunk of binChunks) {\n            chunks.push(binChunk)\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest: VirtualOffset | undefined\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp && (!lowest || vp.compareTo(lowest) < 0)) {\n        lowest = vp\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport {\n  optimizeChunks,\n  findFirstData,\n  parsePseudoBin,\n  parseNameBytes,\n  BaseOpts,\n} from './util'\n\nimport IndexFile from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber = 0\n  private depth = 0\n  private minShift = 0\n\n  public setupP?: ReturnType<CSI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  async indexCov() {\n    return []\n  }\n\n  parseAuxData(bytes: Buffer, offset: number) {\n    const formatFlags = bytes.readInt32LE(offset)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = (\n      { 0: 'generic', 1: 'SAM', 2: 'VCF' } as {\n        [key: number]: string\n      }\n    )[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: bytes.readInt32LE(offset + 4),\n      start: bytes.readInt32LE(offset + 8),\n      end: bytes.readInt32LE(offset + 12),\n    }\n    const metaValue = bytes.readInt32LE(offset + 16)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : ''\n    const skipLines = bytes.readInt32LE(offset + 20)\n    const nameSectionLength = bytes.readInt32LE(offset + 24)\n\n    return {\n      columnNumbers,\n      coordinateType,\n      metaValue,\n      metaChar,\n      skipLines,\n      format,\n      formatFlags,\n      ...parseNameBytes(\n        bytes.subarray(offset + 28, offset + 28 + nameSectionLength),\n        this.renameRefSeq,\n      ),\n    }\n  }\n\n  // fetch and parse the index\n  async _parse(opts: { signal?: AbortSignal }) {\n    const buffer = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buffer)\n\n    let csiVersion\n    // check TBI magic numbers\n    if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = bytes.readInt32LE(4)\n    this.depth = bytes.readInt32LE(8)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const auxLength = bytes.readInt32LE(12)\n    const aux = auxLength >= 30 ? this.parseAuxData(bytes, 16) : undefined\n    const refCount = bytes.readInt32LE(16 + auxLength)\n\n    type BinIndex = { [key: string]: Chunk[] }\n\n    // read the indexes for each reference sequence\n    let curr = 16 + auxLength + 4\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array<{\n      binIndex: BinIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n      const binCount = bytes.readInt32LE(curr)\n      curr += 4\n      const binIndex: { [key: string]: Chunk[] } = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j++) {\n        const bin = bytes.readUInt32LE(curr)\n        curr += 4\n        if (bin > this.maxBinNumber) {\n          stats = parsePseudoBin(bytes, curr + 28)\n          curr += 28 + 16\n        } else {\n          firstDataLine = findFirstData(firstDataLine, fromBytes(bytes, curr))\n          curr += 8\n          const chunkCount = bytes.readInt32LE(curr)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      indices[i] = { binIndex, stats }\n    }\n\n    return {\n      csiVersion,\n      firstDataLine,\n      indices,\n      refCount,\n      csi: true,\n      maxBlockSize: 1 << 16,\n      ...aux,\n    }\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const ba = indexData?.indices[refId]\n    if (!ba) {\n      return []\n    }\n    const overlappingBins = this.reg2bins(min, max)\n\n    if (overlappingBins.length === 0) {\n      return []\n    }\n\n    const chunks = []\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const c of binChunks) {\n            chunks.push(c)\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end)\n   * (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e])\n    }\n    return bins\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","export default {\n  //  the read is paired in sequencing, no matter whether it is mapped in a pair\n  BAM_FPAIRED: 1,\n  //  the read is mapped in a proper pair\n  BAM_FPROPER_PAIR: 2,\n  //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n  BAM_FUNMAP: 4,\n  //  the mate is unmapped\n  BAM_FMUNMAP: 8,\n  //  the read is mapped to the reverse strand\n  BAM_FREVERSE: 16,\n  //  the mate is mapped to the reverse strand\n  BAM_FMREVERSE: 32,\n  //  this is read1\n  BAM_FREAD1: 64,\n  //  this is read2\n  BAM_FREAD2: 128,\n  //  not primary alignment\n  BAM_FSECONDARY: 256,\n  //  QC failure\n  BAM_FQCFAIL: 512,\n  //  optical or PCR duplicate\n  BAM_FDUP: 1024,\n  //  supplementary alignment\n  BAM_FSUPPLEMENTARY: 2048,\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport Constants from './constants'\n\nconst SEQRET_DECODER = '=ACMGRSVTWYHKDBN'.split('')\nconst CIGAR_DECODER = 'MIDNSHP=X???????'.split('')\n\n/**\n * Class of each BAM record returned by this API.\n */\nexport default class BamRecord {\n  private data = {} as { [key: string]: any }\n  private bytes: { start: number; end: number; byteArray: Buffer }\n  private _id: number\n  private _tagOffset: number | undefined\n  private _tagList: string[] = []\n  private _allTagsParsed = false\n\n  public flags: any\n  public _refID: number\n  constructor(args: any) {\n    const { bytes, fileOffset } = args\n    const { byteArray, start } = bytes\n    this.data = {}\n    this.bytes = bytes\n    this._id = fileOffset\n    this._refID = byteArray.readInt32LE(start + 4)\n    this.data.start = byteArray.readInt32LE(start + 8)\n    this.flags = (byteArray.readInt32LE(start + 16) & 0xffff0000) >> 16\n  }\n\n  get(field: string) {\n    //@ts-ignore\n    if (this[field]) {\n      //@ts-ignore\n      if (this.data[field]) {\n        return this.data[field]\n      }\n      //@ts-ignore\n      this.data[field] = this[field]()\n      return this.data[field]\n    }\n    return this._get(field.toLowerCase())\n  }\n\n  end() {\n    return this.get('start') + this.get('length_on_ref')\n  }\n\n  seq_id() {\n    return this._refID\n  }\n\n  // same as get(), except requires lower-case arguments.  used\n  // internally to save lots of calls to field.toLowerCase()\n  _get(field: string) {\n    if (field in this.data) {\n      return this.data[field]\n    }\n    this.data[field] = this._parseTag(field)\n    return this.data[field]\n  }\n\n  _tags() {\n    this._parseAllTags()\n\n    let tags = ['seq']\n\n    if (!this.isSegmentUnmapped()) {\n      tags.push(\n        'start',\n        'end',\n        'strand',\n        'score',\n        'qual',\n        'MQ',\n        'CIGAR',\n        'length_on_ref',\n        'template_length',\n      )\n    }\n    if (this.isPaired()) {\n      tags.push('next_segment_position', 'pair_orientation')\n    }\n    tags = tags.concat(this._tagList || [])\n\n    for (const k of Object.keys(this.data)) {\n      if (k[0] !== '_' && k !== 'next_seq_id') {\n        tags.push(k)\n      }\n    }\n\n    const seen: { [key: string]: boolean } = {}\n    return tags.filter(t => {\n      if (\n        (t in this.data && this.data[t] === undefined) ||\n        t === 'CG' ||\n        t === 'cg'\n      ) {\n        return false\n      }\n\n      const lt = t.toLowerCase()\n      const s = seen[lt]\n      seen[lt] = true\n      return !s\n    })\n  }\n\n  parent() {\n    return\n  }\n\n  children() {\n    return this.get('subfeatures')\n  }\n\n  id() {\n    return this._id\n  }\n\n  // special parsers\n  /**\n   * Mapping quality score.\n   */\n  mq() {\n    const mq = (this.get('_bin_mq_nl') & 0xff00) >> 8\n    return mq === 255 ? undefined : mq\n  }\n\n  score() {\n    return this.get('mq')\n  }\n\n  qual() {\n    return this.qualRaw()?.join(' ')\n  }\n\n  qualRaw() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const { start, byteArray } = this.bytes\n    const p =\n      start +\n      36 +\n      this.get('_l_read_name') +\n      this.get('_n_cigar_op') * 4 +\n      this.get('_seq_bytes')\n    const lseq = this.get('seq_length')\n    return byteArray.subarray(p, p + lseq)\n  }\n\n  strand() {\n    return this.isReverseComplemented() ? -1 : 1\n  }\n\n  multi_segment_next_segment_strand() {\n    if (this.isMateUnmapped()) {\n      return\n    }\n    return this.isMateReverseComplemented() ? -1 : 1\n  }\n\n  name() {\n    return this.get('_read_name')\n  }\n\n  _read_name() {\n    const nl = this.get('_l_read_name')\n    const { byteArray, start } = this.bytes\n    return byteArray.toString('ascii', start + 36, start + 36 + nl - 1)\n  }\n\n  /**\n   * Get the value of a tag, parsing the tags as far as necessary.\n   * Only called if we have not already parsed that field.\n   */\n  _parseTag(tagName?: string) {\n    // if all of the tags have been parsed and we're still being\n    // called, we already know that we have no such tag, because\n    // it would already have been cached.\n    if (this._allTagsParsed) {\n      return\n    }\n\n    const { byteArray, start } = this.bytes\n    let p =\n      this._tagOffset ||\n      start +\n        36 +\n        this.get('_l_read_name') +\n        this.get('_n_cigar_op') * 4 +\n        this.get('_seq_bytes') +\n        this.get('seq_length')\n\n    const blockEnd = this.bytes.end\n    let lcTag\n    while (p < blockEnd && lcTag !== tagName) {\n      const tag = String.fromCharCode(byteArray[p], byteArray[p + 1])\n      lcTag = tag.toLowerCase()\n      const type = String.fromCharCode(byteArray[p + 2])\n      p += 3\n\n      let value\n      switch (type) {\n        case 'A': {\n          value = String.fromCharCode(byteArray[p])\n          p += 1\n          break\n        }\n        case 'i': {\n          value = byteArray.readInt32LE(p)\n          p += 4\n          break\n        }\n        case 'I': {\n          value = byteArray.readUInt32LE(p)\n          p += 4\n          break\n        }\n        case 'c': {\n          value = byteArray.readInt8(p)\n          p += 1\n          break\n        }\n        case 'C': {\n          value = byteArray.readUInt8(p)\n          p += 1\n          break\n        }\n        case 's': {\n          value = byteArray.readInt16LE(p)\n          p += 2\n          break\n        }\n        case 'S': {\n          value = byteArray.readUInt16LE(p)\n          p += 2\n          break\n        }\n        case 'f': {\n          value = byteArray.readFloatLE(p)\n          p += 4\n          break\n        }\n        case 'Z':\n        case 'H': {\n          value = ''\n          while (p <= blockEnd) {\n            const cc = byteArray[p++]\n            if (cc === 0) {\n              break\n            } else {\n              value += String.fromCharCode(cc)\n            }\n          }\n          break\n        }\n        case 'B': {\n          value = ''\n          const cc = byteArray[p++]\n          const Btype = String.fromCharCode(cc)\n          const limit = byteArray.readInt32LE(p)\n          p += 4\n          if (Btype === 'i') {\n            if (tag === 'CG') {\n              for (let k = 0; k < limit; k++) {\n                const cigop = byteArray.readInt32LE(p)\n                const lop = cigop >> 4\n                const op = CIGAR_DECODER[cigop & 0xf]\n                value += lop + op\n                p += 4\n              }\n            } else {\n              for (let k = 0; k < limit; k++) {\n                value += byteArray.readInt32LE(p)\n                if (k + 1 < limit) {\n                  value += ','\n                }\n                p += 4\n              }\n            }\n          }\n          if (Btype === 'I') {\n            if (tag === 'CG') {\n              for (let k = 0; k < limit; k++) {\n                const cigop = byteArray.readUInt32LE(p)\n                const lop = cigop >> 4\n                const op = CIGAR_DECODER[cigop & 0xf]\n                value += lop + op\n                p += 4\n              }\n            } else {\n              for (let k = 0; k < limit; k++) {\n                value += byteArray.readUInt32LE(p)\n                if (k + 1 < limit) {\n                  value += ','\n                }\n                p += 4\n              }\n            }\n          }\n          if (Btype === 's') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readInt16LE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 2\n            }\n          }\n          if (Btype === 'S') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readUInt16LE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 2\n            }\n          }\n          if (Btype === 'c') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readInt8(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 1\n            }\n          }\n          if (Btype === 'C') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readUInt8(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 1\n            }\n          }\n          if (Btype === 'f') {\n            for (let k = 0; k < limit; k++) {\n              value += byteArray.readFloatLE(p)\n              if (k + 1 < limit) {\n                value += ','\n              }\n              p += 4\n            }\n          }\n          break\n        }\n        default: {\n          console.warn(`Unknown BAM tag type '${type}', tags may be incomplete`)\n          value = undefined\n          p = blockEnd\n        } // stop parsing tags\n      }\n\n      this._tagOffset = p\n\n      this._tagList.push(tag)\n      if (lcTag === tagName) {\n        return value\n      }\n\n      this.data[lcTag] = value\n    }\n    this._allTagsParsed = true\n    return\n  }\n\n  _parseAllTags() {\n    this._parseTag('')\n  }\n\n  _parseCigar(cigar: string) {\n    return (\n      //@ts-ignore\n      cigar\n        .match(/\\d+\\D/g)\n        //@ts-ignore\n        .map(op => [op.match(/\\D/)[0].toUpperCase(), Number.parseInt(op, 10)])\n    )\n  }\n\n  /**\n   * @returns {boolean} true if the read is paired, regardless of whether both segments are mapped\n   */\n  isPaired() {\n    return !!(this.flags & Constants.BAM_FPAIRED)\n  }\n\n  /** @returns {boolean} true if the read is paired, and both segments are mapped */\n  isProperlyPaired() {\n    return !!(this.flags & Constants.BAM_FPROPER_PAIR)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isSegmentUnmapped() {\n    return !!(this.flags & Constants.BAM_FUNMAP)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isMateUnmapped() {\n    return !!(this.flags & Constants.BAM_FMUNMAP)\n  }\n\n  /** @returns {boolean} true if the read is mapped to the reverse strand */\n  isReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FREVERSE)\n  }\n\n  /** @returns {boolean} true if the mate is mapped to the reverse strand */\n  isMateReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FMREVERSE)\n  }\n\n  /** @returns {boolean} true if this is read number 1 in a pair */\n  isRead1() {\n    return !!(this.flags & Constants.BAM_FREAD1)\n  }\n\n  /** @returns {boolean} true if this is read number 2 in a pair */\n  isRead2() {\n    return !!(this.flags & Constants.BAM_FREAD2)\n  }\n\n  /** @returns {boolean} true if this is a secondary alignment */\n  isSecondary() {\n    return !!(this.flags & Constants.BAM_FSECONDARY)\n  }\n\n  /** @returns {boolean} true if this read has failed QC checks */\n  isFailedQc() {\n    return !!(this.flags & Constants.BAM_FQCFAIL)\n  }\n\n  /** @returns {boolean} true if the read is an optical or PCR duplicate */\n  isDuplicate() {\n    return !!(this.flags & Constants.BAM_FDUP)\n  }\n\n  /** @returns {boolean} true if this is a supplementary alignment */\n  isSupplementary() {\n    return !!(this.flags & Constants.BAM_FSUPPLEMENTARY)\n  }\n\n  cigar() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const { byteArray, start } = this.bytes\n    const numCigarOps = this.get('_n_cigar_op')\n    let p = start + 36 + this.get('_l_read_name')\n    const seqLen = this.get('seq_length')\n    let cigar = ''\n    let lref = 0\n\n    // check for CG tag by inspecting whether the CIGAR field\n    // contains a clip that consumes entire seqLen\n    let cigop = byteArray.readInt32LE(p)\n    let lop = cigop >> 4\n    let op = CIGAR_DECODER[cigop & 0xf]\n    if (op === 'S' && lop === seqLen) {\n      // if there is a CG the second CIGAR field will\n      // be a N tag the represents the length on ref\n      p += 4\n      cigop = byteArray.readInt32LE(p)\n      lop = cigop >> 4\n      op = CIGAR_DECODER[cigop & 0xf]\n      if (op !== 'N') {\n        console.warn('CG tag with no N tag')\n      }\n      this.data.length_on_ref = lop\n      return this.get('CG')\n    } else {\n      for (let c = 0; c < numCigarOps; ++c) {\n        cigop = byteArray.readInt32LE(p)\n        lop = cigop >> 4\n        op = CIGAR_DECODER[cigop & 0xf]\n        cigar += lop + op\n\n        // soft clip, hard clip, and insertion don't count toward\n        // the length on the reference\n        if (op !== 'H' && op !== 'S' && op !== 'I') {\n          lref += lop\n        }\n\n        p += 4\n      }\n\n      this.data.length_on_ref = lref\n      return cigar\n    }\n  }\n\n  _flags() {}\n\n  length_on_ref() {\n    if (this.data.length_on_ref) {\n      return this.data.length_on_ref\n    } else {\n      this.get('cigar') // the length_on_ref is set as a side effect\n      return this.data.length_on_ref\n    }\n  }\n\n  _n_cigar_op() {\n    return this.get('_flag_nc') & 0xffff\n  }\n\n  _l_read_name() {\n    return this.get('_bin_mq_nl') & 0xff\n  }\n\n  /**\n   * number of bytes in the sequence field\n   */\n  _seq_bytes() {\n    return (this.get('seq_length') + 1) >> 1\n  }\n\n  getReadBases() {\n    return this.seq()\n  }\n\n  seq() {\n    const { byteArray, start } = this.bytes\n    const p =\n      start + 36 + this.get('_l_read_name') + this.get('_n_cigar_op') * 4\n    const seqBytes = this.get('_seq_bytes')\n    const len = this.get('seq_length')\n    let buf = ''\n    let i = 0\n    for (let j = 0; j < seqBytes; ++j) {\n      const sb = byteArray[p + j]\n      buf += SEQRET_DECODER[(sb & 0xf0) >> 4]\n      i++\n      if (i < len) {\n        buf += SEQRET_DECODER[sb & 0x0f]\n        i++\n      }\n    }\n    return buf\n  }\n\n  // adapted from igv.js\n  getPairOrientation() {\n    if (\n      !this.isSegmentUnmapped() &&\n      !this.isMateUnmapped() &&\n      this._refID === this._next_refid()\n    ) {\n      const s1 = this.isReverseComplemented() ? 'R' : 'F'\n      const s2 = this.isMateReverseComplemented() ? 'R' : 'F'\n      let o1 = ' '\n      let o2 = ' '\n      if (this.isRead1()) {\n        o1 = '1'\n        o2 = '2'\n      } else if (this.isRead2()) {\n        o1 = '2'\n        o2 = '1'\n      }\n\n      const tmp = []\n      const isize = this.template_length()\n      if (isize > 0) {\n        tmp[0] = s1\n        tmp[1] = o1\n        tmp[2] = s2\n        tmp[3] = o2\n      } else {\n        tmp[2] = s1\n        tmp[3] = o1\n        tmp[0] = s2\n        tmp[1] = o2\n      }\n      return tmp.join('')\n    }\n    return ''\n  }\n\n  _bin_mq_nl() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 12)\n  }\n\n  _flag_nc() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 16)\n  }\n\n  seq_length() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 20)\n  }\n\n  _next_refid() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 24)\n  }\n\n  _next_pos() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 28)\n  }\n\n  template_length() {\n    return this.bytes.byteArray.readInt32LE(this.bytes.start + 32)\n  }\n\n  toJSON() {\n    const data: { [key: string]: any } = {}\n    for (const k of Object.keys(this)) {\n      if (k.charAt(0) === '_' || k === 'bytes') {\n        continue\n      }\n      //@ts-ignore\n      data[k] = this[k]\n    }\n\n    return data\n  }\n}\n","export function parseHeaderText(text: string) {\n  const lines = text.split(/\\r?\\n/)\n  const data: { tag: string; data: { tag: string; value: string }[] }[] = []\n  for (const line of lines) {\n    const [tag, ...fields] = line.split(/\\t/)\n    if (tag) {\n      data.push({\n        tag: tag.slice(1),\n        data: fields.map(f => {\n          const [fieldTag, value] = f.split(':', 2)\n          return { tag: fieldTag, value }\n        }),\n      })\n    }\n  }\n  return data\n}\n","import { Buffer } from 'buffer'\nimport crc32 from 'buffer-crc32'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { LocalFile, RemoteFile, GenericFilehandle } from 'generic-filehandle'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\n\n// locals\nimport BAI from './bai'\nimport CSI from './csi'\nimport Chunk from './chunk'\nimport BAMFeature from './record'\nimport { parseHeaderText } from './sam'\nimport { checkAbortSignal, timeout, makeOpts, BamOpts, BaseOpts } from './util'\n\nexport const BAM_MAGIC = 21840194\n\nconst blockLen = 1 << 16\n\nasync function gen2array<T>(gen: AsyncIterable<T[]>): Promise<T[]> {\n  let out: T[] = []\n  for await (const x of gen) {\n    out = out.concat(x)\n  }\n  return out\n}\n\ninterface Args {\n  chunk: Chunk\n  opts: BaseOpts\n}\n\nclass NullFilehandle {\n  public read(): Promise<any> {\n    throw new Error('never called')\n  }\n  public stat(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public readFile(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public close(): Promise<any> {\n    throw new Error('never called')\n  }\n}\nexport default class BamFile {\n  public renameRefSeq: (a: string) => string\n  public bam: GenericFilehandle\n  public header?: string\n  public chrToIndex?: Record<string, number>\n  public indexToChr?: { refName: string; length: number }[]\n  public yieldThreadTime: number\n  public index?: BAI | CSI\n  public htsget = false\n  public headerP?: ReturnType<BamFile['getHeaderPre']>\n\n  private featureCache = new AbortablePromiseCache<Args, BAMFeature[]>({\n    cache: new QuickLRU({\n      maxSize: 50,\n    }),\n    fill: async (args: Args, signal) => {\n      const { chunk, opts } = args\n      const { data, cpositions, dpositions } = await this._readChunk({\n        chunk,\n        opts: { ...opts, signal },\n      })\n      return this.readBamFeatures(data, cpositions, dpositions, chunk)\n    },\n  })\n\n  constructor({\n    bamFilehandle,\n    bamPath,\n    bamUrl,\n    baiPath,\n    baiFilehandle,\n    baiUrl,\n    csiPath,\n    csiFilehandle,\n    csiUrl,\n    htsget,\n    yieldThreadTime = 100,\n    renameRefSeqs = n => n,\n  }: {\n    bamFilehandle?: GenericFilehandle\n    bamPath?: string\n    bamUrl?: string\n    baiPath?: string\n    baiFilehandle?: GenericFilehandle\n    baiUrl?: string\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    csiUrl?: string\n    renameRefSeqs?: (a: string) => string\n    yieldThreadTime?: number\n    htsget?: boolean\n  }) {\n    this.renameRefSeq = renameRefSeqs\n\n    if (bamFilehandle) {\n      this.bam = bamFilehandle\n    } else if (bamPath) {\n      this.bam = new LocalFile(bamPath)\n    } else if (bamUrl) {\n      this.bam = new RemoteFile(bamUrl)\n    } else if (htsget) {\n      this.htsget = true\n      this.bam = new NullFilehandle()\n    } else {\n      throw new Error('unable to initialize bam')\n    }\n    if (csiFilehandle) {\n      this.index = new CSI({ filehandle: csiFilehandle })\n    } else if (csiPath) {\n      this.index = new CSI({ filehandle: new LocalFile(csiPath) })\n    } else if (csiUrl) {\n      this.index = new CSI({ filehandle: new RemoteFile(csiUrl) })\n    } else if (baiFilehandle) {\n      this.index = new BAI({ filehandle: baiFilehandle })\n    } else if (baiPath) {\n      this.index = new BAI({ filehandle: new LocalFile(baiPath) })\n    } else if (baiUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(baiUrl) })\n    } else if (bamPath) {\n      this.index = new BAI({ filehandle: new LocalFile(`${bamPath}.bai`) })\n    } else if (bamUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(`${bamUrl}.bai`) })\n    } else if (htsget) {\n      this.htsget = true\n    } else {\n      throw new Error('unable to infer index format')\n    }\n    this.yieldThreadTime = yieldThreadTime\n  }\n\n  async getHeaderPre(origOpts?: BaseOpts) {\n    const opts = makeOpts(origOpts)\n    if (!this.index) {\n      return\n    }\n    const indexData = await this.index.parse(opts)\n    const ret = indexData.firstDataLine\n      ? indexData.firstDataLine.blockPosition + 65535\n      : undefined\n    let buffer\n    if (ret) {\n      const s = ret + blockLen\n      const res = await this.bam.read(Buffer.alloc(s), 0, s, 0, opts)\n      if (!res.bytesRead) {\n        throw new Error('Error reading header')\n      }\n      buffer = res.buffer.subarray(0, Math.min(res.bytesRead, ret))\n    } else {\n      buffer = (await this.bam.readFile(opts)) as Buffer\n    }\n\n    const uncba = await unzip(buffer)\n\n    if (uncba.readInt32LE(0) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = uncba.readInt32LE(4)\n\n    this.header = uncba.toString('utf8', 8, 8 + headLen)\n    const { chrToIndex, indexToChr } = await this._readRefSeqs(\n      headLen + 8,\n      65535,\n      opts,\n    )\n    this.chrToIndex = chrToIndex\n    this.indexToChr = indexToChr\n\n    return parseHeaderText(this.header)\n  }\n\n  getHeader(opts?: BaseOpts) {\n    if (!this.headerP) {\n      this.headerP = this.getHeaderPre(opts).catch(e => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  async getHeaderText(opts: BaseOpts = {}) {\n    await this.getHeader(opts)\n    return this.header\n  }\n\n  // the full length of the refseq block is not given in advance so this grabs\n  // a chunk and doubles it if all refseqs haven't been processed\n  async _readRefSeqs(\n    start: number,\n    refSeqBytes: number,\n    opts?: BaseOpts,\n  ): Promise<{\n    chrToIndex: { [key: string]: number }\n    indexToChr: { refName: string; length: number }[]\n  }> {\n    if (start > refSeqBytes) {\n      return this._readRefSeqs(start, refSeqBytes * 2, opts)\n    }\n    const size = refSeqBytes + blockLen\n    const { bytesRead, buffer } = await this.bam.read(\n      Buffer.alloc(size),\n      0,\n      refSeqBytes,\n      0,\n      opts,\n    )\n    if (!bytesRead) {\n      throw new Error('Error reading refseqs from header')\n    }\n    const uncba = await unzip(\n      buffer.subarray(0, Math.min(bytesRead, refSeqBytes)),\n    )\n    const nRef = uncba.readInt32LE(start)\n    let p = start + 4\n    const chrToIndex: { [key: string]: number } = {}\n    const indexToChr: { refName: string; length: number }[] = []\n    for (let i = 0; i < nRef; i += 1) {\n      const lName = uncba.readInt32LE(p)\n      const refName = this.renameRefSeq(\n        uncba.toString('utf8', p + 4, p + 4 + lName - 1),\n      )\n      const lRef = uncba.readInt32LE(p + lName + 4)\n\n      chrToIndex[refName] = i\n      indexToChr.push({ refName, length: lRef })\n\n      p = p + 8 + lName\n      if (p > uncba.length) {\n        console.warn(\n          `BAM header is very big.  Re-fetching ${refSeqBytes} bytes.`,\n        )\n        return this._readRefSeqs(start, refSeqBytes * 2, opts)\n      }\n    }\n    return { chrToIndex, indexToChr }\n  }\n\n  async getRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    return gen2array(this.streamRecordsForRange(chr, min, max, opts))\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    await this.getHeader(opts)\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined || !this.index) {\n      yield []\n    } else {\n      const chunks = await this.index.blocksForRange(chrId, min - 1, max, opts)\n      yield* this._fetchChunkFeatures(chunks, chrId, min, max, opts)\n    }\n  }\n\n  async *_fetchChunkFeatures(\n    chunks: Chunk[],\n    chrId: number,\n    min: number,\n    max: number,\n    opts: BamOpts = {},\n  ) {\n    const { viewAsPairs } = opts\n    const feats = [] as BAMFeature[][]\n    let done = false\n\n    for (const chunk of chunks) {\n      const records = await this.featureCache.get(\n        chunk.toString(),\n        { chunk, opts },\n        opts.signal,\n      )\n\n      const recs = [] as BAMFeature[]\n      for (const feature of records) {\n        if (feature.seq_id() === chrId) {\n          if (feature.get('start') >= max) {\n            // past end of range, can stop iterating\n            done = true\n            break\n          } else if (feature.get('end') >= min) {\n            // must be in range\n            recs.push(feature)\n          }\n        }\n      }\n      feats.push(recs)\n      yield recs\n      if (done) {\n        break\n      }\n    }\n\n    checkAbortSignal(opts.signal)\n    if (viewAsPairs) {\n      yield this.fetchPairs(chrId, feats, opts)\n    }\n  }\n\n  async fetchPairs(chrId: number, feats: BAMFeature[][], opts: BamOpts) {\n    const { pairAcrossChr, maxInsertSize = 200000 } = opts\n    const unmatedPairs: { [key: string]: boolean } = {}\n    const readIds: { [key: string]: number } = {}\n    feats.map(ret => {\n      const readNames: { [key: string]: number } = {}\n      for (const element of ret) {\n        const name = element.name()\n        const id = element.id()\n        if (!readNames[name]) {\n          readNames[name] = 0\n        }\n        readNames[name]++\n        readIds[id] = 1\n      }\n      for (const [k, v] of Object.entries(readNames)) {\n        if (v === 1) {\n          unmatedPairs[k] = true\n        }\n      }\n    })\n\n    const matePromises: Promise<Chunk[]>[] = []\n    feats.map(ret => {\n      for (const f of ret) {\n        const name = f.name()\n        const start = f.get('start')\n        const pnext = f._next_pos()\n        const rnext = f._next_refid()\n        if (\n          this.index &&\n          unmatedPairs[name] &&\n          (pairAcrossChr ||\n            (rnext === chrId && Math.abs(start - pnext) < maxInsertSize))\n        ) {\n          matePromises.push(\n            this.index.blocksForRange(rnext, pnext, pnext + 1, opts),\n          )\n        }\n      }\n    })\n\n    // filter out duplicate chunks (the blocks are lists of chunks, blocks are\n    // concatenated, then filter dup chunks)\n    const map = new Map<string, Chunk>()\n    const res = await Promise.all(matePromises)\n    for (const m of res.flat()) {\n      if (!map.has(m.toString())) {\n        map.set(m.toString(), m)\n      }\n    }\n\n    const mateFeatPromises = await Promise.all(\n      [...map.values()].map(async c => {\n        const { data, cpositions, dpositions, chunk } = await this._readChunk({\n          chunk: c,\n          opts,\n        })\n        const mateRecs = [] as BAMFeature[]\n        for (const feature of await this.readBamFeatures(\n          data,\n          cpositions,\n          dpositions,\n          chunk,\n        )) {\n          if (unmatedPairs[feature.get('name')] && !readIds[feature.id()]) {\n            mateRecs.push(feature)\n          }\n        }\n        return mateRecs\n      }),\n    )\n    return mateFeatPromises.flat()\n  }\n\n  async _readRegion(position: number, size: number, opts: BaseOpts = {}) {\n    const { bytesRead, buffer } = await this.bam.read(\n      Buffer.alloc(size),\n      0,\n      size,\n      position,\n      opts,\n    )\n\n    return buffer.subarray(0, Math.min(bytesRead, size))\n  }\n\n  async _readChunk({ chunk, opts }: { chunk: Chunk; opts: BaseOpts }) {\n    const buffer = await this._readRegion(\n      chunk.minv.blockPosition,\n      chunk.fetchedSize(),\n      opts,\n    )\n\n    const {\n      buffer: data,\n      cpositions,\n      dpositions,\n    } = await unzipChunkSlice(buffer, chunk)\n    return { data, cpositions, dpositions, chunk }\n  }\n\n  async readBamFeatures(\n    ba: Buffer,\n    cpositions: number[],\n    dpositions: number[],\n    chunk: Chunk,\n  ) {\n    let blockStart = 0\n    const sink = [] as BAMFeature[]\n    let pos = 0\n    let last = +Date.now()\n\n    while (blockStart + 4 < ba.length) {\n      const blockSize = ba.readInt32LE(blockStart)\n      const blockEnd = blockStart + 4 + blockSize - 1\n\n      // increment position to the current decompressed status\n      if (dpositions) {\n        while (blockStart + chunk.minv.dataPosition >= dpositions[pos++]) {}\n        pos--\n      }\n\n      // only try to read the feature if we have all the bytes for it\n      if (blockEnd < ba.length) {\n        const feature = new BAMFeature({\n          bytes: {\n            byteArray: ba,\n            start: blockStart,\n            end: blockEnd,\n          },\n          // the below results in an automatically calculated file-offset based\n          // ID if the info for that is available, otherwise crc32 of the\n          // features\n          //\n          // cpositions[pos] refers to actual file offset of a bgzip block\n          // boundaries\n          //\n          // we multiply by (1 <<8) in order to make sure each block has a\n          // \"unique\" address space so that data in that block could never\n          // overlap\n          //\n          // then the blockStart-dpositions is an uncompressed file offset from\n          // that bgzip block boundary, and since the cpositions are multiplied\n          // by (1 << 8) these uncompressed offsets get a unique space\n          //\n          // this has an extra chunk.minv.dataPosition added on because it\n          // blockStart starts at 0 instead of chunk.minv.dataPosition\n          //\n          // the +1 is just to avoid any possible uniqueId 0 but this does not\n          // realistically happen\n          fileOffset:\n            cpositions.length > 0\n              ? cpositions[pos] * (1 << 8) +\n                (blockStart - dpositions[pos]) +\n                chunk.minv.dataPosition +\n                1\n              : // must be slice, not subarray for buffer polyfill on web\n                crc32.signed(ba.slice(blockStart, blockEnd)),\n        })\n\n        sink.push(feature)\n        if (this.yieldThreadTime && +Date.now() - last > this.yieldThreadTime) {\n          await timeout(1)\n          last = +Date.now()\n        }\n      }\n\n      blockStart = blockEnd + 1\n    }\n    return sink\n  }\n\n  async hasRefSeq(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? false : this.index?.hasRefSeq(seqId)\n  }\n\n  async lineCount(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined || !this.index ? 0 : this.index.lineCount(seqId)\n  }\n\n  async indexCov(seqName: string, start?: number, end?: number) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? [] : this.index.indexCov(seqId, start, end)\n  }\n\n  async blocksForRange(\n    seqName: string,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined\n      ? []\n      : this.index.blocksForRange(seqId, start, end, opts)\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport { Buffer } from 'buffer'\nimport { BaseOpts, BamOpts } from './util'\nimport BamFile, { BAM_MAGIC } from './bamFile'\nimport Chunk from './chunk'\nimport { parseHeaderText } from './sam'\n\ninterface HtsgetChunk {\n  url: string\n  headers?: Record<string, string>\n}\nasync function concat(arr: HtsgetChunk[], opts?: Record<string, any>) {\n  const res = await Promise.all(\n    arr.map(async chunk => {\n      const { url, headers } = chunk\n      if (url.startsWith('data:')) {\n        return Buffer.from(url.split(',')[1], 'base64')\n      } else {\n        //remove referer header, it is not even allowed to be specified\n        // @ts-expect-error\n        //eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { referer, ...rest } = headers\n        const res = await fetch(url, {\n          ...opts,\n          headers: { ...opts?.headers, ...rest },\n        })\n        if (!res.ok) {\n          throw new Error(\n            `HTTP ${res.status} fetching ${url}: ${await res.text()}`,\n          )\n        }\n        return Buffer.from(await res.arrayBuffer())\n      }\n    }),\n  )\n\n  return Buffer.concat(await Promise.all(res.map(elt => unzip(elt))))\n}\n\nexport default class HtsgetFile extends BamFile {\n  private baseUrl: string\n\n  private trackId: string\n\n  constructor(args: { trackId: string; baseUrl: string }) {\n    super({ htsget: true })\n    this.baseUrl = args.baseUrl\n    this.trackId = args.trackId\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    const base = `${this.baseUrl}/${this.trackId}`\n    const url = `${base}?referenceName=${chr}&start=${min}&end=${max}&format=BAM`\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined) {\n      yield []\n    } else {\n      const result = await fetch(url, { ...opts })\n      if (!result.ok) {\n        throw new Error(\n          `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n        )\n      }\n      const data = await result.json()\n      const uncba = await concat(data.htsget.urls.slice(1), opts)\n\n      yield* this._fetchChunkFeatures(\n        [\n          // fake stuff to pretend to be a Chunk\n          {\n            buffer: uncba,\n            _fetchedSize: undefined,\n            bin: 0,\n            compareTo() {\n              return 0\n            },\n            toUniqueString() {\n              return `${chr}_${min}_${max}`\n            },\n            fetchedSize() {\n              return 0\n            },\n            minv: {\n              dataPosition: 0,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            maxv: {\n              dataPosition: Number.MAX_SAFE_INTEGER,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            toString() {\n              return `${chr}_${min}_${max}`\n            },\n          },\n        ],\n        chrId,\n        min,\n        max,\n        opts,\n      )\n    }\n  }\n\n  async _readChunk({ chunk }: { chunk: Chunk; opts: BaseOpts }) {\n    if (!chunk.buffer) {\n      throw new Error('expected chunk.buffer in htsget')\n    }\n    return { data: chunk.buffer, cpositions: [], dpositions: [], chunk }\n  }\n\n  async getHeader(opts: BaseOpts = {}) {\n    const url = `${this.baseUrl}/${this.trackId}?referenceName=na&class=header`\n    const result = await fetch(url, opts)\n    if (!result.ok) {\n      throw new Error(\n        `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n      )\n    }\n    const data = await result.json()\n    const uncba = await concat(data.htsget.urls, opts)\n\n    if (uncba.readInt32LE(0) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = uncba.readInt32LE(4)\n    const headerText = uncba.toString('utf8', 8, 8 + headLen)\n    const samHeader = parseHeaderText(headerText)\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ref ID numbers and names\n    const idToName: { refName: string; length: number }[] = []\n    const nameToId: Record<string, number> = {}\n    const sqLines = samHeader.filter(l => l.tag === 'SQ')\n    for (const [refId, sqLine] of sqLines.entries()) {\n      let refName = ''\n      let length = 0\n      for (const item of sqLine.data) {\n        if (item.tag === 'SN') {\n          refName = item.value\n        } else if (item.tag === 'LN') {\n          length = +item.value\n        }\n      }\n      nameToId[refName] = refId\n      idToName[refId] = { refName, length }\n    }\n    this.chrToIndex = nameToId\n    this.indexToChr = idToName\n    return samHeader\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nconst AggregateAbortController_1 = __importDefault(require(\"./AggregateAbortController\"));\nconst AggregateStatusReporter_1 = __importDefault(require(\"./AggregateStatusReporter\"));\nclass AbortablePromiseCache {\n    constructor({ fill, cache, }) {\n        if (typeof fill !== 'function') {\n            throw new TypeError('must pass a fill function');\n        }\n        if (typeof cache !== 'object') {\n            throw new TypeError('must pass a cache object');\n        }\n        if (typeof cache.get !== 'function' ||\n            typeof cache.set !== 'function' ||\n            typeof cache.delete !== 'function') {\n            throw new TypeError('cache must implement get(key), set(key, val), and and delete(key)');\n        }\n        this.cache = cache;\n        this.fillCallback = fill;\n    }\n    static isAbortException(exception) {\n        return (\n        // DOMException\n        exception.name === 'AbortError' ||\n            // standard-ish non-DOM abort exception\n            //@ts-ignore\n            exception.code === 'ERR_ABORTED' ||\n            // stringified DOMException\n            exception.message === 'AbortError: aborted' ||\n            // stringified standard-ish exception\n            exception.message === 'Error: aborted');\n    }\n    evict(key, entry) {\n        if (this.cache.get(key) === entry) {\n            this.cache.delete(key);\n        }\n    }\n    fill(key, data, signal, statusCallback) {\n        const aborter = new AggregateAbortController_1.default();\n        const statusReporter = new AggregateStatusReporter_1.default();\n        statusReporter.addCallback(statusCallback);\n        const newEntry = {\n            aborter: aborter,\n            promise: this.fillCallback(data, aborter.signal, (message) => {\n                statusReporter.callback(message);\n            }),\n            settled: false,\n            statusReporter,\n            get aborted() {\n                return this.aborter.signal.aborted;\n            },\n        };\n        newEntry.aborter.addSignal(signal);\n        // remove the fill from the cache when its abortcontroller fires, if still in there\n        newEntry.aborter.signal.addEventListener('abort', () => {\n            if (!newEntry.settled) {\n                this.evict(key, newEntry);\n            }\n        });\n        // chain off the cached promise to record when it settles\n        newEntry.promise\n            .then(() => {\n            newEntry.settled = true;\n        }, () => {\n            newEntry.settled = true;\n            // if the fill throws an error (including abort) and is still in the cache, remove it\n            this.evict(key, newEntry);\n        })\n            .catch(e => {\n            // this will only be reached if there is some kind of\n            // bad bug in this library\n            console.error(e);\n            throw e;\n        });\n        this.cache.set(key, newEntry);\n    }\n    static checkSinglePromise(promise, signal) {\n        // check just this signal for having been aborted, and abort the\n        // promise if it was, regardless of what happened with the cached\n        // response\n        function checkForSingleAbort() {\n            if (signal && signal.aborted) {\n                throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' });\n            }\n        }\n        return promise.then(result => {\n            checkForSingleAbort();\n            return result;\n        }, error => {\n            checkForSingleAbort();\n            throw error;\n        });\n    }\n    has(key) {\n        return this.cache.has(key);\n    }\n    /**\n     * Callback for getting status of the pending async\n     *\n     * @callback statusCallback\n     * @param {any} status, current status string or message object\n     */\n    /**\n     * @param {any} key cache key to use for this request\n     * @param {any} data data passed as the first argument to the fill callback\n     * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n     * @param {statusCallback} a callback to get the current status of a pending async operation\n     */\n    get(key, data, signal, statusCallback) {\n        if (!signal && data instanceof abortcontroller_ponyfill_1.AbortSignal) {\n            throw new TypeError('second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?');\n        }\n        const cacheEntry = this.cache.get(key);\n        if (cacheEntry) {\n            if (cacheEntry.aborted && !cacheEntry.settled) {\n                // if it's aborted but has not realized it yet, evict it and redispatch\n                this.evict(key, cacheEntry);\n                return this.get(key, data, signal, statusCallback);\n            }\n            if (cacheEntry.settled) {\n                // too late to abort, just return it\n                return cacheEntry.promise;\n            }\n            // request is in-flight, add this signal to its list of signals,\n            // or if there is no signal, the aborter will become non-abortable\n            cacheEntry.aborter.addSignal(signal);\n            cacheEntry.statusReporter.addCallback(statusCallback);\n            return AbortablePromiseCache.checkSinglePromise(cacheEntry.promise, signal);\n        }\n        // if we got here, it is not in the cache. fill.\n        this.fill(key, data, signal, statusCallback);\n        return AbortablePromiseCache.checkSinglePromise(\n        //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n        //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.cache.get(key).promise, signal);\n    }\n    /**\n     * delete the given entry from the cache. if it exists and its fill request has\n     * not yet settled, the fill will be signaled to abort.\n     *\n     * @param {any} key\n     */\n    delete(key) {\n        const cachedEntry = this.cache.get(key);\n        if (cachedEntry) {\n            if (!cachedEntry.settled) {\n                cachedEntry.aborter.abort();\n            }\n            this.cache.delete(key);\n        }\n    }\n    /**\n     * Clear all requests from the cache. Aborts any that have not settled.\n     * @returns {number} count of entries deleted\n     */\n    clear() {\n        // iterate without needing regenerator-runtime\n        const keyIter = this.cache.keys();\n        let deleteCount = 0;\n        for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n            this.delete(result.value);\n            deleteCount += 1;\n        }\n        return deleteCount;\n    }\n}\nexports.default = AbortablePromiseCache;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abortcontroller_ponyfill_1 = require(\"./abortcontroller-ponyfill\");\nclass NullSignal {\n}\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nclass AggregateAbortController {\n    constructor() {\n        this.signals = new Set();\n        this.abortController = new abortcontroller_ponyfill_1.AbortController();\n    }\n    /**\n     * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n     *  will be treated as a null-signal, and this abortcontroller will no\n     *  longer be abortable.\n     */\n    //@ts-ignore\n    addSignal(signal = new NullSignal()) {\n        if (this.signal.aborted) {\n            throw new Error('cannot add a signal, already aborted!');\n        }\n        // note that a NullSignal will never fire, so if we\n        // have one this thing will never actually abort\n        this.signals.add(signal);\n        if (signal.aborted) {\n            // handle the abort immediately if it is already aborted\n            // for some reason\n            this.handleAborted(signal);\n        }\n        else if (typeof signal.addEventListener === 'function') {\n            signal.addEventListener('abort', () => {\n                this.handleAborted(signal);\n            });\n        }\n    }\n    handleAborted(signal) {\n        this.signals.delete(signal);\n        if (this.signals.size === 0) {\n            this.abortController.abort();\n        }\n    }\n    get signal() {\n        return this.abortController.signal;\n    }\n    abort() {\n        this.abortController.abort();\n    }\n}\nexports.default = AggregateAbortController;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass AggregateStatusReporter {\n    constructor() {\n        this.callbacks = new Set();\n    }\n    addCallback(callback = () => { }) {\n        this.callbacks.add(callback);\n        callback(this.currentMessage);\n    }\n    callback(message) {\n        this.currentMessage = message;\n        this.callbacks.forEach(elt => {\n            elt(message);\n        });\n    }\n}\nexports.default = AggregateStatusReporter;\n","\"use strict\";\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortSignal = exports.AbortController = void 0;\nconst cjs_ponyfill_1 = require(\"abortcontroller-polyfill/dist/cjs-ponyfill\");\nvar getGlobal = function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n};\n//@ts-ignore\nlet AbortController = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortController : getGlobal().AbortController;\nexports.AbortController = AbortController;\n//@ts-ignore\nlet AbortSignal = typeof getGlobal().AbortController === 'undefined' ? cjs_ponyfill_1.AbortSignal : getGlobal().AbortSignal;\nexports.AbortSignal = AbortSignal;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbortablePromiseCache_1 = __importDefault(require(\"./AbortablePromiseCache\"));\nexports.default = AbortablePromiseCache_1.default;\n","export default function _OverloadYield(t, e) {\n  this.v = t, this.k = e;\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _asyncGeneratorDelegate(t) {\n  var e = {},\n    n = !1;\n  function pump(e, r) {\n    return n = !0, r = new Promise(function (n) {\n      n(t[e](r));\n    }), {\n      done: !1,\n      value: new OverloadYield(r, 1)\n    };\n  }\n  return e[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function () {\n    return this;\n  }, e.next = function (t) {\n    return n ? (n = !1, t) : pump(\"next\", t);\n  }, \"function\" == typeof t[\"throw\"] && (e[\"throw\"] = function (t) {\n    if (n) throw n = !1, t;\n    return pump(\"throw\", t);\n  }), \"function\" == typeof t[\"return\"] && (e[\"return\"] = function (t) {\n    return n ? (n = !1, t) : pump(\"return\", t);\n  }), e;\n}","export default function _asyncIterator(r) {\n  var n,\n    t,\n    o,\n    e = 2;\n  for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) {\n    if (t && null != (n = r[t])) return n.call(r);\n    if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n    t = \"@@asyncIterator\", o = \"@@iterator\";\n  }\n  throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(r) {\n  function AsyncFromSyncIteratorContinuation(r) {\n    if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n    var n = r.done;\n    return Promise.resolve(r.value).then(function (r) {\n      return {\n        value: r,\n        done: n\n      };\n    });\n  }\n  return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) {\n    this.s = r, this.n = r.next;\n  }, AsyncFromSyncIterator.prototype = {\n    s: null,\n    n: null,\n    next: function next() {\n      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n    },\n    \"return\": function _return(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.resolve({\n        value: r,\n        done: !0\n      }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    },\n    \"throw\": function _throw(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    }\n  }, new AsyncFromSyncIterator(r);\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _awaitAsyncGenerator(e) {\n  return new OverloadYield(e, 0);\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function AsyncGenerator(e) {\n  var r, t;\n  function resume(r, t) {\n    try {\n      var n = e[r](t),\n        o = n.value,\n        u = o instanceof OverloadYield;\n      Promise.resolve(u ? o.v : o).then(function (t) {\n        if (u) {\n          var i = \"return\" === r ? \"return\" : \"next\";\n          if (!o.k || t.done) return resume(i, t);\n          t = e[i](t).value;\n        }\n        settle(n.done ? \"return\" : \"normal\", t);\n      }, function (e) {\n        resume(\"throw\", e);\n      });\n    } catch (e) {\n      settle(\"throw\", e);\n    }\n  }\n  function settle(e, n) {\n    switch (e) {\n      case \"return\":\n        r.resolve({\n          value: n,\n          done: !0\n        });\n        break;\n      case \"throw\":\n        r.reject(n);\n        break;\n      default:\n        r.resolve({\n          value: n,\n          done: !1\n        });\n    }\n    (r = r.next) ? resume(r.key, r.arg) : t = null;\n  }\n  this._invoke = function (e, n) {\n    return new Promise(function (o, u) {\n      var i = {\n        key: e,\n        arg: n,\n        resolve: o,\n        reject: u,\n        next: null\n      };\n      t ? t = t.next = i : (r = t = i, resume(e, n));\n    });\n  }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n}\nAsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function () {\n  return this;\n}, AsyncGenerator.prototype.next = function (e) {\n  return this._invoke(\"next\", e);\n}, AsyncGenerator.prototype[\"throw\"] = function (e) {\n  return this._invoke(\"throw\", e);\n}, AsyncGenerator.prototype[\"return\"] = function (e) {\n  return this._invoke(\"return\", e);\n};","import AsyncGenerator from \"./AsyncGenerator.js\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}"],"names":["VirtualOffset","blockPosition","dataPosition","_classCallCheck","this","_createClass","key","value","concat","b","min","i","_len","arguments","length","args","Array","_key","compareTo","fromBytes","bytes","offset","undefined","Error","Chunk","minv","maxv","bin","_fetchedSize","fetchedSize","toUniqueString","timeout","ms","Promise","resolve","setTimeout","checkAbortSignal","signal","aborted","DOMException","e","code","makeOpts","obj","optimizeChunks","chunks","lowest","lastChunk","mergedChunks","sort","c0","c1","dif","_step","chunk1","chunk2","_iterator","_createForOfIteratorHelper","s","n","done","chunk","push","err","f","parsePseudoBin","lineCount","long","greaterThan","Number","MAX_SAFE_INTEGER","lessThan","MIN_SAFE_INTEGER","toNumber","longToNumber","Long","prototype","slice","call","findFirstData","firstDataLine","virtualOffset","IndexFile","_ref","filehandle","_ref$renameRefSeq","renameRefSeq","roundDown","multiple","reg2bins","beg","end","BAI","_IndexFile","_lineCount","_parse2","_indexCov","_blocksForRange","_parse3","_hasRefSeq","_inherits","_super","_createSuper","apply","_x","_x2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","refId","opts","_a","_b","indexData","wrap","_context","prev","next","parse","sent","abrupt","indices","stats","stop","_x3","_callee2","refCount","binLimit","curr","binCount","binIndex","j","chunkCount","k","u","v","linearCount","linearIndex","_j","_context2","readFile","readUInt32LE","readInt32LE","bai","maxBlockSize","_x4","_x5","_x6","_callee3","seqId","start","range","seqIdx","_seqIdx$linearIndex","depths","totalSize","currentPos","_args3","_context3","score","map","d","_objectSpread","_x7","_x8","_x9","_callee4","max","ba","overlappingBins","_step$value","binChunks","_iterator2","_step2","binChunk","nintv","minLin","maxLin","vp","_args4","_context4","_slicedToArray","Math","_callee5","_this","_args5","_context5","setupP","_parse","catch","_x10","_callee6","header","_args6","_context6","rshift","num","bits","floor","pow","CSI","maxBinNumber","depth","minShift","formatFlags","coordinateType","format","columnNumbers","ref","metaValue","metaChar","String","fromCharCode","skipLines","nameSectionLength","namesBytes","currRefId","currNameStart","refIdToName","refNameToId","refName","toString","parseNameBytes","subarray","buffer","csiVersion","auxLength","aux","unzip","parseAuxData","csi","c","l","t","bins","_this2","SEQRET_DECODER","split","CIGAR_DECODER","BamRecord","data","_tagList","_allTagsParsed","fileOffset","byteArray","_id","_refID","flags","field","_get","toLowerCase","get","_parseTag","_parseAllTags","tags","isSegmentUnmapped","isPaired","_i","_Object$keys","Object","keys","seen","filter","lt","mq","qualRaw","join","_this$bytes","p","lseq","isReverseComplemented","isMateUnmapped","isMateReverseComplemented","nl","_this$bytes2","tagName","lcTag","_this$bytes3","_tagOffset","blockEnd","tag","type","readInt8","readUInt8","readInt16LE","readUInt16LE","readFloatLE","cc","Btype","limit","cigop","console","warn","cigar","match","op","toUpperCase","parseInt","Constants","_this$bytes4","numCigarOps","seqLen","lref","lop","length_on_ref","seq","_this$bytes5","seqBytes","len","buf","sb","_next_refid","s1","s2","o1","o2","isRead1","isRead2","tmp","template_length","_i2","_Object$keys2","charAt","parseHeaderText","text","lines","_line$split","_line$split2","_toArray","fields","_f$split","_f$split2","BAM_MAGIC","gen2array","_gen2array","gen","out","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","x","_asyncIterator","t0","return","finish","NullFilehandle","BamFile","_getHeaderPre","_getHeaderText","_readRefSeqs2","_getRecordsForRange","_fetchPairs","_readRegion2","_readChunk2","_readBamFeatures","_fill","_this3","bamFilehandle","bamPath","bamUrl","baiPath","baiFilehandle","baiUrl","csiPath","csiFilehandle","csiUrl","htsget","_ref$yieldThreadTime","yieldThreadTime","_ref$renameRefSeqs","renameRefSeqs","featureCache","AbortablePromiseCache","cache","QuickLRU","maxSize","fill","_yield$_this3$_readCh","cpositions","dpositions","_readChunk","readBamFeatures","bam","LocalFile","RemoteFile","index","origOpts","ret","res","uncba","headLen","_yield$this$_readRefS","chrToIndex","indexToChr","read","Buffer","alloc","bytesRead","_readRefSeqs","_this4","headerP","getHeaderPre","getHeader","refSeqBytes","size","_yield$this$bam$read","nRef","lName","lRef","_x11","chr","streamRecordsForRange","_wrapAsyncGenerator","_callee7","chrId","_context7","_awaitAsyncGenerator","blocksForRange","delegateYield","_asyncGeneratorDelegate","_fetchChunkFeatures","_callee8","viewAsPairs","feats","records","recs","_iterator3","_step3","feature","_context8","seq_id","t1","fetchPairs","_x12","_x13","_x14","_callee10","_ref2","pairAcrossChr","_opts$maxInsertSize","maxInsertSize","unmatedPairs","readIds","matePromises","_iterator6","_step6","m","mateFeatPromises","_this5","_context10","_step4","readNames","_iterator4","element","name","id","_Object$entries","entries","_Object$entries$_i","_step5","_iterator5","pnext","_next_pos","rnext","abs","Map","all","flat","has","set","_toConsumableArray","values","_x15","_callee9","_yield$_this5$_readCh","mateRecs","_iterator7","_step7","_context9","_x16","_x17","_callee11","position","_yield$this$bam$read2","_args11","_context11","_x18","_callee12","_ref3","_yield$unzipChunkSlic","_context12","_readRegion","unzipChunkSlice","_x19","_x20","_x21","_x22","_callee13","blockStart","sink","pos","last","blockSize","_context13","Date","now","BAMFeature","crc32","_x23","_callee14","seqName","_context14","hasRefSeq","_x24","_callee15","_context15","_x25","_x26","_x27","_callee16","_context16","indexCov","_x28","_x29","_x30","_x31","_callee17","_context17","_concat","arr","url","headers","rest","_res","startsWith","from","referer","_objectWithoutProperties","_excluded","fetch","ok","status","t2","t3","t4","arrayBuffer","t5","elt","HtsgetFile","_BamFile","_getHeader","baseUrl","trackId","base","result","json","urls","headerText","samHeader","idToName","nameToId","sqLines","sqLine","item","require","__importDefault","mod","__esModule","defineProperty","exports","abortcontroller_ponyfill_1","AggregateAbortController_1","AggregateStatusReporter_1","TypeError","delete","fillCallback","entry","statusCallback","aborter","default","statusReporter","addCallback","newEntry","promise","message","callback","settled","addSignal","addEventListener","evict","then","error","AbortSignal","cacheEntry","checkSinglePromise","cachedEntry","abort","keyIter","deleteCount","exception","checkForSingleAbort","assign","NullSignal","AggregateAbortController","signals","Set","abortController","AbortController","add","handleAborted","AggregateStatusReporter","callbacks","currentMessage","forEach","cjs_ponyfill_1","getGlobal","self","window","global","AbortablePromiseCache_1","_OverloadYield","pump","r","Symbol","iterator","o","asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","reject","AsyncGenerator","resume","OverloadYield","settle","arg","_invoke","fn"],"sourceRoot":""}