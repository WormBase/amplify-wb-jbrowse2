{"version":3,"file":"static/js/9443.09d7eba6.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/RectBg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ColorLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ScoreLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/YScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import React from 'react'\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport YScaleBars from './YScaleBars'\n\nconst MultiLinearWiggleDisplayComponent = observer(\n  (props: { model: WiggleDisplayModel }) => {\n    const { model } = props\n\n    return (\n      <div>\n        <BaseLinearDisplayComponent {...props} />\n        <YScaleBars model={model} />\n      </div>\n    )\n  },\n)\n\nexport default MultiLinearWiggleDisplayComponent\n","import React from 'react'\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} fill={color} />\n}\n\nexport default RectBg\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport RectBg from './RectBg'\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  labelWidth,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  labelWidth: number\n  exportSVG?: boolean\n}) {\n  const {\n    needsCustomLegend,\n    needsScalebar,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (needsScalebar && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => {\n        const boxHeight = Math.min(20, rowHeight)\n        return (\n          <React.Fragment key={`${source.name}-${idx}`}>\n            {needsFullHeightScalebar ? null : (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={legendWidth}\n                height={boxHeight}\n              />\n            )}\n            {source.color ? (\n              <RectBg\n                y={idx * rowHeight + 1}\n                x={extraOffset}\n                width={colorBoxWidth}\n                height={needsCustomLegend ? rowHeight : boxHeight}\n                color={source.color}\n              />\n            ) : null}\n            {canDisplayLabel ? (\n              <text\n                y={idx * rowHeight + 13}\n                x={extraOffset + colorBoxWidth + 2}\n                fontSize={svgFontSize}\n              >\n                {source.name}\n              </text>\n            ) : null}\n          </React.Fragment>\n        )\n      })}\n    </>\n  ) : null\n})\n\nexport default ColorLegend\n","import React from 'react'\nimport { measureText, getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport RectBg from './RectBg'\n\ntype LGV = LinearGenomeViewModel\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend =\n    `[${ticks?.values[0]}-${ticks?.values[1]}]` +\n    (scaleType === 'log' ? ' (log scale)' : '')\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nexport default ScoreLegend\n","import React from 'react'\nimport { measureText, getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { WiggleDisplayModel } from '../models/model'\nimport YScaleBar from '../../shared/YScaleBar'\nimport ColorLegend from './ColorLegend'\nimport ScoreLegend from './ScoreLegend'\nimport { getOffset } from './util'\n\ntype LGV = LinearGenomeViewModel\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  if (exportSVG) {\n    return <>{children}</>\n  } else {\n    const { height } = model\n    return (\n      <svg\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          pointerEvents: 'none',\n          height,\n          width: getContainingView(model).width,\n        }}\n      >\n        {children}\n      </svg>\n    )\n  }\n})\n\nexport const YScaleBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const {\n    stats,\n    needsCustomLegend,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    rowHeight,\n    sources,\n    ticks,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const { width: viewWidth } = getContainingView(model) as LGV\n  const minWidth = 20\n\n  const ready = stats && sources\n  if (!ready) {\n    return null\n  }\n\n  const labelWidth = Math.max(\n    ...(sources\n      .map(s => measureText(s.name, svgFontSize))\n      .map(width => (canDisplayLabel ? width : minWidth)) || [0]),\n  )\n\n  return (\n    <Wrapper {...props}>\n      {needsFullHeightScalebar ? (\n        <>\n          <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n          <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n            <ColorLegend\n              exportSVG={exportSVG}\n              model={model}\n              rowHeight={12}\n              labelWidth={labelWidth}\n            />\n          </g>\n        </>\n      ) : (\n        <>\n          <ColorLegend\n            exportSVG={exportSVG}\n            model={model}\n            rowHeight={model.rowHeight}\n            labelWidth={labelWidth}\n          />\n\n          {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n            <ScoreLegend {...props} />\n          ) : (\n            sources.map((_source, idx) => (\n              <g\n                transform={`translate(0 ${rowHeight * idx})`}\n                key={`${JSON.stringify(ticks)}-${idx}`}\n              >\n                <YScaleBar model={model} orientation={orientation} />\n              </g>\n            ))\n          )}\n        </>\n      )}\n    </Wrapper>\n  )\n})\n\nexport default YScaleBars\n","import {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\nimport { WiggleDisplayModel } from '../models/model'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0])\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["observer","props","model","_jsxs","children","_jsx","BaseLinearDisplayComponent","YScaleBars","color","fill","_ref","rowHeight","labelWidth","exportSVG","needsCustomLegend","needsScalebar","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","sources","svgFontSize","Math","min","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","_Fragment","RectBg","y","x","width","height","length","map","source","idx","boxHeight","React","fontSize","name","concat","ticks","scaleType","getContainingView","legend","values","len","measureText","xpos","Wrapper","style","position","top","left","pointerEvents","orientation","stats","viewWidth","max","s","transform","getOffset","YScaleBar","ColorLegend","ScoreLegend","_source","JSON","stringify","moveUp","arr","sel","by","arguments","undefined","idxs","l","findIndex","v","sort","a","b","lastIdx","old","splice","moveDown","trackLabelFontSize","prefersOffset","trackLabels","track","getContainingTrack","trackName","getConf"],"sourceRoot":""}