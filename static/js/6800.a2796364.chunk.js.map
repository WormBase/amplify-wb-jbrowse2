{"version":3,"file":"static/js/6800.a2796364.chunk.js","mappings":"kNASe,MAAMA,UAAwBC,EAAAA,uBAO3C,kBAAcC,GACZ,MAAMC,EAAKC,KAAKC,cACVC,EAAqBF,KAAKG,QAAQ,sBAClCC,EAAWJ,KAAKG,QAAQ,CAAC,QAAS,aAClCE,EAAYL,KAAKG,QAAQ,CAAC,QAAS,cAEnCG,GAAaC,EAAAA,EAAAA,cAAaL,EAAoBH,GAC9CS,EAAsB,QAAdH,EACRI,EAAW,IAAIC,EAAAA,GAAiB,CACpCJ,aACAK,cAAeH,GAAQD,EAAAA,EAAAA,cAAaH,EAAUL,QAAMa,EACpDC,cAAgBL,OAAqCI,GAA7BL,EAAAA,EAAAA,cAAaH,EAAUL,GAC/Ce,eAAgB,WAEZC,EAAcf,KAAKG,QAAQ,eAE3Ba,QAAeP,EAASQ,YAC9B,MAAO,CACLF,cACAN,WACAO,SAEJ,CAEA,eAAgBE,GAOd,OANKlB,KAAKmB,aACRnB,KAAKmB,WAAanB,KAAKF,eAAesB,OAAOC,IAE3C,MADArB,KAAKmB,gBAAaP,EACZS,CAAC,KAGJrB,KAAKmB,UACd,CAEA,cAAMG,GACJ,MAAM,SAAEb,EAAQ,YAAEM,SAAsBf,KAAKkB,YAC7C,GAAIH,EAAYQ,OACd,OAAOR,EAET,MAEMS,SAFef,EAASQ,aACVQ,MAAM,cAAcC,QAAOC,KAAOA,IACjCC,IAAI,GACzB,OAAOJ,GAASK,SAAS,MACrBL,EACGM,MAAM,GACNL,MAAM,MACNM,KAAIJ,GAAKA,EAAEK,cACdpB,CACN,CAEA,iBAAaqB,CAAYC,EAAoB,CAAC,GAC5C,MAAM,SAAEzB,SAAmBT,KAAKkB,YAChC,OAAOT,EAAS0B,0BAA0BD,EAC5C,CAEA,eAAMjB,GACJ,MAAM,SAAER,SAAmBT,KAAKkB,YAChC,OAAOT,EAASQ,WAClB,CAEOmB,WAAAA,CAAYC,EAAeH,EAAoB,CAAC,GACrD,OAAOI,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,QAAEC,EAAO,MAAEC,EAAK,IAAEC,GAAQL,GAC1B,SAAE5B,SAAmBT,KAAKkB,YAC1ByB,SAAe3C,KAAKsB,aAAaQ,MAAM,IAAM,SAC7CrB,EAASmC,SAASJ,EAASC,EAAOC,EAAK,CAC3CG,aAAcA,CAACC,EAAMC,KACnB,MAAOP,EAASQ,EAAG3B,KAAM4B,GAAQH,EAAKrB,MAAM,MAC5C,IAAK,IAAIyB,EAAI,EAAGA,EAAID,EAAK1B,OAAQ2B,IAAK,CACpC,MAAMC,EAAW,GAAGnD,KAAKoD,MAAML,KAAcG,IACvCT,GAASO,EACTN,GAAOrB,EACPgC,GAASJ,EAAKC,GACdI,EAASX,EAAMO,IAAM,MAAMA,IAC7BG,GACFE,EAASC,KACP,IAAIC,EAAAA,cAAc,CAChBL,GAAID,EACJO,KAAM,CACJlB,UACAC,QACAC,MACAW,QACAC,YAKV,MAECpB,IAELqB,EAASI,UAAU,GAEvB,CAEOC,aAAAA,GAAuB,E","sources":["../../../plugins/bed/src/BedGraphTabixAdapter/BedGraphTabixAdapter.ts"],"sourcesContent":["import { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature, Region, SimpleFeature } from '@jbrowse/core/util'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { TabixIndexedFile } from '@gmod/tabix'\n\nexport default class BedGraphAdapter extends BaseFeatureDataAdapter {\n  private configured?: Promise<{\n    bedGraph: TabixIndexedFile\n    header: string\n    columnNames: string[]\n  }>\n\n  private async configurePre() {\n    const pm = this.pluginManager\n    const bedGraphGzLocation = this.getConf('bedGraphGzLocation')\n    const location = this.getConf(['index', 'location'])\n    const indexType = this.getConf(['index', 'indexType'])\n\n    const filehandle = openLocation(bedGraphGzLocation, pm)\n    const isCSI = indexType === 'CSI'\n    const bedGraph = new TabixIndexedFile({\n      filehandle,\n      csiFilehandle: isCSI ? openLocation(location, pm) : undefined,\n      tbiFilehandle: !isCSI ? openLocation(location, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    const columnNames = this.getConf('columnNames')\n\n    const header = await bedGraph.getHeader()\n    return {\n      columnNames,\n      bedGraph,\n      header,\n    }\n  }\n\n  protected async configure() {\n    if (!this.configured) {\n      this.configured = this.configurePre().catch((e: unknown) => {\n        this.configured = undefined\n        throw e\n      })\n    }\n    return this.configured\n  }\n\n  async getNames() {\n    const { bedGraph, columnNames } = await this.configure()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const header = await bedGraph.getHeader()\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { bedGraph } = await this.configure()\n    return bedGraph.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    const { bedGraph } = await this.configure()\n    return bedGraph.getHeader()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { refName, start, end } = query\n      const { bedGraph } = await this.configure()\n      const names = (await this.getNames())?.slice(3) || []\n      await bedGraph.getLines(refName, start, end, {\n        lineCallback: (line, fileOffset) => {\n          const [refName, s, e, ...rest] = line.split('\\t')\n          for (let j = 0; j < rest.length; j++) {\n            const uniqueId = `${this.id}-${fileOffset}-${j}`\n            const start = +s!\n            const end = +e!\n            const score = +rest[j]!\n            const source = names[j] || `col${j}`\n            if (score) {\n              observer.next(\n                new SimpleFeature({\n                  id: uniqueId,\n                  data: {\n                    refName,\n                    start,\n                    end,\n                    score,\n                    source,\n                  },\n                }),\n              )\n            }\n          }\n        },\n        ...opts,\n      })\n      observer.complete()\n    })\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["BedGraphAdapter","BaseFeatureDataAdapter","configurePre","pm","this","pluginManager","bedGraphGzLocation","getConf","location","indexType","filehandle","openLocation","isCSI","bedGraph","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","columnNames","header","getHeader","configure","configured","catch","e","getNames","length","defline","split","filter","f","at","includes","slice","map","trim","getRefNames","opts","getReferenceSequenceNames","getFeatures","query","ObservableCreate","async","refName","start","end","names","getLines","lineCallback","line","fileOffset","s","rest","j","uniqueId","id","score","source","observer","next","SimpleFeature","data","complete","freeResources"],"sourceRoot":""}