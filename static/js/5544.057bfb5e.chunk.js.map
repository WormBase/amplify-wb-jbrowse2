{"version":3,"file":"static/js/5544.057bfb5e.chunk.js","mappings":"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","sources":["components/ShareDialog.tsx","../../../node_modules/@mui/icons-material/BookmarkAdd.js"],"sourcesContent":["import React, { useState, useEffect, lazy } from 'react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  IconButton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { StringParam, useQueryParam } from 'use-query-params'\nimport { AbstractSessionModel } from '@jbrowse/core/util'\n\n// icons\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons'\nimport BookmarkAddIcon from '@mui/icons-material/BookmarkAdd'\n\n// locals\nimport { toUrlSafeB64 } from '../util'\nimport { shareSessionToDynamo } from '../sessionSharing'\n\nconst SettingsDialog = lazy(() => import('./ShareSettingsDialog'))\n\nconst SHARE_URL_LOCALSTORAGE_KEY = 'jbrowse-shareURL'\n\nfunction LinkField({ url }: { url: string }) {\n  return (\n    <TextField\n      label=\"URL\"\n      value={url}\n      InputProps={{ readOnly: true }}\n      variant=\"filled\"\n      fullWidth\n      onClick={event => {\n        const target = event.target as HTMLTextAreaElement\n        target.select()\n      }}\n    />\n  )\n}\n\nconst ShareDialog = observer(function ({\n  handleClose,\n  session,\n}: {\n  handleClose: () => void\n  session: AbstractSessionModel & { shareURL: string }\n}) {\n  const [sessionParam, setSessionParam] = useState('')\n  const [passwordParam, setPasswordParam] = useState('')\n  const [shortUrl, setShortUrl] = useState('')\n  const [longUrl, setLongUrl] = useState('')\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<unknown>()\n  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false)\n  const [, setPassword] = useQueryParam('password', StringParam)\n  const [, setSession] = useQueryParam('session', StringParam)\n\n  const url = session.shareURL\n  const currentSetting =\n    localStorage.getItem(SHARE_URL_LOCALSTORAGE_KEY) || 'short'\n  const snap = getSnapshot(session)\n\n  useEffect(() => {\n    let cancelled = false\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        if (currentSetting === 'short') {\n          setLoading(true)\n          const locationUrl = new URL(window.location.href)\n          const result = await shareSessionToDynamo(snap, url, locationUrl.href)\n          if (!cancelled) {\n            const params = new URLSearchParams(locationUrl.search)\n            params.set('session', `share-${result.json.sessionId}`)\n            params.set('password', result.password)\n            locationUrl.search = params.toString()\n            setShortUrl(locationUrl.href)\n\n            setSessionParam(`share-${result.json.sessionId}`)\n            setPasswordParam(result.password)\n          }\n        } else {\n          const sess = await toUrlSafeB64(JSON.stringify(getSnapshot(session)))\n          const longUrl = new URL(window.location.href)\n          const longParams = new URLSearchParams(longUrl.search)\n          longParams.set('session', `encoded-${sess}`)\n          setSessionParam(`encoded-${sess}`)\n          longUrl.search = longParams.toString()\n          if (!cancelled) {\n            setLongUrl(longUrl.toString())\n          }\n        }\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [currentSetting, session, url, snap])\n\n  return (\n    <>\n      <Dialog\n        maxWidth=\"xl\"\n        open\n        onClose={handleClose}\n        title=\"JBrowse Shareable Link\"\n      >\n        <DialogContent>\n          <DialogContentText>\n            Copy the URL below to share your current JBrowse session.\n            <IconButton onClick={() => setSettingsDialogOpen(true)}>\n              <SettingsIcon />\n            </IconButton>\n          </DialogContentText>\n\n          {currentSetting === 'short' ? (\n            error ? (\n              <ErrorMessage error={error} />\n            ) : loading ? (\n              <Typography>Generating short URL...</Typography>\n            ) : (\n              <LinkField url={shortUrl} />\n            )\n          ) : (\n            <LinkField url={longUrl} />\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            startIcon={<BookmarkAddIcon />}\n            disabled={currentSetting === 'short' && loading}\n            onClick={event => {\n              event.preventDefault()\n              setPassword(passwordParam, 'replaceIn')\n              setSession(sessionParam, 'replaceIn')\n              alert('Now press Ctrl+D (PC) or Cmd+D (Mac)')\n            }}\n          >\n            Create browser Bookmark\n          </Button>\n\n          <Button\n            onClick={() => {\n              copy(shortUrl || longUrl)\n              session.notify('Copied to clipboard', 'success')\n            }}\n            startIcon={<ContentCopyIcon />}\n            disabled={currentSetting === 'short' && loading}\n          >\n            Copy to Clipboard\n          </Button>\n\n          <Button onClick={handleClose} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <SettingsDialog\n        open={settingsDialogOpen}\n        onClose={() => setSettingsDialogOpen(false)}\n        currentSetting={currentSetting}\n      />\n    </>\n  )\n})\n\nexport default ShareDialog\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 7h-2v2h-2V7h-2V5h2V3h2v2h2v2zm-2 14-7-3-7 3V5c0-1.1.9-2 2-2h7c-.63.84-1 1.87-1 3 0 2.76 2.24 5 5 5 .34 0 .68-.03 1-.1V21z\"\n}), 'BookmarkAdd');\nexports.default = _default;"],"names":["SettingsDialog","lazy","LinkField","_ref","url","_jsx","TextField","label","value","InputProps","readOnly","variant","fullWidth","onClick","event","target","select","observer","_ref2","handleClose","session","sessionParam","setSessionParam","useState","passwordParam","setPasswordParam","shortUrl","setShortUrl","longUrl","setLongUrl","loading","setLoading","error","setError","settingsDialogOpen","setSettingsDialogOpen","setPassword","useQueryParam","StringParam","setSession","shareURL","currentSetting","localStorage","getItem","snap","getSnapshot","useEffect","cancelled","locationUrl","URL","window","location","href","result","shareSessionToDynamo","params","URLSearchParams","search","set","concat","json","sessionId","password","toString","sess","toUrlSafeB64","JSON","stringify","longParams","e","_jsxs","_Fragment","children","Dialog","maxWidth","open","onClose","title","DialogContent","DialogContentText","IconButton","SettingsIcon","ErrorMessage","Typography","DialogActions","Button","startIcon","BookmarkAddIcon","disabled","preventDefault","alert","copy","notify","ContentCopyIcon","autoFocus","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}