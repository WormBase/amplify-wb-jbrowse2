{"version":3,"file":"static/js/8100.a3d849fd.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { ucscProcessedTranscript } from '../util'\n\nfunction isUCSC(f: Feature) {\n  return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0\n}\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cached?: Promise<{ bigbed: BigBed; header: any; parser: BED }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const bigbed = new BigBed({\n      filehandle: openLocation(this.getConf('bigBedLocation'), pm),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({ autoSql: header.autoSql })\n    return { bigbed, header, parser }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cached) {\n      this.cached = this.configurePre(opts).catch(e => {\n        this.cached = undefined\n        throw e\n      })\n    }\n    return this.cached\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...rest } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql: { ...rest },\n      fields: Object.fromEntries(\n        fields.map(({ name, comment }) => [name, comment]),\n      ),\n    }\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    const { refName, start, end } = region\n    const { signal } = opts\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { parser, bigbed } = await this.configure(opts)\n        const ob = await bigbed.getFeatureStream(refName, start, end, {\n          signal,\n          basesPerSpan: end - start,\n        })\n        ob.pipe(\n          mergeAll(),\n          map(r => {\n            const data = parser.parseLine(\n              `${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`,\n              {\n                uniqueId: r.uniqueId!,\n              },\n            )\n\n            const { blockCount, blockSizes, blockStarts, chromStarts } = data\n            if (blockCount) {\n              const starts = chromStarts || blockStarts || []\n              const sizes = blockSizes\n              const blocksOffset = r.start\n              data.subfeatures = []\n\n              for (let b = 0; b < blockCount; b += 1) {\n                const bmin = (starts[b] || 0) + blocksOffset\n                const bmax = bmin + (sizes[b] || 0)\n                data.subfeatures.push({\n                  uniqueId: `${r.uniqueId}-${b}`,\n                  start: bmin,\n                  end: bmax,\n                  type: 'block',\n                })\n              }\n            }\n            if (r.uniqueId === undefined) {\n              throw new Error('invalid bbi feature')\n            }\n            const { chromStart, chromEnd, chrom, ...rest } = data\n\n            const f = new SimpleFeature({\n              id: `${this.id}-${r.uniqueId}`,\n              data: {\n                ...rest,\n                start: r.start,\n                end: r.end,\n                refName,\n              },\n            })\n\n            // collection of heuristics for suggesting that this feature\n            // should be converted to a gene, CNV bigbed has many gene like\n            // features including thickStart and blockCount but no strand\n            return isUCSC(f) ? ucscProcessedTranscript(f) : f\n          }),\n        ).subscribe(observer)\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["BigBedAdapter","BaseFeatureDataAdapter","constructor","arguments","cached","configurePre","opts","pm","this","pluginManager","bigbed","BigBed","filehandle","openLocation","getConf","header","getHeader","parser","BED","autoSql","configure","catch","e","undefined","getRefNames","Object","keys","refsByName","version","fileType","fields","rest","fromEntries","map","_ref","name","comment","getFeatures","region","length","refName","start","end","signal","ObservableCreate","async","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","concat","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","Error","chromStart","chromEnd","chrom","f","SimpleFeature","id","get","isUCSC","ucscProcessedTranscript","subscribe","observer","error","freeResources","feature","children","thickStart","thickEnd","blocks","filter","child","sort","a","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag","featureData","line","colRef","colStart","colEnd","scoreColumn","names","l","split","colSame","i","defaultParser","score"],"sourceRoot":""}