{"version":3,"file":"static/js/4223.c1045d6f.chunk.js","mappings":"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","sources":["../../../plugins/circular-view/src/CircularView/components/Ruler.tsx","../../../plugins/circular-view/src/CircularView/svgcomponents/SVGBackground.tsx","../../../plugins/circular-view/src/CircularView/svgcomponents/SVGCircularView.tsx"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  getSession,\n  polarToCartesian,\n  radToDeg,\n  assembleLocString,\n} from '@jbrowse/core/util'\nimport { makeContrasting } from '@jbrowse/core/util/color'\nimport { useTheme } from '@mui/material/styles'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport {\n  Slice,\n  SliceElidedRegion,\n  SliceNonElidedRegion,\n} from '../models/slices'\nimport { CircularViewModel } from '../models/CircularView'\n\nconst useStyles = makeStyles()({\n  rulerLabel: {\n    fontSize: '0.8rem',\n    fontWeight: 500,\n    lineHeight: 1.6,\n    letterSpacing: '0.0075em',\n  },\n})\n\nfunction sliceArcPath(\n  slice: Slice,\n  radiusPx: number,\n  startBase: number,\n  endBase: number,\n) {\n  // A rx ry x-axis-rotation large-arc-flag sweep-flag x y\n  if (slice.flipped) {\n    ;[startBase, endBase] = [endBase, startBase]\n  }\n  const startXY = slice.bpToXY(startBase, radiusPx)\n  const endXY = slice.bpToXY(endBase, radiusPx)\n  const largeArc =\n    Math.abs(endBase - startBase) / slice.bpPerRadian > Math.PI ? '1' : '0'\n  const sweepFlag = '1'\n  return [\n    'M',\n    ...startXY,\n    'A',\n    radiusPx,\n    radiusPx,\n    '0',\n    largeArc,\n    sweepFlag,\n    ...endXY,\n  ].join(' ')\n}\n\nconst ElisionRulerArc = observer(function ({\n  model,\n  slice,\n  region,\n}: {\n  model: CircularViewModel\n  slice: Slice\n  region: SliceElidedRegion\n}) {\n  const theme = useTheme()\n  const { radiusPx: modelRadiusPx } = model\n  const radiusPx = modelRadiusPx + 1\n  const { endRadians, startRadians } = slice\n  const startXY = polarToCartesian(radiusPx, startRadians)\n  const endXY = polarToCartesian(radiusPx, endRadians)\n  const widthPx = (endRadians - startRadians) * radiusPx\n  const largeArc = endRadians - startRadians > Math.PI ? '1' : '0'\n  // TODO: draw the elision\n  const centerRadians = (endRadians + startRadians) / 2\n  const regionCount = `[${Number(region.regions.length).toLocaleString()}]`\n  return (\n    <>\n      <RulerLabel\n        text={regionCount}\n        view={model}\n        maxWidthPx={widthPx}\n        radians={centerRadians}\n        radiusPx={radiusPx}\n        title={`${regionCount} more regions`}\n        color={theme.palette.text.primary}\n      />\n      <path\n        d={[\n          'M',\n          ...startXY,\n          'A',\n          radiusPx,\n          radiusPx,\n          '0',\n          largeArc,\n          '1',\n          ...endXY,\n        ].join(' ')}\n        stroke={theme.palette.text.secondary}\n        strokeWidth={2}\n        strokeDasharray=\"2,2\"\n        fill=\"none\"\n      />\n    </>\n  )\n})\n\nconst RulerLabel = observer(function ({\n  view,\n  text,\n  maxWidthPx,\n  radians,\n  radiusPx,\n  title,\n  color,\n}: {\n  view: CircularViewModel\n  text: string\n  maxWidthPx: number\n  radiusPx: number\n  radians: number\n  title?: string\n  color: string\n}) {\n  const { classes } = useStyles()\n  const textXY = polarToCartesian(radiusPx + 5, radians)\n  if (!text) {\n    return null\n  }\n\n  if (text.length * 6.5 < maxWidthPx) {\n    // text is rotated parallel to the ruler arc\n    return (\n      <text\n        x={0}\n        y={0}\n        className={classes.rulerLabel}\n        textAnchor=\"middle\"\n        dominantBaseline=\"baseline\"\n        transform={`translate(${textXY}) rotate(${radToDeg(radians) + 90})`}\n        style={{ fill: color }}\n      >\n        {text}\n        <title>{title || text}</title>\n      </text>\n    )\n  }\n  if (maxWidthPx > 4) {\n    // text is rotated perpendicular to the ruler arc\n    const overallRotation = radToDeg(radians + view.offsetRadians - Math.PI / 2)\n    if (overallRotation >= 180) {\n      return (\n        <text\n          x={0}\n          y={0}\n          className={classes.rulerLabel}\n          textAnchor=\"start\"\n          dominantBaseline=\"middle\"\n          transform={`translate(${textXY}) rotate(${radToDeg(radians)})`}\n          style={{ fill: color }}\n        >\n          {text}\n          <title>{title || text}</title>\n        </text>\n      )\n    }\n    return (\n      <text\n        x={0}\n        y={0}\n        className={classes.rulerLabel}\n        textAnchor=\"end\"\n        dominantBaseline=\"middle\"\n        transform={`translate(${textXY}) rotate(${radToDeg(radians) + 180})`}\n        style={{ fill: color }}\n      >\n        {text}\n        <title>{title || text}</title>\n      </text>\n    )\n  }\n\n  // if you get here there is no room for the text at all\n  return null\n})\n\nconst RegionRulerArc = observer(function ({\n  model,\n  slice,\n  region,\n}: {\n  model: CircularViewModel\n  slice: Slice\n  region: SliceNonElidedRegion\n}) {\n  const theme = useTheme()\n  const { radiusPx } = model\n  const { endRadians, startRadians } = slice\n  const centerRadians = (endRadians + startRadians) / 2\n  const widthPx = (endRadians - startRadians) * radiusPx\n  const session = getSession(model)\n  let color\n  const assembly = session.assemblyManager.get(region.assemblyName)\n  if (assembly) {\n    color = assembly.getRefNameColor(region.refName)\n  }\n  if (color) {\n    try {\n      color = makeContrasting(color, theme.palette.background.paper)\n    } catch (error) {\n      color = theme.palette.text.primary\n    }\n  } else {\n    color = theme.palette.text.primary\n  }\n\n  // TODO: slice flipping\n  return (\n    <>\n      <RulerLabel\n        text={region.refName}\n        view={model}\n        maxWidthPx={widthPx}\n        radians={centerRadians}\n        radiusPx={radiusPx}\n        color={color}\n      />\n      <path\n        d={sliceArcPath(slice, radiusPx + 1, region.start, region.end)}\n        stroke={color}\n        strokeWidth={2}\n        fill=\"none\"\n      />\n    </>\n  )\n})\n\nconst Ruler = observer(function ({\n  model,\n  slice,\n}: {\n  model: CircularViewModel\n  slice: Slice\n}) {\n  if (slice.region.elided) {\n    return (\n      <ElisionRulerArc\n        key={assembleLocString(slice.region.regions[0])}\n        model={model}\n        region={slice.region}\n        slice={slice}\n      />\n    )\n  }\n  return (\n    <RegionRulerArc\n      key={assembleLocString(slice.region)}\n      region={slice.region}\n      model={model}\n      slice={slice}\n    />\n  )\n})\n\nexport default Ruler\n","import React from 'react'\nimport { useTheme } from '@mui/material'\nimport { stripAlpha } from '@jbrowse/core/util'\n\nexport default function SVGBackground({\n  width,\n  height,\n  shift,\n}: {\n  width: number\n  height: number\n  shift: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      width={width + shift * 2}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import React from 'react'\nimport { ThemeProvider } from '@mui/material'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { when } from 'mobx'\nimport { getSession, radToDeg } from '@jbrowse/core/util'\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\n\n// locals\nimport { ExportSvgOptions, CircularViewModel } from '../models/CircularView'\nimport SVGBackground from './SVGBackground'\nimport Ruler from '../components/Ruler'\n\ntype CGV = CircularViewModel\n\nexport async function renderToSvg(model: CGV, opts: ExportSvgOptions) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => <>{children}</> } =\n    opts\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n\n  const { staticSlices, offsetRadians, centerXY } = model\n  const deg = radToDeg(offsetRadians)\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, width + shift * 2, height].toString()}\n        >\n          <SVGBackground width={width} height={height} shift={shift} />\n          <g transform={`translate(${centerXY}) rotate(${deg})`}>\n            {staticSlices.map((slice, i) => (\n              <Ruler key={i} model={model} slice={slice} />\n            ))}\n            {displayResults.map(({ result }, i) => (\n              <React.Fragment key={i}>{result}</React.Fragment>\n            ))}\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n"],"names":["useStyles","makeStyles","rulerLabel","fontSize","fontWeight","lineHeight","letterSpacing","sliceArcPath","slice","radiusPx","startBase","endBase","flipped","startXY","bpToXY","endXY","Math","abs","bpPerRadian","PI","join","ElisionRulerArc","observer","_ref","model","region","theme","useTheme","modelRadiusPx","endRadians","startRadians","polarToCartesian","widthPx","largeArc","centerRadians","regionCount","concat","Number","regions","length","toLocaleString","_jsxs","_Fragment","children","_jsx","RulerLabel","text","view","maxWidthPx","radians","title","color","palette","primary","d","stroke","secondary","strokeWidth","strokeDasharray","fill","_ref2","classes","textXY","x","y","className","textAnchor","dominantBaseline","transform","radToDeg","style","offsetRadians","RegionRulerArc","_ref3","assembly","getSession","assemblyManager","get","assemblyName","getRefNameColor","refName","makeContrasting","background","paper","error","start","end","_ref4","elided","assembleLocString","SVGBackground","width","height","shift","stripAlpha","default","async","renderToSvg","opts","_session$allThemes","when","initialized","themeName","Wrapper","session","allThemes","call","tracks","displayResults","Promise","all","map","display","track","displays","undefined","ready","result","renderSvg","staticSlices","centerXY","deg","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","xmlns","xmlnsXlink","viewBox","toString","i","Ruler","React"],"sourceRoot":""}