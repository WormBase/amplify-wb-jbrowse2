{"version":3,"file":"static/js/9431.540ed360.chunk.js","mappings":"gMAoBe,MAAMA,UAA0BC,EAAAA,uBAG7CC,WAAAA,CACEC,EACAC,EACAC,GAEAC,MAAMH,EAAMC,EAAeC,GAAc,KAPjCE,cAAQ,EAQhB,MAAMC,GAAQC,EAAAA,EAAAA,gBAAeN,EAAM,YACnCO,KAAKH,SAAWP,EAAkBW,aAAaH,GAAS,GAC1D,CAEA,mBAAOG,CAAaC,GAClB,MAAML,EAAW,IAAIM,IACrB,IAAK,MAAMC,KAASF,EAClB,GAAIE,EAAO,CACT,MAAMC,EAAIL,KAAKM,YAAYF,GACrBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAASZ,EAASW,IAAID,GACrBE,IACHA,EAAS,GACTZ,EAASa,IAAIH,EAASE,IAGxBA,EAAOE,KAAKN,EACd,CAIF,IAAK,MAAMO,KAAef,EAASgB,SACjCD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAGpD,OAAOX,CACT,CAEA,kBAAOS,CAAYW,GACjB,OAAO,IAAIC,EAAAA,EAAcD,EAC3B,CAEA,iBAAME,GACJ,MAAO,IAAInB,KAAKH,SAASuB,OAC3B,CAEA,uBAAMC,GACJ,MAAO,IAAIrB,KAAKH,SAASgB,UAAUS,KAAIC,IAAY,CACjDhB,QAASgB,EAAa,GAAGf,IAAI,WAC7BgB,QAASD,EAAa,GAAGf,IAAI,cAEjC,CAEAiB,WAAAA,CAAYC,GACV,MAAM,QAAEnB,EAAO,MAAEoB,EAAK,IAAEC,GAAQF,EAEhC,OAAOG,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAMjC,EAAWG,KAAKH,SAASW,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKR,EACVQ,EAAEG,IAAI,OAASmB,GAAStB,EAAEG,IAAI,SAAWoB,GAC3CG,EAASC,KAAK3B,GAGlB0B,EAASE,UAAU,GAEvB,CAEAC,aAAAA,GAAuC,E,2GC5E1B,MAAMC,UACX7C,EAAAA,QAQRmC,WAAAA,CAAYC,GACV,OAAOG,EAAAA,EAAAA,mBAA0BC,UAC/B,MAGMM,SAHcC,EAAAA,EAAAA,GAClBzC,MAAM6B,YAAYC,GAAQY,MAAKC,EAAAA,EAAAA,QAEd,GACnBR,EAASC,KACP,IAAId,EAAAA,EAAc,IACbkB,EAAKI,SACRC,SAAS,GAADC,OAAKN,EAAKO,KAAI,KAAAD,OAAIhB,EAAOC,MAAK,KAAAe,OAAIhB,EAAOE,KACjDA,IAAKF,EAAOE,IACZD,MAAOD,EAAOC,MACdiB,IAAKR,EACF5B,IAAI,OACJqC,MACCC,KAAKC,IAAIrB,EAAOC,MAAQS,EAAK5B,IAAI,SAAU,GAC3CsC,KAAKC,IAAIrB,EAAOE,IAAMQ,EAAK5B,IAAI,SAAU,OAKjDuB,EAASE,UAAU,GAEvB,CAKA,gBAAMe,GACJ,MAAMC,EAAU,GAGhB,IAAK,MAAO1C,EAASV,KAAaG,KAAKH,SAAU,CAC/C,IAAIqD,EACJ,IAAK,MAAMC,KAAWtD,EAElBqD,GACAA,EAActB,KAAOuB,EAAQ3C,IAAI,UACjC0C,EAAcvB,OAASwB,EAAQ3C,IAAI,OAEnC0C,EAActB,IAAMuB,EAAQ3C,IAAI,QAE5B0C,GACFD,EAAQtC,KAAKuC,GAEfA,EAAgB,CACd3C,UACAoB,MAAOwB,EAAQ3C,IAAI,SACnBoB,IAAKuB,EAAQ3C,IAAI,SAInB0C,GACFD,EAAQtC,KAAKuC,EAEjB,CAEA,OAAOD,CACT,CAOAf,aAAAA,GAAuC,E","sources":["../../../plugins/config/src/FromConfigAdapter/FromConfigAdapter.ts","../../../plugins/config/src/FromConfigSequenceAdapter/FromConfigSequenceAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport SimpleFeature, {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\n/**\n * Adapter that just returns the features defined in its `features` configuration\n * key, like:\n *   `\"features\": [ { \"refName\": \"ctgA\", \"start\":1, \"end\":20 }, ... ]`\n */\n\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n  protected features: Map<string, Feature[]>\n\n  constructor(\n    conf: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(conf, getSubAdapter, pluginManager)\n    const feats = readConfObject(conf, 'features') as SimpleFeatureSerialized[]\n    this.features = FromConfigAdapter.makeFeatures(feats || [])\n  }\n\n  static makeFeatures(fdata: SimpleFeatureSerialized[]) {\n    const features = new Map<string, Feature[]>()\n    for (const entry of fdata) {\n      if (entry) {\n        const f = this.makeFeature(entry)\n        const refName = f.get('refName') as string\n        let bucket = features.get(refName)\n        if (!bucket) {\n          bucket = []\n          features.set(refName, bucket)\n        }\n\n        bucket.push(f)\n      }\n    }\n\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n      refFeatures.sort((a, b) => a.get('start') - b.get('start'))\n    }\n\n    return features\n  }\n\n  static makeFeature(data: SimpleFeatureSerialized) {\n    return new SimpleFeature(data)\n  }\n\n  async getRefNames() {\n    return [...this.features.keys()]\n  }\n\n  async getRefNameAliases() {\n    return [...this.features.values()].map(featureArray => ({\n      refName: featureArray[0].get('refName'),\n      aliases: featureArray[0].get('aliases'),\n    }))\n  }\n\n  getFeatures(region: NoAssemblyRegion) {\n    const { refName, start, end } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const features = this.features.get(refName) || []\n      for (const f of features) {\n        if (f.get('end') > start && f.get('start') < end) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n","import SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { toArray } from 'rxjs/operators'\nimport { RegionsAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\n\n// locals\nimport FromConfigAdapter from '../FromConfigAdapter/FromConfigAdapter'\nimport { firstValueFrom } from 'rxjs'\n\nexport default class FromConfigSequenceAdapter\n  extends FromConfigAdapter\n  implements RegionsAdapter\n{\n  /**\n   * Fetch features for a certain region\n   * @param region - Region\n   * @returns Observable of Feature objects in the region\n   */\n  getFeatures(region: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const feats = await firstValueFrom(\n        super.getFeatures(region).pipe(toArray()),\n      )\n      const feat = feats[0]\n      observer.next(\n        new SimpleFeature({\n          ...feat.toJSON(),\n          uniqueId: `${feat.id()}:${region.start}-${region.end}`,\n          end: region.end,\n          start: region.start,\n          seq: feat\n            .get('seq')\n            .slice(\n              Math.max(region.start - feat.get('start'), 0),\n              Math.max(region.end - feat.get('start'), 0),\n            ),\n        }),\n      )\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * Get refName, start, and end for all features after collapsing any overlaps\n   */\n  async getRegions() {\n    const regions = []\n\n    // recall: features are stored in this object sorted by start coordinate\n    for (const [refName, features] of this.features) {\n      let currentRegion\n      for (const feature of features) {\n        if (\n          currentRegion &&\n          currentRegion.end >= feature.get('start') &&\n          currentRegion.start <= feature.get('end')\n        ) {\n          currentRegion.end = feature.get('end')\n        } else {\n          if (currentRegion) {\n            regions.push(currentRegion)\n          }\n          currentRegion = {\n            refName,\n            start: feature.get('start'),\n            end: feature.get('end'),\n          }\n        }\n      }\n      if (currentRegion) {\n        regions.push(currentRegion)\n      }\n    }\n\n    return regions\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n"],"names":["FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","features","feats","readConfObject","this","makeFeatures","fdata","Map","entry","f","makeFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","data","SimpleFeature","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources","FromConfigSequenceAdapter","feat","firstValueFrom","pipe","toArray","toJSON","uniqueId","concat","id","seq","slice","Math","max","getRegions","regions","currentRegion","feature"],"sourceRoot":""}