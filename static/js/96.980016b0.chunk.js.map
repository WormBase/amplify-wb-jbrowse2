{"version":3,"file":"static/js/96.980016b0.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedAdapter/BedAdapter.ts","../../../plugins/bed/src/util.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature } from '@jbrowse/core/util'\nimport { featureData } from '../util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class BedAdapter extends BaseFeatureDataAdapter {\n  protected bedFeatures?: Promise<{\n    header: string\n    features: Record<string, string[]>\n    parser: BED\n    columnNames: string[]\n    scoreColumn: string\n    colRef: number\n    colStart: number\n    colEnd: number\n  }>\n\n  protected intervalTrees: Record<\n    string,\n    Promise<IntervalTree | undefined> | undefined\n  > = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const features = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const tab = line.indexOf('\\t')\n      const refName = line.slice(0, tab)\n      if (!features[refName]) {\n        features[refName] = []\n      }\n      features[refName].push(line)\n    }\n\n    const autoSql = this.getConf('autoSql') as string\n    const parser = new BED({ autoSql })\n    const columnNames = this.getConf('columnNames')\n    const scoreColumn = this.getConf('scoreColumn')\n    const colRef = this.getConf('colRef')\n    const colStart = this.getConf('colStart')\n    const colEnd = this.getConf('colEnd')\n\n    return {\n      header,\n      features,\n      parser,\n      columnNames,\n      scoreColumn,\n      colRef,\n      colStart,\n      colEnd,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedFeatures) {\n      this.bedFeatures = this.loadDataP(opts).catch(e => {\n        this.bedFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { features } = await this.loadData(opts)\n    return Object.keys(features)\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureIntervalTreeHelper(refName: string) {\n    const { colRef, colStart, colEnd, features, parser, scoreColumn } =\n      await this.loadData()\n    const lines = features[refName]\n    if (!lines) {\n      return undefined\n    }\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret = lines.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(\n        f,\n        colRef,\n        colStart,\n        colEnd,\n        scoreColumn,\n        parser,\n        uniqueId,\n        names,\n      )\n    })\n\n    for (const obj of ret) {\n      intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n    }\n    return intervalTree\n  }\n\n  private async loadFeatureIntervalTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(\n        refName,\n      ).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureIntervalTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport BED from '@gmod/bed'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  const newData = Object.fromEntries(\n    feature.tags().map(tag => [tag, feature.get(tag)]),\n  )\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  return new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n}\n\nfunction defaultParser(fields: string[], line: string) {\n  return Object.fromEntries(line.split('\\t').map((f, i) => [fields[i], f]))\n}\n\nexport function featureData(\n  line: string,\n  colRef: number,\n  colStart: number,\n  colEnd: number,\n  scoreColumn: string,\n  parser: BED,\n  uniqueId: string,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const refName = l[colRef]\n  const start = +l[colStart]\n  const colSame = colStart === colEnd ? 1 : 0\n\n  const end = +l[colEnd] + colSame\n  const data = names\n    ? defaultParser(names, line)\n    : parser.parseLine(line, { uniqueId })\n\n  const { blockCount, blockSizes, blockStarts, chromStarts } = data\n\n  if (blockCount) {\n    const starts = chromStarts || blockStarts || []\n    const sizes = blockSizes\n    const blocksOffset = start\n    data.subfeatures = []\n\n    for (let b = 0; b < blockCount; b += 1) {\n      const bmin = (starts[b] || 0) + blocksOffset\n      const bmax = bmin + (sizes[b] || 0)\n      data.subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        type: 'block',\n      })\n    }\n  }\n\n  if (scoreColumn) {\n    data.score = +data[scoreColumn]\n  }\n  delete data.chrom\n  delete data.chromStart\n  delete data.chromEnd\n  const f = new SimpleFeature({\n    ...data,\n    start,\n    end,\n    refName,\n    uniqueId,\n  })\n  return f.get('thickStart') ? ucscProcessedTranscript(f) : f\n}\n"],"names":["isGzip","buf","BedAdapter","_BaseFeatureDataAdapt","_loadDataP","_loadData","_getRefNames","_getHeader","_getNames","_loadFeatureIntervalTreeHelper","_loadFeatureIntervalTree","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","bedFeatures","intervalTrees","_createClass","key","value","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","pm","bedLoc","buffer","data","lines","headerLines","i","header","features","line","tab","refName","autoSql","parser","columnNames","scoreColumn","colRef","colStart","colEnd","_args","wrap","_context","prev","next","undefined","this","pluginManager","getConf","openLocation","readFile","sent","unzip","t0","Error","TextDecoder","fatal","decode","split","filter","f","startsWith","push","join","indexOf","slice","BED","abrupt","stop","_callee2","_this2","_args2","_context2","loadDataP","catch","e","_callee3","_yield$this$loadData","_args3","_context3","loadData","Object","keys","_callee4","_yield$this$loadData2","_args4","_context4","_callee5","_yield$this$loadData3","defs","defline","_context5","at","includes","map","field","trim","_x","_callee6","_yield$this$loadData4","names","intervalTree","ret","_iterator","_step","obj","_this3","_context6","getNames","IntervalTree","uniqueId","id","featureData","_createForOfIteratorHelper","s","n","done","insert","get","err","_x2","_callee7","_this4","_context7","loadFeatureIntervalTreeHelper","query","_ref","_this5","ObservableCreate","_x3","_callee8","observer","start","end","_context8","loadFeatureIntervalTree","search","forEach","complete","signal","BaseFeatureDataAdapter","capabilities","ucscProcessedTranscript","feature","children","thickStart","thickEnd","blocks","child","sort","a","b","newChildren","block","prime","type","leftPrime","rightPrime","newData","fromEntries","tags","tag","subfeatures","chromStarts","chromStart","chromEnd","chrom","blockStarts","blockSizes","blockCount","SimpleFeature","l","colSame","fields","defaultParser","parseLine","starts","sizes","blocksOffset","bmin","bmax","score","_objectSpread"],"sourceRoot":""}