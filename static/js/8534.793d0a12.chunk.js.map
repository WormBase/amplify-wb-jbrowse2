{"version":3,"file":"static/js/8534.793d0a12.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/CramAdapter/CramSlightlyLazyFeature.ts","../../../plugins/alignments/src/CramAdapter/util.ts","../../../plugins/alignments/src/CramAdapter/CramAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { CramRecord } from '@gmod/cram'\n\n// locals\nimport CramAdapter from './CramAdapter'\nimport { readFeaturesToCIGAR, readFeaturesToMismatches } from './util'\n\nexport default class CramSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n  constructor(\n    private record: CramRecord,\n    private _store: CramAdapter,\n  ) {}\n\n  _get_name() {\n    return this.record.readName\n  }\n\n  _get_start() {\n    return this.record.alignmentStart - 1\n  }\n\n  _get_end() {\n    return this.record.alignmentStart + (this.record.lengthOnRef ?? 1) - 1\n  }\n\n  _get_cram_read_features() {\n    return this.record.readFeatures\n  }\n\n  _get_type() {\n    return 'match'\n  }\n\n  _get_score() {\n    return this.record.mappingQuality\n  }\n\n  _get_flags() {\n    return this.record.flags\n  }\n\n  _get_strand() {\n    return this.record.isReverseComplemented() ? -1 : 1\n  }\n\n  _read_group_id() {\n    return this._store.samHeader.readGroups?.[this.record.readGroupId]\n  }\n\n  _get_qual() {\n    return (this.record.qualityScores || []).join(' ')\n  }\n\n  qualRaw() {\n    return this.record.qualityScores\n  }\n\n  _get_refName() {\n    return this._store.refIdToName(this.record.sequenceId)\n  }\n\n  _get_is_paired() {\n    return !!this.record.mate\n  }\n\n  _get_pair_orientation() {\n    return this.record.isPaired() ? this.record.getPairOrientation() : undefined\n  }\n\n  _get_template_length() {\n    return this.record.templateLength || this.record.templateSize\n  }\n\n  _get_next_ref() {\n    return this.record.mate\n      ? this._store.refIdToName(this.record.mate.sequenceId)\n      : undefined\n  }\n\n  _get_next_segment_position() {\n    return this.record.mate\n      ? `${this._store.refIdToName(this.record.mate.sequenceId)}:${\n          this.record.mate.alignmentStart\n        }`\n      : undefined\n  }\n\n  _get_next_pos() {\n    return this.record.mate?.alignmentStart\n  }\n\n  _get_tags() {\n    const RG = this._read_group_id()\n    const { tags } = this.record\n    // avoids a tag copy if no RG, but just copy if there is one\n    return RG !== undefined ? { ...tags, RG } : tags\n  }\n\n  _get_seq() {\n    return this.record.getReadBases()\n  }\n\n  // generate a CIGAR, based on code from jkbonfield\n  _get_CIGAR() {\n    return readFeaturesToCIGAR(\n      this.record.readFeatures,\n      this.record.alignmentStart,\n      this.record.readLength,\n      this.record._refRegion,\n    )\n  }\n\n  tags() {\n    return Object.getOwnPropertyNames(CramSlightlyLazyFeature.prototype)\n      .filter(\n        prop =>\n          prop.startsWith('_get_') &&\n          prop !== '_get_mismatches' &&\n          prop !== '_get_cram_read_features',\n      )\n      .map(methodName => methodName.replace('_get_', ''))\n  }\n\n  id() {\n    return `${this._store.id}-${this.record.uniqueId}`\n  }\n\n  get(field: string) {\n    const methodName = `_get_${field}`\n    // @ts-expect-error\n    if (this[methodName]) {\n      // @ts-expect-error\n      return this[methodName]()\n    }\n    return undefined\n  }\n\n  parent() {\n    return undefined\n  }\n\n  children() {\n    return undefined\n  }\n\n  set() {}\n\n  pairedFeature() {\n    return false\n  }\n\n  _get_clipPos() {\n    const mismatches = this.get('mismatches')\n    if (mismatches.length) {\n      const record =\n        this.get('strand') === -1 ? mismatches.at(-1) : mismatches[0]\n      const { type, cliplen } = record\n      if (type === 'softclip' || type === 'hardclip') {\n        return cliplen\n      }\n    }\n    return 0\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...Object.fromEntries(\n        this.tags()\n          .map(t => [t, this.get(t)])\n          .filter(elt => elt[1] !== undefined),\n      ),\n      uniqueId: this.id(),\n    }\n  }\n\n  _get_mismatches() {\n    const readFeatures = this.record.readFeatures\n    const qual = this.qualRaw()\n    const start = this.get('start')\n    return readFeaturesToMismatches(readFeatures, start, qual)\n  }\n}\n","import { CramRecord } from '@gmod/cram'\n\ntype ReadFeatures = CramRecord['readFeatures']\n\nexport interface Mismatch {\n  qual?: number\n  start: number\n  length: number\n  type: string\n  base: string | undefined\n  altbase?: string\n  seq?: string\n  cliplen?: number\n}\n\nexport function readFeaturesToMismatches(\n  readFeatures: ReadFeatures,\n  start: number,\n  qual?: number[] | null,\n) {\n  if (!readFeatures) {\n    return []\n  }\n  const mismatches: Mismatch[] = new Array(readFeatures.length)\n  let j = 0\n  let insLen = 0\n  let refPos = 0\n  let sublen = 0\n  let lastPos = start\n\n  for (const { refPos: p, code, pos, data, sub, ref } of readFeatures) {\n    sublen = refPos - lastPos\n    lastPos = refPos\n\n    if (sublen && insLen > 0) {\n      mismatches[j++] = {\n        start: refPos,\n        type: 'insertion',\n        base: `${insLen}`,\n        length: 0,\n      }\n      insLen = 0\n    }\n    refPos = p - 1 - start\n\n    if (code === 'X') {\n      // substitution\n      mismatches[j++] = {\n        start: refPos,\n        length: 1,\n        base: sub,\n        qual: qual?.[pos - 1],\n        altbase: ref?.toUpperCase(),\n        type: 'mismatch',\n      }\n    } else if (code === 'I') {\n      // insertion\n      mismatches[j++] = {\n        start: refPos,\n        type: 'insertion',\n        base: `${data.length}`,\n        length: 0,\n      }\n    } else if (code === 'N') {\n      // reference skip\n      mismatches[j++] = {\n        type: 'skip',\n        length: data,\n        start: refPos,\n        base: 'N',\n      }\n    } else if (code === 'S') {\n      // soft clip\n      const len = data.length\n      mismatches[j++] = {\n        start: refPos,\n        type: 'softclip',\n        base: `S${len}`,\n        cliplen: len,\n        length: 1,\n      }\n    } else if (code === 'P') {\n      // padding\n    } else if (code === 'H') {\n      // hard clip\n      const len = data\n      mismatches[j++] = {\n        start: refPos,\n        type: 'hardclip',\n        base: `H${len}`,\n        cliplen: len,\n        length: 1,\n      }\n    } else if (code === 'D') {\n      // deletion\n      mismatches[j++] = {\n        type: 'deletion',\n        length: data,\n        start: refPos,\n        base: '*',\n      }\n    } else if (code === 'b') {\n      // stretch of bases\n    } else if (code === 'q') {\n      // stretch of qual scores\n    } else if (code === 'B') {\n      // a pair of [base, qual]\n    } else if (code === 'i') {\n      // single-base insertion, we collect these if there are multiple in a row\n      // into a single insertion entry\n      insLen++\n    } else if (code === 'Q') {\n      // single quality value\n    }\n  }\n\n  if (sublen && insLen > 0) {\n    mismatches[j++] = {\n      start: refPos,\n      type: 'insertion',\n      base: `${insLen}`,\n      length: 0,\n    }\n    insLen = 0\n  }\n\n  return mismatches.slice(0, j)\n}\n\nexport function readFeaturesToCIGAR(\n  readFeatures: ReadFeatures,\n  alignmentStart: number,\n  readLen: number,\n  refRegion?: { seq: string; start: number },\n) {\n  let seq = ''\n  let cigar = ''\n  let op = 'M'\n  let oplen = 0\n  if (!refRegion) {\n    return ''\n  }\n\n  // not sure I should access these, but...\n  const ref = refRegion.seq\n  const refStart = refRegion.start\n  let lastPos = alignmentStart\n  let sublen = 0\n  let insLen = 0\n  if (readFeatures !== undefined) {\n    for (const { code, refPos, sub, data } of readFeatures) {\n      sublen = refPos - lastPos\n      seq += ref.slice(lastPos - refStart, refPos - refStart)\n      lastPos = refPos\n\n      if (insLen > 0 && sublen) {\n        cigar += `${insLen}I`\n        insLen = 0\n      }\n      if (oplen && op !== 'M') {\n        cigar += `${oplen}${op}`\n        oplen = 0\n      }\n      if (sublen) {\n        op = 'M'\n        oplen += sublen\n      }\n\n      if (code === 'b') {\n        // An array of bases stored verbatim\n        const ret = data.split(',')\n        const added = String.fromCharCode(...ret)\n        seq += added\n        lastPos += added.length\n        oplen += added.length\n      } else if (code === 'B') {\n        // Single base (+ qual score)\n        seq += sub\n        lastPos++\n        oplen++\n      } else if (code === 'X') {\n        // Substitution\n        seq += sub\n        lastPos++\n        oplen++\n      } else if (code === 'D' || code === 'N') {\n        // Deletion or Ref Skip\n        lastPos += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += data + code\n        oplen = 0\n      } else if (code === 'I' || code === 'S') {\n        // Insertion or soft-clip\n        seq += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += data.length + code\n        oplen = 0\n      } else if (code === 'i') {\n        // Single base insertion\n        // seq += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        insLen++\n        seq += data\n        oplen = 0\n      } else if (code === 'P') {\n        // Padding\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += `${data}P`\n      } else if (code === 'H') {\n        // Hard clip\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += `${data}H`\n        oplen = 0\n      } // else q or Q\n    }\n  } else {\n    sublen = readLen - seq.length\n  }\n  if (seq.length !== readLen) {\n    sublen = readLen - seq.length\n    seq += ref.slice(lastPos - refStart, lastPos - refStart + sublen)\n\n    if (oplen && op !== 'M') {\n      cigar += `${oplen}${op}`\n      oplen = 0\n    }\n    op = 'M'\n    oplen += sublen\n  }\n  if (sublen && insLen > 0) {\n    cigar += `${insLen}I`\n  }\n  if (oplen) {\n    cigar += `${oplen}${op}`\n  }\n\n  return cigar\n}\n","import { CraiIndex, IndexedCramFile, CramRecord } from '@gmod/cram'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n  BaseSequenceAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  checkAbortSignal,\n  Region,\n  Feature,\n  updateStatus,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { toArray } from 'rxjs/operators'\nimport { firstValueFrom } from 'rxjs'\n\n// locals\nimport CramSlightlyLazyFeature from './CramSlightlyLazyFeature'\nimport { IFilter } from '../shared'\n\ninterface Header {\n  idToName?: string[]\n  nameToId?: Record<string, number>\n  readGroups?: (string | undefined)[]\n}\n\nexport default class CramAdapter extends BaseFeatureDataAdapter {\n  samHeader: Header = {}\n\n  private setupP?: Promise<{\n    samHeader: Header\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  private configureP?: Promise<{\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  // maps a refname to an id\n  private seqIdToRefName: string[] | undefined\n\n  // maps a seqId to original refname, passed specially to render args, to a seqid\n  private seqIdToOriginalRefName: string[] = []\n\n  public async configurePre() {\n    const cramLocation = this.getConf('cramLocation')\n    const craiLocation = this.getConf('craiLocation')\n    if (!cramLocation) {\n      throw new Error('missing cramLocation argument')\n    }\n    if (!craiLocation) {\n      throw new Error('missing craiLocation argument')\n    }\n    const pm = this.pluginManager\n\n    const cram = new IndexedCramFile({\n      cramFilehandle: openLocation(cramLocation, pm),\n      index: new CraiIndex({ filehandle: openLocation(craiLocation, pm) }),\n      seqFetch: (...args) => this.seqFetch(...args),\n      checkSequenceMD5: false,\n      fetchSizeLimit: 200_000_000, // just make this a large size to avoid hitting it\n    })\n\n    if (!this.getSubAdapter) {\n      throw new Error('Error getting subadapter')\n    }\n\n    const seqConf = this.getConf('sequenceAdapter')\n    const subadapter = await this.getSubAdapter(seqConf)\n\n    return {\n      cram,\n      sequenceAdapter: subadapter.dataAdapter as BaseSequenceAdapter,\n    }\n  }\n\n  public async configure() {\n    if (!this.configureP) {\n      this.configureP = this.configurePre().catch(e => {\n        this.configureP = undefined\n        throw e\n      })\n    }\n    return this.configureP\n  }\n\n  async getHeader(_opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    return cram.cram.getHeaderText()\n  }\n\n  private async seqFetch(\n    seqId: number,\n    start: number,\n    end: number,\n  ): Promise<string> {\n    start -= 1 // convert from 1-based closed to interbase\n\n    const { sequenceAdapter } = await this.configure()\n    const refName = this.refIdToOriginalName(seqId) || this.refIdToName(seqId)\n    if (!refName) {\n      throw new Error('unknown')\n    }\n\n    const seqChunks = await firstValueFrom(\n      sequenceAdapter\n        .getFeatures({\n          refName,\n          start,\n          end,\n          assemblyName: '',\n        })\n        .pipe(toArray()),\n    )\n\n    const sequence = seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .map(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        return chunkSeq.slice(trimStart, trimStart + trimLength)\n      })\n      .join('')\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    return updateStatus('Downloading index', statusCallback, async () => {\n      const conf = await this.configure()\n      const { cram } = conf\n      const samHeader = await cram.cram.getSamHeader()\n\n      // use the @SQ lines in the header to figure out the\n      // mapping between ref ID numbers and names\n      const idToName: string[] = []\n      const nameToId: Record<string, number> = {}\n      samHeader\n        .filter(l => l.tag === 'SQ')\n        .forEach((sqLine, refId) => {\n          sqLine.data.forEach(item => {\n            if (item.tag === 'SN') {\n              // this is the ref name\n              const refName = item.value\n              nameToId[refName] = refId\n              idToName[refId] = refName\n            }\n          })\n        })\n\n      const readGroups = samHeader\n        .filter(l => l.tag === 'RG')\n        .map(rgLine => rgLine.data.find(item => item.tag === 'ID')?.value)\n\n      const data = { idToName, nameToId, readGroups }\n      this.samHeader = data\n      return { samHeader: data, ...conf }\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { samHeader } = await this.setup(opts)\n    if (!samHeader.idToName) {\n      throw new Error('CRAM file has no header lines')\n    }\n    return samHeader.idToName\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refNameToId(refName: string) {\n    if (this.samHeader.nameToId) {\n      return this.samHeader.nameToId[refName]\n    }\n    if (this.seqIdToRefName) {\n      return this.seqIdToRefName.indexOf(refName)\n    }\n    return undefined\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refIdToName(refId: number) {\n    return this.samHeader.idToName?.[refId] || this.seqIdToRefName?.[refId]\n  }\n\n  refIdToOriginalName(refId: number) {\n    return this.seqIdToOriginalRefName[refId]\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions & {\n      filterBy: IFilter\n    },\n  ) {\n    const { signal, filterBy, statusCallback = () => {} } = opts || {}\n    const { refName, start, end, originalRefName } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const { cram } = await this.setup(opts)\n\n      const refId = this.refNameToId(refName)\n      if (refId === undefined) {\n        console.warn('Unknown refName', refName)\n        observer.complete()\n        return\n      }\n\n      if (originalRefName) {\n        this.seqIdToOriginalRefName[refId] = originalRefName\n      }\n      const records = await updateStatus(\n        'Downloading alignments',\n        statusCallback,\n        () => cram.getRecordsForRange(refId, start, end),\n      )\n      checkAbortSignal(signal)\n      await updateStatus('Processing alignments', statusCallback, () => {\n        const {\n          flagInclude = 0,\n          flagExclude = 0,\n          tagFilter,\n          readName,\n        } = filterBy || {}\n\n        for (const record of records) {\n          const flags = record.flags\n          if ((flags & flagInclude) !== flagInclude && !(flags & flagExclude)) {\n            continue\n          }\n\n          if (tagFilter) {\n            const v =\n              tagFilter.tag === 'RG'\n                ? this.samHeader.readGroups?.[record.readGroupId]\n                : record.tags[tagFilter.tag]\n            if (!(v === '*' ? v !== undefined : `${v}` === tagFilter.value)) {\n              continue\n            }\n          }\n\n          if (readName && record.readName !== readName) {\n            continue\n          }\n          observer.next(this.cramRecordToFeature(record))\n        }\n\n        observer.complete()\n      })\n    }, signal)\n  }\n\n  freeResources(/* { region } */): void {}\n\n  cramRecordToFeature(record: CramRecord) {\n    return new CramSlightlyLazyFeature(record, this)\n  }\n\n  // we return the configured fetchSizeLimit, and the bytes for the region\n  async getMultiRegionFeatureDensityStats(\n    regions: Region[],\n    opts?: BaseOptions,\n  ) {\n    const bytes = await this.bytesForRegions(regions, opts)\n    const fetchSizeLimit = this.getConf('fetchSizeLimit')\n    return {\n      bytes,\n      fetchSizeLimit,\n    }\n  }\n\n  /**\n   * get the approximate number of bytes queried from the file for the given\n   * query regions\n   * @param regions - list of query regions\n   */\n  private async bytesForRegions(regions: Region[], _opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    const blockResults = await Promise.all(\n      regions.map(region => {\n        const { refName, start, end } = region\n        const chrId = this.refNameToId(refName)\n        return chrId !== undefined\n          ? cram.index.getEntriesForRange(chrId, start, end)\n          : [{ sliceBytes: 0 }]\n      }),\n    )\n\n    return blockResults.flat().reduce((a, b) => a + b.sliceBytes, 0)\n  }\n}\n"],"names":["CramSlightlyLazyFeature","record","_store","_classCallCheck","_createClass","key","value","this","readName","alignmentStart","_this$record$lengthOn","lengthOnRef","readFeatures","mappingQuality","flags","isReverseComplemented","_this$_store$samHeade","samHeader","readGroups","readGroupId","qualityScores","join","refIdToName","sequenceId","mate","isPaired","getPairOrientation","undefined","templateLength","templateSize","concat","_this$record$mate","RG","_read_group_id","tags","_objectSpread","getReadBases","readLen","refRegion","seq","cigar","op","oplen","ref","refStart","start","lastPos","sublen","insLen","_step2","_iterator2","_createForOfIteratorHelper","s","n","done","_step2$value","code","refPos","sub","data","slice","ret","split","added","String","fromCharCode","apply","_toConsumableArray","length","err","e","f","readFeaturesToCIGAR","readLength","_refRegion","Object","getOwnPropertyNames","prototype","filter","prop","startsWith","map","methodName","replace","id","uniqueId","field","mismatches","get","at","type","cliplen","_this","fromEntries","t","elt","qual","qualRaw","_step","Array","j","_iterator","_step$value","p","pos","base","altbase","toUpperCase","len","readFeaturesToMismatches","CramAdapter","_BaseFeatureDataAdapt","_configurePre","_configure","_getHeader","_seqFetch","_setupPre","_setup","_getRefNames","_getMultiRegionFeatureDensityStats","_bytesForRegions","_inherits","_super","_createSuper","_len","arguments","args","_key","call","setupP","configureP","seqIdToRefName","seqIdToOriginalRefName","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cramLocation","craiLocation","pm","cram","seqConf","subadapter","_this2","wrap","_context","prev","next","getConf","Error","pluginManager","IndexedCramFile","cramFilehandle","openLocation","index","CraiIndex","filehandle","seqFetch","checkSequenceMD5","fetchSizeLimit","getSubAdapter","sent","abrupt","sequenceAdapter","dataAdapter","stop","_callee2","_this3","_context2","configurePre","catch","_x","_callee3","_opts","_yield$this$configure","_context3","configure","getHeaderText","_x2","_x3","_x4","_callee4","seqId","end","_yield$this$configure2","refName","seqChunks","sequence","_context4","refIdToOriginalName","firstValueFrom","getFeatures","assemblyName","pipe","toArray","sort","a","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","toLocaleString","_x5","_callee6","opts","_ref$statusCallback","statusCallback","_this4","_context6","updateStatus","_callee5","conf","idToName","nameToId","_context5","getSamHeader","l","tag","forEach","sqLine","refId","item","rgLine","_rgLine$data$find","find","_x6","_callee7","_this5","_context7","setupPre","_x7","_callee8","_yield$this$setup","_context8","setup","indexOf","_this$samHeader$idToN","_this$seqIdToRefName","region","_ref4","_this6","_ref3","signal","filterBy","_ref3$statusCallback","originalRefName","ObservableCreate","_x8","_callee9","observer","_yield$_this6$setup","records","_context9","refNameToId","console","warn","complete","getRecordsForRange","checkAbortSignal","_ref5","_ref5$flagInclude","flagInclude","_ref5$flagExclude","flagExclude","tagFilter","_this6$samHeader$read","v","cramRecordToFeature","_x9","_x10","_callee10","regions","bytes","_context10","bytesForRegions","_x11","_x12","_callee11","_yield$this$configure3","blockResults","_this7","_context11","Promise","all","chrId","getEntriesForRange","sliceBytes","flat","reduce","BaseFeatureDataAdapter"],"sourceRoot":""}