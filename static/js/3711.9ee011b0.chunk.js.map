{"version":3,"file":"static/js/3711.9ee011b0.chunk.js","mappings":"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","sources":["../../../plugins/gff3/src/Gff3TabixAdapter/Gff3TabixAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport gff, { GFF3Feature, GFF3FeatureLineWithRefs } from '@gmod/gff'\nimport { Observer } from 'rxjs'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\ninterface LineFeature {\n  start: number\n  end: number\n  lineHash: number\n  fields: string[]\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gff: TabixIndexedFile\n\n  protected dontRedispatch: string[]\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const gffGzLocation = readConfObject(config, 'gffGzLocation')\n    const indexType = readConfObject(config, ['index', 'indexType'])\n    const location = readConfObject(config, ['index', 'location'])\n    const dontRedispatch = readConfObject(config, 'dontRedispatch')\n\n    this.dontRedispatch = dontRedispatch || ['chromosome', 'contig', 'region']\n    this.gff = new TabixIndexedFile({\n      filehandle: openLocation(gffGzLocation, this.pluginManager),\n      csiFilehandle:\n        indexType === 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      tbiFilehandle:\n        indexType !== 'CSI'\n          ? openLocation(location, this.pluginManager)\n          : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n      renameRefSeqs: (n: string) => n,\n    })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.gff.getReferenceSequenceNames(opts)\n  }\n\n  public async getHeader() {\n    return this.gff.getHeader()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const metadata = await this.gff.getMetadata()\n      await this.getFeaturesHelper(query, opts, metadata, observer, true)\n    }, opts.signal)\n  }\n\n  private async getFeaturesHelper(\n    query: Region,\n    opts: BaseOptions = {},\n    metadata: { columnNumbers: { start: number; end: number } },\n    observer: Observer<Feature>,\n    allowRedispatch: boolean,\n    originalQuery = query,\n  ) {\n    try {\n      const lines: LineFeature[] = []\n\n      await this.gff.getLines(\n        query.refName,\n        query.start,\n        query.end,\n        (line: string, fileOffset: number) => {\n          lines.push(this.parseLine(metadata.columnNumbers, line, fileOffset))\n        },\n      )\n      if (allowRedispatch && lines.length) {\n        let minStart = Infinity\n        let maxEnd = -Infinity\n        lines.forEach(line => {\n          const featureType = line.fields[2]\n          // only expand redispatch range if feature is not a \"dontRedispatch\" type\n          // skips large regions like chromosome,region\n          if (!this.dontRedispatch.includes(featureType)) {\n            const start = line.start - 1 // gff is 1-based\n            if (start < minStart) {\n              minStart = start\n            }\n            if (line.end > maxEnd) {\n              maxEnd = line.end\n            }\n          }\n        })\n        if (maxEnd > query.end || minStart < query.start) {\n          // make a new feature callback to only return top-level features\n          // in the original query range\n          await this.getFeaturesHelper(\n            { ...query, start: minStart, end: maxEnd },\n            opts,\n            metadata,\n            observer,\n            false,\n            query,\n          )\n          return\n        }\n      }\n\n      const gff3 = lines\n        .map((lineRecord: LineFeature) => {\n          if (lineRecord.fields[8] && lineRecord.fields[8] !== '.') {\n            if (!lineRecord.fields[8].includes('_lineHash')) {\n              lineRecord.fields[8] += `;_lineHash=${lineRecord.lineHash}`\n            }\n          } else {\n            lineRecord.fields[8] = `_lineHash=${lineRecord.lineHash}`\n          }\n          return lineRecord.fields.join('\\t')\n        })\n        .join('\\n')\n\n      const features = gff.parseStringSync(gff3, {\n        parseFeatures: true,\n        parseComments: false,\n        parseDirectives: false,\n        parseSequences: false,\n        disableDerivesFromReferences: true,\n      })\n\n      features.forEach(featureLocs =>\n        this.formatFeatures(featureLocs).forEach(f => {\n          if (\n            doesIntersect2(\n              f.get('start'),\n              f.get('end'),\n              originalQuery.start,\n              originalQuery.end,\n            )\n          ) {\n            observer.next(f)\n          }\n        }),\n      )\n      observer.complete()\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n\n  private parseLine(\n    columnNumbers: { start: number; end: number },\n    line: string,\n    fileOffset: number,\n  ) {\n    const fields = line.split('\\t')\n\n    // note: index column numbers are 1-based\n    return {\n      start: +fields[columnNumbers.start - 1],\n      end: +fields[columnNumbers.end - 1],\n      lineHash: fileOffset,\n      fields,\n    }\n  }\n\n  private formatFeatures(featureLocs: GFF3Feature) {\n    return featureLocs.map(\n      featureLoc =>\n        new SimpleFeature({\n          data: this.featureData(featureLoc),\n\n          id: `${this.id}-offset-${featureLoc.attributes!._lineHash![0]}`,\n        }),\n    )\n  }\n\n  private featureData(data: GFF3FeatureLineWithRefs) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    if (data.strand === '+') {\n      f.strand = 1\n    } else if (data.strand === '-') {\n      f.strand = -1\n    } else if (data.strand === '.') {\n      f.strand = 0\n    } else {\n      f.strand = undefined\n    }\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = new Set([\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ])\n    const dataAttributes = data.attributes || {}\n    for (const a of Object.keys(dataAttributes)) {\n      let b = a.toLowerCase()\n      if (defaultFields.has(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (dataAttributes[a] !== null) {\n        let attr: string | string[] | undefined = dataAttributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    }\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length > 0) {\n      f.subfeatures = data.child_features.flatMap(childLocs =>\n        childLocs.map(childLoc => this.featureData(childLoc)),\n      )\n    }\n\n    delete f.child_features\n    delete f.data\n    // delete f.derived_features\n    delete f._linehash\n    delete f.attributes\n    delete f.seq_id\n\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"names":["_default","_BaseFeatureDataAdapt","_getRefNames","_getHeader","_getFeaturesHelper","_inherits","_super","_createSuper","config","getSubAdapter","pluginManager","_this","_classCallCheck","call","gff","dontRedispatch","gffGzLocation","readConfObject","indexType","location","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","Math","pow","renameRefSeqs","n","_createClass","key","value","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","_args","arguments","wrap","_context","prev","next","length","abrupt","this","getReferenceSequenceNames","stop","apply","_callee2","_context2","getHeader","query","_ref","_this2","ObservableCreate","_x","_callee3","observer","metadata","_context3","getMetadata","sent","getFeaturesHelper","signal","_x2","_callee4","allowRedispatch","originalQuery","lines","minStart","maxEnd","gff3","_this3","_args4","_context4","getLines","refName","start","end","line","fileOffset","push","parseLine","columnNumbers","Infinity","forEach","featureType","fields","includes","_objectSpread","map","lineRecord","concat","lineHash","join","parseStringSync","parseFeatures","parseComments","parseDirectives","parseSequences","disableDerivesFromReferences","featureLocs","formatFeatures","f","doesIntersect2","get","complete","t0","error","split","_this4","featureLoc","SimpleFeature","data","featureData","id","attributes","_lineHash","_this5","strand","phase","Number","seq_id","score","defaultFields","Set","dataAttributes","_i","_Object$keys","Object","keys","a","b","toLowerCase","has","attr","Array","isArray","_attr","_slicedToArray","child_features","subfeatures","flatMap","childLocs","childLoc","_linehash","BaseFeatureDataAdapter"],"sourceRoot":""}