{"version":3,"file":"static/js/8111.a1b3d74a.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/SyntenyFeature.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = query + '-' + target\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart,\n    tend: +tend,\n    qname,\n    qstart: +qstart,\n    qend: +qend,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches,\n      blockLen: +blockLen,\n      mappingQual: +mappingQual,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from './SyntenyFeature'\nimport { isGzip, parseLineByLine } from '../util'\nimport {\n  getWeightedMeans,\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  PAFRecord,\n} from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const index = assemblyNames.indexOf(query.assemblyName)\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n        const flip = index === 0\n        const assemblyName = assemblyNames[+!flip]\n        if (index === 0) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["getMismatches","MismatchParser","SyntenyFeature","SimpleFeature","get","arg","this","super","weightedMean","tuples","valueSum","weightSum","reduce","_ref2","_ref3","value","weight","parsePAFLine","line","qname","qstart","qend","strand","tname","tstart","tend","numMatches","blockLen","mappingQual","fields","split","extra","Object","fromEntries","map","field","r","indexOf","slice","flipCigar","cigar","arr","i","length","push","op","parseCigar","PAFAdapter","BaseFeatureDataAdapter","constructor","arguments","setupP","setup","opts","setupPre","catch","e","undefined","pm","pluginManager","pafLocation","openLocation","getConf","buffer","readFile","buf","isGzip","unzip","parseLineByLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","_opts$regions","r1","regions","assemblyName","feats","idx","set","Set","feat","add","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","entry","key","quals","len","meanScoreMap","entries","_ref","val","zip","meanScore","min","max","Math","b","getWeightedMeans","index","start","end","refName","qref","concat","observer","complete","mateName","mateStart","mateEnd","flip","doesIntersect2","cg","rest","CIGAR","join","replaceAll","next","uniqueId","type","syntenyId","identity","mate","freeResources","capabilities","parseBed","text","Map","filter","f","startsWith","name","score","file","TextDecoder","fatal","decode","a","decoder","cb","blockStart","n","toString","trim"],"sourceRoot":""}