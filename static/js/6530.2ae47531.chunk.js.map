{"version":3,"file":"static/js/6530.2ae47531.chunk.js","mappings":"2KACO,SAASA,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEIH,EAAQ,IACVF,GAAKE,EACLA,GAASA,GAEPC,EAAS,IACXF,GAAKE,EACLA,GAAUA,GAGRE,IACFD,EAAIE,UAAYD,GAGlBD,EAAIG,SAASP,EAAGC,EAAGC,EAAOC,EAC5B,CAEO,SAASK,EACdR,EACAC,EACAC,EACAC,EACAC,EACAK,GAEIP,EAAQ,IACVF,GAAKE,EACLA,GAASA,GAEPC,EAAS,IACXF,GAAKE,EACLA,GAAUA,GAGRM,IACFL,EAAIM,YAAcD,GAEpBL,EAAIO,WAAWX,EAAGC,EAAGC,EAAOC,EAC9B,C,eCiEO,SAASS,EAAcC,GAUa,IAVZ,KAC7BC,EAAI,GACJC,EAAE,GACFC,EAAE,MACFC,GAMDJ,EACC,GAAa,6BAATC,EACF,OAAOI,EAAAA,EAAAA,IAAuCH,EAAIC,EAAIC,GACjD,GAAa,gBAATH,EACT,OAAOK,EAAAA,EAAAA,IAA0BJ,GAC5B,GAAa,eAATD,EACT,OAAOM,EAAAA,EAAAA,IAAyBL,EAAIC,EAAIC,GACnC,GAAa,aAATH,EAAqB,CAC9B,MAAMO,EAAIC,KAAKC,IAAIR,EAAGS,MAAOR,EAAGQ,OAC1BC,EAAIH,KAAKI,IAAIX,EAAGY,IAAKX,EAAGW,KAC9B,MAAO,CAAC,OAADC,OACgC,GAA9BN,KAAKO,MAAMP,KAAKQ,IAAIL,EAAIJ,IAAQ,oBAAAO,OACF,GAA9BN,KAAKO,MAAMP,KAAKQ,IAAIL,EAAIJ,IAAQ,aAE3C,CAEF,CC9HO,SAASU,EACdC,EACA5B,GAEA,MAAM,UAAE6B,GAAcD,EACtB,IAAKC,EACH,OAEF,MAAM,gBAAEC,IAAoBC,EAAAA,EAAAA,YAAWH,GACjCI,GAAOC,EAAAA,EAAAA,mBAAkBL,GACzBM,EAAeF,EAAKG,cAAc,GAClCC,EAAMN,EAAgBO,IAAIH,GAChC,IAAKE,EACH,QAGgBE,EAAAA,EAAAA,GAAeT,GDH5B,SAAuBU,GAY1B,IAADC,EAAA,IAZ4B,IAC7BxC,EAAG,KACH4B,EAAI,UACJC,EAAS,KACTG,EAAI,IACJI,GAODG,EACC,MAAME,EAAuB,GACvBC,GAAgBC,EAAAA,EAAAA,SAAQf,EAAM,iBAC9BlB,GAAmB,QAAZ8B,EAAAZ,EAAKgB,eAAO,IAAAJ,OAAA,EAAZA,EAAc9B,OAAQ,4BAC7B,OAAEmC,EAAM,MAAEhC,GAAUgB,EAE1B,IAAK,MAAMiB,KAASD,EAIlB,GAAIC,EAAMC,OAAS,EAAG,CAAC,IAADC,EAAAC,EAAAC,EAAAC,EACpB,MAAMxC,EAAKmC,EAAM,GACXlC,EAAKkC,EAAM,GACXM,EAAMhB,EAAIiB,oBAAoB1C,EAAG2C,UAAY3C,EAAG2C,QAChDC,EAAMnB,EAAIiB,oBAAoBzC,EAAG0C,UAAY1C,EAAG0C,QAChDE,EAAoD,QAAjDR,EAAGhB,EAAKyB,OAAO,CAAEH,QAASF,EAAKM,MAAO/C,EAAGS,eAAQ,IAAA4B,OAAA,EAA9CA,EAAgDW,SACtDC,EAAkD,QAA/CX,EAAGjB,EAAKyB,OAAO,CAAEH,QAASF,EAAKM,MAAO/C,EAAGY,aAAM,IAAA0B,OAAA,EAA5CA,EAA8CU,SACpDE,EAAoD,QAAjDX,EAAGlB,EAAKyB,OAAO,CAAEH,QAASC,EAAKG,MAAO9C,EAAGQ,eAAQ,IAAA8B,OAAA,EAA9CA,EAAgDS,SACtDG,EAAkD,QAA/CX,EAAGnB,EAAKyB,OAAO,CAAEH,QAASC,EAAKG,MAAO9C,EAAGW,aAAM,IAAA4B,OAAA,EAA5CA,EAA8CQ,SAE1D,IAAII,EAAW,EAEf,QACUC,IAARR,QACQQ,IAARJ,QACQI,IAARH,QACQG,IAARF,EACA,CACA,GAAInD,EAAG2C,UAAY1C,EAAG0C,QAAS,CAC7B,MAAMrC,EAAIC,KAAKC,IAAIR,EAAGS,MAAOR,EAAGQ,OAC1BC,EAAIH,KAAKI,IAAIX,EAAGY,IAAKX,EAAGW,KAC9BwC,EAAW7C,KAAKQ,IAAIL,EAAIJ,EAC1B,CACAwB,EAAOwB,KAAK,CACVT,MACAI,MACAC,MACAC,MACAnD,KACAC,KACAmD,YAEJ,CACF,MAAO,GAAInC,EAAKsC,eAAgB,CAAC,IAADC,EAAAC,EAC9B,MAAMzD,EAAKmC,EAAM,GAEXM,EAAMhB,EAAIiB,oBAAoB1C,EAAG2C,UAAY3C,EAAG2C,QAChDE,EAAoD,QAAjDW,EAAGnC,EAAKyB,OAAO,CAAEH,QAASF,EAAKM,MAAO/C,EAAGS,eAAQ,IAAA+C,OAAA,EAA9CA,EAAgDR,SACtDC,EAAkD,QAA/CQ,EAAGpC,EAAKyB,OAAO,CAAEH,QAASF,EAAKM,MAAO/C,EAAGY,aAAM,IAAA6C,OAAA,EAA5CA,EAA8CT,SAC1D,QAAYK,IAARR,QAA6BQ,IAARJ,EAAmB,CAC1C,MAAMS,EAAKnD,KAAKI,IAAIsC,EAAMJ,EAAK,GAC/B7D,EAAY6D,EAAMxB,EAAK2B,SAAU,EAAGU,EAAI3B,EAAe1C,EAAK,QAC5DI,EAAcoD,EAAMxB,EAAK2B,SAAU,EAAGU,EAAI3B,EAAe1C,EAAK,OAChE,CACF,CAGF,MAAMsE,EAAOpD,KAAKqD,KAAIjD,EAAAA,EAAAA,KAAImB,EAAO+B,KAAIC,GAAKA,EAAEV,aACtCW,EAAOxD,KAAKI,IAAIJ,KAAKqD,KAAIpD,EAAAA,EAAAA,KAAIsB,EAAO+B,KAAIC,GAAKA,EAAEV,aAAc,EAAG,GAChEY,GAAU/C,EAAK7B,OAAS,KAAOuE,EAAOI,GAC5C,IAAK,MAAM,IAAEd,EAAG,IAAEJ,EAAG,IAAEM,EAAG,IAAED,EAAG,SAAEE,EAAQ,GAAEpD,EAAE,GAAEC,KAAQ6B,EAAQ,CAC7D,MAAM4B,EAAKnD,KAAKI,IAAIsC,EAAMJ,EAAK,GACzBoB,EAAK1D,KAAKI,IAAIwC,EAAMD,EAAK,IACxBgB,EAAMC,GAAUtE,EAAe,CAAEE,OAAMC,KAAIC,KAAIC,WAAY,GAC5DkE,GAAO7D,KAAKqD,IAAIR,GAAYW,GAAQC,EACpCK,EAAatC,EAAgB,EAAI,GACjCuC,EAAIpB,EAAMD,EAChBjE,EAAYiE,EAAM5B,EAAK2B,SAAUoB,EAAMC,EAAYC,EAAG,EAAGjF,EAAK,SAC9DI,EAAcoD,EAAMxB,EAAK2B,SAAUoB,EAAKV,EAAI3B,EAAe1C,EAAK8E,GAChE1E,EAAcyD,EAAM7B,EAAK2B,SAAUoB,EAAKH,EAAIlC,EAAe1C,EAAK8E,GAChEnF,EAAY6D,EAAMxB,EAAK2B,SAAUoB,EAAKV,EAAI3B,EAAe1C,EAAK6E,GAC9DlF,EAAYkE,EAAM7B,EAAK2B,SAAUoB,EAAKH,EAAIlC,EAAe1C,EAAK6E,EAChE,CACF,CC/EIK,CAAe,CAAEtD,OAAMI,OAAMI,MAAKpC,MAAK6B,cCnBpC,SAA2BU,GAY9B,IAZ+B,IACjCvC,EAAG,KACH4B,EAAI,UACJC,EAAS,KACTG,EAAI,IACJI,GAODG,EACC,MAAM4C,EAAsB,GACtBC,EAAkB,IAClB,OAAEvC,GAAWhB,GACb,OAAE9B,GAAW6B,EACbc,GAAgBC,EAAAA,EAAAA,SAAQf,EAAM,iBAIpC,IAAK,MAAMkB,KAASD,EAAQ,CAC1B,IAAIwC,EAAOC,OAAOC,UACdC,EAAOF,OAAOG,UAClB,IAAK,MAAMC,KAAO5C,EAAO,CAAC,IAADE,EAAAC,EACvB,MAAMK,EAAUlB,EAAIiB,oBAAoBqC,EAAIpC,UAAYoC,EAAIpC,QACtDqC,EAA+C,QAA7C3C,EAAGhB,EAAKyB,OAAO,CAAEH,UAASI,MAAOgC,EAAItE,eAAQ,IAAA4B,OAAA,EAA1CA,EAA4CW,SACjDiC,EAA6C,QAA3C3C,EAAGjB,EAAKyB,OAAO,CAAEH,UAASI,MAAOgC,EAAInE,aAAM,IAAA0B,OAAA,EAAxCA,EAA0CU,cAC1CK,IAAP2B,QAA2B3B,IAAP4B,IACtBP,EAAOnE,KAAKC,IAAIkE,EAAMM,GACtBH,EAAOtE,KAAKI,IAAIkE,EAAMI,GAE1B,CACA,MAAM7B,EAAW7C,KAAKQ,IAAI8D,EAAOH,GACjCF,EAAUlB,KAAKF,GACfqB,EAAMnB,KAAKoB,EACb,CAEA,MAAMf,EAAOpD,KAAKqD,KAAIjD,EAAAA,EAAAA,KAAI6D,IACpBT,EAAOxD,KAAKI,IAAIJ,KAAKqD,KAAIpD,EAAAA,EAAAA,KAAIgE,IAAc,EAAG,GAC9CR,GAAU5E,EAAS,KAAOuE,EAAOI,GACjCM,EAAatC,EAAgB,EAAI,GAGvC,IAAK,IAAImD,EAAI,EAAGA,EAAIhD,EAAOE,OAAQ8C,IAAK,CACtC,MAAM/C,EAAQD,EAAOgD,GACfZ,EAAIE,EAAUU,GACdd,GAAO7D,KAAKqD,IAAIU,GAAKP,GAAQC,EAEnChF,EADYyF,EAAMS,GACA7D,EAAK2B,SAAUoB,EAAMC,EAAYC,EAAG,EAAGjF,EAAK,SAC9D,MAAM8F,EAAKhD,EAAM,GACjB,IAAIiD,EAGI,IAADC,EAFP,GAAiB,KAAXF,EAAGG,MAIPF,EAAwB,OADP,QAARC,EAAGF,EAAGI,UAAE,IAAAF,OAAA,EAALA,EAAOG,MAAM,KAAK,GAAGA,MAAM,KAAK,KACb,EAAI,OAHnCJ,EAAgBD,EAAGM,OAKrB,IAAK,MAAMzF,KAAMmC,EAAO,CAAC,IAADI,EAAAC,EACtB,MAAMkD,EAAKjE,EAAIiB,oBAAoB1C,EAAG2C,UAAY3C,EAAG2C,QAC/CqC,EAAkD,QAAhDzC,EAAGlB,EAAKyB,OAAO,CAAEH,QAAS+C,EAAI3C,MAAO/C,EAAGS,eAAQ,IAAA8B,OAAA,EAA7CA,EAA+CS,SACpDiC,EAAgD,QAA9CzC,EAAGnB,EAAKyB,OAAO,CAAEH,QAAS+C,EAAI3C,MAAO/C,EAAGY,aAAM,IAAA4B,OAAA,EAA3CA,EAA6CQ,SACxD,QAAWK,IAAP2B,QAA2B3B,IAAP4B,EAAkB,CACxC,MAAMX,EAAI/D,KAAKI,IAAIsE,EAAKD,EAAI,GACtBW,EAAIX,EAAK3D,EAAK2B,SAEdc,GACiB,IAFC9D,EAAGyF,OAASL,EAET,mBAAqB,mBAChD3F,EAAckG,EAAGvB,EAAKE,EAAGvC,EAAe1C,EAAKK,EAAAA,GAAYoE,IACzD9E,EAAY2G,EAAGvB,EAAKE,EAAGvC,EAAe1C,EAAKC,EAAAA,GAAUwE,GACvD,CACF,CACF,CACF,CDpDI8B,CAAmB,CAAE3E,OAAMI,OAAMI,MAAKpC,MAAK6B,aAE/C,C,kBEhCO,SAASS,EAAekE,GAC7B,IAAK,MAAMC,KAAKD,EAAS3D,OAAO6D,SAC9B,GAAiB,EAAbD,EAAE,GAAGR,MACP,OAAO,EAGX,OAAO,CACT,C","sources":["../../../plugins/alignments/src/LinearReadCloudDisplay/util.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawPairChains.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawFeats.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawLongReadChains.ts","../../../plugins/alignments/src/shared/util.ts"],"sourcesContent":["// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  fillColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (fillColor) {\n    ctx.fillStyle = fillColor\n  }\n\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function strokeRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  strokeColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (strokeColor) {\n    ctx.strokeStyle = strokeColor\n  }\n  ctx.strokeRect(x, y, width, height)\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\n\nimport { ChainData, ChainStats, ReducedFeature } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillRectCtx, strokeRectCtx } from './util'\nimport {\n  getPairedInsertSizeAndOrientationColor,\n  getPairedInsertSizeColor,\n  getPairedOrientationColor,\n} from '../shared/color'\n\ninterface ChainCoord {\n  distance: number\n  r1s: number\n  r1e: number\n  r2s: number\n  r2e: number\n  v0: ReducedFeature\n  v1: ReducedFeature\n}\n\nexport function drawPairChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const coords: ChainCoord[] = []\n  const featureHeight = getConf(self, 'featureHeight')\n  const type = self.colorBy?.type || 'insertSizeAndOrientation'\n  const { chains, stats } = chainData\n\n  for (const chain of chains) {\n    // if we're looking at a paired read (flag 1) then assume it is just\n    // two reads (some small cases may defy this assumption such as\n    // secondary alignments but this may be uncommon)\n    if (chain.length > 1) {\n      const v0 = chain[0]\n      const v1 = chain[1]\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const ra2 = asm.getCanonicalRefName(v1.refName) || v1.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      const r2s = view.bpToPx({ refName: ra2, coord: v1.start })?.offsetPx\n      const r2e = view.bpToPx({ refName: ra2, coord: v1.end })?.offsetPx\n\n      let distance = 0\n\n      if (\n        r1s !== undefined &&\n        r1e !== undefined &&\n        r2s !== undefined &&\n        r2e !== undefined\n      ) {\n        if (v0.refName === v1.refName) {\n          const s = Math.min(v0.start, v1.start)\n          const e = Math.max(v0.end, v1.end)\n          distance = Math.abs(e - s)\n        }\n        coords.push({\n          r1s,\n          r1e,\n          r2s,\n          r2e,\n          v0,\n          v1,\n          distance,\n        })\n      }\n    } else if (self.drawSingletons) {\n      const v0 = chain[0]\n\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      if (r1s !== undefined && r1e !== undefined) {\n        const w1 = Math.max(r1e - r1s, 2)\n        fillRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#f00')\n        strokeRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#a00')\n      }\n    }\n  }\n\n  const maxD = Math.log(max(coords.map(c => c.distance)))\n  const minD = Math.max(Math.log(min(coords.map(c => c.distance))) - 1, 0)\n  const scaler = (self.height - 20) / (maxD - minD)\n  for (const { r1e, r1s, r2e, r2s, distance, v0, v1 } of coords) {\n    const w1 = Math.max(r1e - r1s, 2)\n    const w2 = Math.max(r2e - r2s, 2)\n    const [fill, stroke] = getPairedColor({ type, v0, v1, stats }) || []\n    const top = (Math.log(distance) - minD) * scaler\n    const halfHeight = featureHeight / 2 - 0.5\n    const w = r2s - r1e\n    fillRectCtx(r1e - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    strokeRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, stroke)\n    strokeRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, stroke)\n    fillRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, fill)\n    fillRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, fill)\n  }\n}\n\nexport function getPairedColor({\n  type,\n  v0,\n  v1,\n  stats,\n}: {\n  type: string\n  v0: ReducedFeature\n  v1: ReducedFeature\n  stats?: ChainStats\n}): readonly [string, string] | undefined {\n  if (type === 'insertSizeAndOrientation') {\n    return getPairedInsertSizeAndOrientationColor(v0, v1, stats)\n  } else if (type === 'orientation') {\n    return getPairedOrientationColor(v0)\n  } else if (type === 'insertSize') {\n    return getPairedInsertSizeColor(v0, v1, stats)\n  } else if (type === 'gradient') {\n    const s = Math.min(v0.start, v1.start)\n    const e = Math.max(v0.end, v1.end)\n    return [\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,50%)`,\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,30%)`,\n    ] as const\n  }\n  return undefined\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { LinearReadCloudDisplayModel } from './model'\nimport { hasPairedReads } from '../shared/util'\nimport { drawPairChains } from './drawPairChains'\nimport { drawLongReadChains } from './drawLongReadChains'\n\ntype LGV = LinearGenomeViewModel\n\nexport function drawFeats(\n  self: LinearReadCloudDisplayModel,\n  ctx: CanvasRenderingContext2D,\n) {\n  const { chainData } = self\n  if (!chainData) {\n    return\n  }\n  const { assemblyManager } = getSession(self)\n  const view = getContainingView(self) as LGV\n  const assemblyName = view.assemblyNames[0]\n  const asm = assemblyManager.get(assemblyName)\n  if (!asm) {\n    return\n  }\n\n  const hasPaired = hasPairedReads(chainData)\n\n  if (hasPaired) {\n    drawPairChains({ self, view, asm, ctx, chainData })\n  } else {\n    drawLongReadChains({ self, view, asm, ctx, chainData })\n  }\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { ChainData } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillColor, strokeColor } from '../shared/color'\nimport { fillRectCtx, strokeRectCtx } from './util'\n\nexport function drawLongReadChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const distances: number[] = []\n  const minXs: number[] = []\n  const { chains } = chainData\n  const { height } = self\n  const featureHeight = getConf(self, 'featureHeight')\n\n  // get bounds on the 'distances' (pixel span that a particular split long\n  // read 'chain' would have in view)\n  for (const chain of chains) {\n    let minX = Number.MAX_VALUE\n    let maxX = Number.MIN_VALUE\n    for (const elt of chain) {\n      const refName = asm.getCanonicalRefName(elt.refName) || elt.refName\n      const rs = view.bpToPx({ refName, coord: elt.start })?.offsetPx\n      const re = view.bpToPx({ refName, coord: elt.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        minX = Math.min(minX, rs)\n        maxX = Math.max(maxX, re)\n      }\n    }\n    const distance = Math.abs(maxX - minX)\n    distances.push(distance)\n    minXs.push(minX)\n  }\n\n  const maxD = Math.log(max(distances))\n  const minD = Math.max(Math.log(min(distances)) - 1, 0)\n  const scaler = (height - 20) / (maxD - minD)\n  const halfHeight = featureHeight / 2 - 0.5\n\n  // draw split long read 'chains' as connected entities\n  for (let i = 0; i < chains.length; i++) {\n    const chain = chains[i]\n    const w = distances[i]\n    const top = (Math.log(w) - minD) * scaler\n    const min = minXs[i]\n    fillRectCtx(min - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    const c1 = chain[0]\n    let primaryStrand: undefined | number\n    if (!(c1.flags & 2048)) {\n      primaryStrand = c1.strand\n    } else {\n      const res = c1.SA?.split(';')[0].split(',')[2]\n      primaryStrand = res === '-' ? -1 : 1\n    }\n    for (const v0 of chain) {\n      const ra = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const rs = view.bpToPx({ refName: ra, coord: v0.start })?.offsetPx\n      const re = view.bpToPx({ refName: ra, coord: v0.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        const w = Math.max(re - rs, 2)\n        const l = rs - view.offsetPx\n        const effectiveStrand = v0.strand * primaryStrand\n        const c =\n          effectiveStrand === -1 ? 'color_rev_strand' : 'color_fwd_strand'\n        strokeRectCtx(l, top, w, featureHeight, ctx, strokeColor[c])\n        fillRectCtx(l, top, w, featureHeight, ctx, fillColor[c])\n      }\n    }\n  }\n}\n","import { ChainData } from './fetchChains'\n\nexport function hasPairedReads(features: ChainData) {\n  for (const f of features.chains.values()) {\n    if (f[0].flags & 1) {\n      return true\n    }\n  }\n  return false\n}\n"],"names":["fillRectCtx","x","y","width","height","ctx","fillColor","fillStyle","fillRect","strokeRectCtx","strokeColor","strokeStyle","strokeRect","getPairedColor","_ref2","type","v0","v1","stats","getPairedInsertSizeAndOrientationColor","getPairedOrientationColor","getPairedInsertSizeColor","s","Math","min","start","e","max","end","concat","log10","abs","drawFeats","self","chainData","assemblyManager","getSession","view","getContainingView","assemblyName","assemblyNames","asm","get","hasPairedReads","_ref","_self$colorBy","coords","featureHeight","getConf","colorBy","chains","chain","length","_view$bpToPx","_view$bpToPx2","_view$bpToPx3","_view$bpToPx4","ra1","getCanonicalRefName","refName","ra2","r1s","bpToPx","coord","offsetPx","r1e","r2s","r2e","distance","undefined","push","drawSingletons","_view$bpToPx5","_view$bpToPx6","w1","maxD","log","map","c","minD","scaler","w2","fill","stroke","top","halfHeight","w","drawPairChains","distances","minXs","minX","Number","MAX_VALUE","maxX","MIN_VALUE","elt","rs","re","i","c1","primaryStrand","_c1$SA","flags","SA","split","strand","ra","l","drawLongReadChains","features","f","values"],"sourceRoot":""}