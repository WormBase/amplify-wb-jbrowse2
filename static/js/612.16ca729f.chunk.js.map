{"version":3,"file":"static/js/612.16ca729f.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/util.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureSuppAligns.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureFlags.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"sourcesContent":["import { getSession } from '@jbrowse/core/util'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\nexport function getTag(\n  tag: string,\n  feat: {\n    tags?: Record<string, unknown>\n    [key: string]: unknown\n  },\n) {\n  return feat.tags?.[tag] || feat[tag]\n}\n\nexport async function navToLoc(locString: string, model: IAnyStateTreeNode) {\n  const session = getSession(model)\n  const { view } = model\n  try {\n    if (view) {\n      await view.navToLocString(locString)\n    } else {\n      throw new Error('No view associated with this view anymore')\n    }\n  } catch (e) {\n    console.error(e)\n    session.notify(`${e}`)\n  }\n}\n","import React from 'react'\nimport { Typography, Link } from '@mui/material'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { getLengthOnRef } from '../MismatchParser'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\nimport { navToLoc } from './util'\n\nexport default function SupplementaryAlignments(props: {\n  tag: string\n  model: IAnyStateTreeNode\n}) {\n  const { tag, model } = props\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, index) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart\n            const end = +saStart + saLength\n            const locString = `${saRef}:${Math.max(1, start - extra)}-${\n              end + extra\n            }`\n            const displayStart = start.toLocaleString('en-US')\n            const displayEnd = end.toLocaleString('en-US')\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`\n            return (\n              <li key={`${locString}-${index}`}>\n                <Link\n                  onClick={async event => {\n                    event.preventDefault()\n\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    navToLoc(locString, model)\n                  }}\n                  href=\"#\"\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </BaseCard>\n  )\n}\n","import React from 'react'\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport SimpleField from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField'\n\nconst useStyles = makeStyles()({\n  compact: {\n    paddingRight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nexport default function AlignmentFlags(props: { feature: { flags: number } }) {\n  const { classes } = useStyles()\n  const { feature } = props\n  const { flags } = feature\n\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <SimpleField name=\"Flag\" value={flags} />\n      <FormGroup>\n        {flagNames.map((name, idx) => {\n          const val = flags & (1 << idx)\n          const key = `${name}_${val}`\n          return (\n            <FormControlLabel\n              key={key}\n              control={\n                <Checkbox\n                  className={classes.compact}\n                  checked={Boolean(val)}\n                  name={name}\n                  readOnly\n                />\n              }\n              label={name}\n            />\n          )\n        })}\n      </FormGroup>\n    </BaseCard>\n  )\n}\n","import React, { useState } from 'react'\nimport { Link, Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport copy from 'copy-to-clipboard'\nimport clone from 'clone'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// locals\nimport { getTag, navToLoc } from './util'\nimport SupplementaryAlignments from './AlignmentsFeatureSuppAligns'\nimport AlignmentFlags from './AlignmentsFeatureFlags'\n\nconst omit = ['clipPos', 'flags']\n\nconst tags = {\n  AM: 'The smallest template-independent mapping quality in the template',\n  AS: 'Alignment score generated by aligner',\n  BC: 'Barcode sequence identifying the sample',\n  BQ: 'Offset to base alignment quality (BAQ)',\n  BZ: 'Phred quality of the unique molecular barcode bases in the {OX} tag',\n  CB: 'Cell identifier',\n  CC: 'Reference name of the next hit',\n  CM: 'Edit distance between the color sequence and the color reference (see also {NM})',\n  CO: 'Free-text comments',\n  CP: 'Leftmost coordinate of the next hit',\n  CQ: 'Color read base qualities',\n  CR: 'Cellular barcode sequence bases (uncorrected)',\n  CS: 'Color read sequence',\n  CT: 'Complete read annotation tag, used for consensus annotation dummy features',\n  CY: 'Phred quality of the cellular barcode sequence in the {CR} tag',\n  E2: 'The 2nd most likely base calls',\n  FI: 'The index of segment in the template',\n  FS: 'Segment suffix',\n  FZ: 'Flow signal intensities',\n  GC: 'Reserved for backwards compatibility reasons',\n  GQ: 'Reserved for backwards compatibility reasons',\n  GS: 'Reserved for backwards compatibility reasons',\n  H0: 'Number of perfect hits',\n  H1: 'Number of 1-difference hits (see also {NM})',\n  H2: 'Number of 2-difference hits',\n  HI: 'Query hit index',\n  IH: 'Query hit total count',\n  LB: 'Library',\n  MC: 'CIGAR string for mate/next segment',\n  MD: 'String encoding mismatched and deleted reference bases',\n  MF: 'Reserved for backwards compatibility reasons',\n  MI: 'Molecular identifier; a string that uniquely identifies the molecule from which the record was derived',\n  ML: 'Base modification probabilities',\n  MM: 'Base modifications / methylation ',\n  MQ: 'Mapping quality of the mate/next segment',\n  NH: 'Number of reported alignments that contain the query in the current record',\n  NM: 'Edit distance to the reference',\n  OA: 'Original alignment',\n  OC: 'Original CIGAR (deprecated; use {OA} instead)',\n  OP: 'Original mapping position (deprecated; use {OA} instead)',\n  OQ: 'Original base quality',\n  OX: 'Original unique molecular barcode bases',\n  PG: 'Program',\n  PQ: 'Phred likelihood of the template',\n  PT: 'Read annotations for parts of the padded read sequence',\n  PU: 'Platform unit',\n  Q2: 'Phred quality of the mate/next segment sequence in the {R2} tag',\n  QT: 'Phred quality of the sample barcode sequence in the {BC} tag',\n  QX: 'Quality score of the unique molecular identifier in the {RX} tag',\n  R2: 'Sequence of the mate/next segment in the template',\n  RG: 'Read group',\n  RT: 'Reserved for backwards compatibility reasons',\n  RX: 'Sequence bases of the (possibly corrected) unique molecular identifier',\n  S2: 'Reserved for backwards compatibility reasons',\n  SA: 'Other canonical alignments in a chimeric alignment',\n  SM: 'Template-independent mapping quality',\n  SQ: 'Reserved for backwards compatibility reasons',\n  TC: 'The number of segments in the template',\n  TS: 'Transcript strand',\n  U2: 'Phred probability of the 2nd call being wrong conditional on the best being wrong',\n  UQ: 'Phred likelihood of the segment, conditional on the mapping being correct',\n}\n\nfunction Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => setCopied(false), 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button type=\"button\" onClick={() => setShow(val => !val)}>\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n\nfunction PairLink({\n  locString,\n  model,\n}: {\n  locString: string\n  model: IAnyStateTreeNode\n}) {\n  return (\n    <Link\n      onClick={event => {\n        event.preventDefault()\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        navToLoc(locString, model)\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n\nconst AlignmentsFeatureDetails = observer(function (props: {\n  model: IAnyStateTreeNode\n}) {\n  const { model } = props\n  const feat = clone(model.featureData)\n  const SA = getTag('SA', feat) as string\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        omit={omit}\n        // @ts-expect-error\n        descriptions={{ ...tags, tags }}\n        feature={feat}\n        formatter={(value, key) =>\n          key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }\n      />\n      {SA ? <SupplementaryAlignments model={model} tag={SA} /> : null}\n      {feat.flags !== undefined ? (\n        <AlignmentFlags feature={feat} {...props} />\n      ) : null}\n    </Paper>\n  )\n})\n\nexport default AlignmentsFeatureDetails\n"],"names":["async","navToLoc","locString","model","session","getSession","view","Error","navToLocString","e","console","error","notify","SupplementaryAlignments","props","tag","React","BaseCard","_extends","title","Typography","split","filter","SA","map","index","saRef","saStart","saStrand","saCigar","saLength","getLengthOnRef","extra","Math","floor","start","end","max","displayString","toLocaleString","key","Link","onClick","event","preventDefault","href","useStyles","makeStyles","compact","paddingRight","paddingTop","paddingBottom","flagNames","AlignmentFlags","classes","feature","flags","SimpleField","name","value","FormGroup","idx","val","FormControlLabel","control","Checkbox","className","checked","Boolean","readOnly","label","omit","tags","AM","AS","BC","BQ","BZ","CB","CC","CM","CO","CP","CQ","CR","CS","CT","CY","E2","FI","FS","FZ","GC","GQ","GS","H0","H1","H2","HI","IH","LB","MC","MD","MF","MI","ML","MM","MQ","NH","NM","OA","OC","OP","OQ","OX","PG","PQ","PT","PU","Q2","QT","QX","R2","RG","RT","RX","S2","SM","SQ","TC","TS","U2","UQ","Formatter","show","setShow","useState","copied","setCopied","display","String","length","type","copy","setTimeout","slice","PairLink","observer","feat","clone","featureData","getTag","Paper","FeatureDetails","descriptions","formatter","undefined"],"sourceRoot":""}