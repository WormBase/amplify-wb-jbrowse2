{"version":3,"file":"static/js/847.dc35fbb0.chunk.js","mappings":"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","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/BedImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts"],"sourcesContent":["import { ParseOptions, parseTsvBuffer } from './ImportUtils'\n\nconst browserBytes = 'browser '.split('').map(c => c.charCodeAt(0))\nconst trackBytes = 'track '.split('').map(c => c.charCodeAt(0))\nconst commentBytes = '#'.split('').map(c => c.charCodeAt(0))\n\nfunction bytesAreFoundAt(position: number, buffer: Buffer, bytes: number[]) {\n  let i = 0\n  for (; i < bytes.length; i += 1) {\n    if (buffer[position + i] !== bytes[i]) {\n      return false\n    }\n  }\n  return true\n}\nexport function removeBedHeaders(buffer: Buffer) {\n  // slice off the first lines of the buffer if it starts with one or more\n  // header lines\n  let i = 0\n  for (; i < buffer.length; i += 1) {\n    if (\n      bytesAreFoundAt(i, buffer, browserBytes) ||\n      bytesAreFoundAt(i, buffer, trackBytes) ||\n      bytesAreFoundAt(i, buffer, commentBytes)\n    ) {\n      // consume up to the next newline\n      do {\n        i += 1\n      } while (buffer[i] !== 10)\n    } else {\n      // end of headers, return\n      break\n    }\n  }\n  if (i) {\n    return buffer.slice(i)\n  }\n  return buffer\n}\n\nexport async function parseBedBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  const bedColumns = [\n    { name: 'chrom', dataType: { type: 'LocRef' } },\n    { name: 'chromStart', dataType: { type: 'LocStart' } },\n    { name: 'chromEnd', dataType: { type: 'LocEnd' } },\n    { name: 'name', dataType: { type: 'Text' } },\n    { name: 'score', dataType: { type: 'Number' } },\n    { name: 'strand', dataType: { type: 'Text' } },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n  data.assemblyName = options.selectedAssemblyName\n\n  data.columnDisplayOrder.push(data.columnDisplayOrder.length)\n  data.columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.cells[0].text+':'+row.cells[1].text+'..'+row.cells[2].text,\\n\n    extendedData: {refName: row.cells.ref.text, start: parseInt(row.cells.start.text,10), end: parseInt(row.cells.end.text,10)}}`,\n  })\n  return data\n}\n\nexport async function parseBedPEBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  interface BedColumn {\n    name: string\n    dataType: {\n      type: string\n    }\n    featureField: string[]\n  }\n  const bedColumns: BedColumn[] = [\n    { name: 'chrom1', dataType: { type: 'Text' }, featureField: ['refName'] },\n    { name: 'start1', dataType: { type: 'Number' }, featureField: ['start'] },\n    { name: 'end1', dataType: { type: 'Number' }, featureField: ['end'] },\n    {\n      name: 'chrom2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'refName'],\n    },\n    {\n      name: 'start2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'start'],\n    },\n    {\n      name: 'end2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'end'],\n    },\n    { name: 'name', dataType: { type: 'Text' }, featureField: ['name'] },\n    { name: 'score', dataType: { type: 'Number' }, featureField: ['score'] },\n    { name: 'strand1', dataType: { type: 'Text' }, featureField: ['strand'] },\n    {\n      name: 'strand2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'strand'],\n    },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const bedColumn = bedColumns[columnNumber]\n      const val =\n        bedColumn && bedColumn.dataType.type === 'Number' && text\n          ? parseFloat(text)\n          : text\n      if (bedColumn) {\n        // a predefined column\n        if (bedColumn.featureField.length === 2) {\n          if (!featureData[bedColumn.featureField[0]]) {\n            featureData[bedColumn.featureField[0]] = {}\n          }\n          featureData[bedColumn.featureField[0]][bedColumn.featureField[1]] =\n            val\n        } else {\n          featureData[bedColumn.featureField[0]] = val\n        }\n      } else {\n        // some other column\n        featureData[`column${columnNumber + 1}`] = val\n      }\n    })\n    featureData.uniqueId = `bedpe-${rowNumber}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  data.assemblyName = options.selectedAssemblyName\n\n  return data\n}\n","import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName?: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc?.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {},\n) {\n  const {\n    hasColumnNameLine = false,\n    columnNameLineNumber = 1,\n    isValidRefName = () => false,\n    selectedAssemblyName,\n  } = options\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (hasColumnNameLine && columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(columnNameLineNumber - 1, 1)\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(rowSet, columnNumber, isValidRefName)\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      for (const row of rowSet.rows) {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, isValidRefName)\n      }\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!hasColumnNameLine,\n    columns,\n    assemblyName: selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(buffer: Buffer, options?: ParseOptions) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n"],"names":["browserBytes","split","map","c","charCodeAt","trackBytes","commentBytes","bytesAreFoundAt","position","buffer","bytes","i","length","removeBedHeaders","slice","parseBedBuffer","_x","_x2","_parseBedBuffer","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","b","data","bedColumns","wrap","_context","prev","next","parseTsvBuffer","sent","name","dataType","type","columns","forEach","col","colNumber","bedColumn","hasColumnNames","assemblyName","selectedAssemblyName","columnDisplayOrder","push","unshift","isDerived","derivationFunctionText","abrupt","stop","apply","arguments","parseBedPEBuffer","_x3","_x4","_parseBedPEBuffer","_callee2","_context2","featureField","rowSet","rows","row","rowNumber","featureData","cells","_ref","columnNumber","text","val","parseFloat","concat","uniqueId","extendedData","feature","bufferToString","TextDecoder","fatal","decode","parseWith","_parseWith","csv","_args","undefined","then","module","default","_objectSpread","noheader","output","fromString","guessColumnType","isValidRefName","_parsedLoc","parsedLoc","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","_options$hasColumnNam","hasColumnNameLine","_options$columnNameLi","columnNameLineNumber","_options$isValidRefNa","maxCols","isLoaded","id","String","columnNames","_rowSet$rows$splice","splice","colNamesRow","_slicedToArray","cell","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","parseCsvBuffer","_parseCsvBuffer","_x5","_parseTsvBuffer","_callee3","_context3","delimiter"],"sourceRoot":""}