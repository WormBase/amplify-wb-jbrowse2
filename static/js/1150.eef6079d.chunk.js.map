{"version":3,"file":"static/js/1150.eef6079d.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedpeAdapter/BedpeAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Region, Feature, SimpleFeature } from '@jbrowse/core/util'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function featureData(\n  line: string,\n  uniqueId: string,\n  flip: boolean,\n  names?: string[],\n) {\n  const l = line.split('\\t')\n  const ref1 = l[flip ? 3 : 0]\n  const start1 = +l[flip ? 4 : 1]\n  const end1 = +l[flip ? 5 : 2]\n  const ref2 = +l[!flip ? 3 : 0]\n  const start2 = +l[!flip ? 4 : 1]\n  const end2 = +l[!flip ? 5 : 2]\n  const name = l[6]\n  const score = +l[7]\n  const strand1 = parseStrand(l[8])\n  const strand2 = parseStrand(l[9])\n  const extra = l.slice(9)\n  const rest = names\n    ? Object.fromEntries(names.slice(9).map((n, idx) => [n, extra[idx]]))\n    : extra\n\n  return new SimpleFeature({\n    start: start1,\n    end: end1,\n    refName: ref1,\n    strand: strand1,\n    name,\n    ...rest,\n    score,\n    uniqueId,\n    mate: { refName: ref2, start: start2, end: end2, strand: strand2 },\n  })\n}\n\nfunction parseStrand(strand: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else if (strand === '.') {\n    return 0\n  } else {\n    return undefined\n  }\n}\n\nexport default class BedpeAdapter extends BaseFeatureDataAdapter {\n  protected bedpeFeatures?: Promise<{\n    header: string\n    feats1: Record<string, string[] | undefined>\n    feats2: Record<string, string[] | undefined>\n    columnNames: string[]\n  }>\n\n  protected intervalTrees: Record<\n    string,\n    Promise<IntervalTree | undefined> | undefined\n  > = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedpeLocation')\n    const buf = await openLocation(bedLoc, pm).readFile(opts)\n    const buffer = isGzip(buf) ? await unzip(buf) : buf\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const feats1 = {} as Record<string, string[] | undefined>\n    const feats2 = {} as Record<string, string[] | undefined>\n    for (; i < lines.length; i++) {\n      const line = lines[i]\n      const cols = line.split('\\t')\n      const r1 = cols[0]\n      const r2 = cols[3]\n      if (!feats1[r1]) {\n        feats1[r1] = []\n      }\n      if (!feats2[r2]) {\n        feats2[r2] = []\n      }\n\n      feats1[r1]!.push(line)\n\n      feats2[r2]!.push(line)\n    }\n    const columnNames = this.getConf('columnNames')\n\n    return {\n      header,\n      feats1,\n      feats2,\n      columnNames,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.bedpeFeatures) {\n      this.bedpeFeatures = this.loadDataP(opts).catch(e => {\n        this.bedpeFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedpeFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { feats1, feats2 } = await this.loadData(opts)\n    return [...new Set([...Object.keys(feats1), ...Object.keys(feats2)])]\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureTreeP(refName: string) {\n    const { feats1, feats2 } = await this.loadData()\n    const lines1 = feats1[refName]\n    const lines2 = feats2[refName]\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    const ret1 = lines1?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, false, names)\n    })\n    const ret2 = lines2?.map((f, i) => {\n      const uniqueId = `${this.id}-${refName}-${i}`\n      return featureData(f, uniqueId, true, names)\n    })\n\n    if (ret1) {\n      for (const obj of ret1) {\n        intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n      }\n    }\n\n    if (ret2) {\n      for (const obj of ret2) {\n        intervalTree.insert([obj.get('start'), obj.get('end')], obj)\n      }\n    }\n\n    return intervalTree\n  }\n\n  private async loadFeatureTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureTreeP(refName).catch(e => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureTree(refName)\n      intervalTree?.search([start, end]).forEach(f => observer.next(f))\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["isGzip","buf","featureData","line","uniqueId","flip","names","l","split","ref1","start1","end1","ref2","start2","end2","name","score","strand1","parseStrand","strand2","extra","slice","rest","Object","fromEntries","map","n","idx","SimpleFeature","_objectSpread","start","end","refName","strand","mate","BedpeAdapter","_BaseFeatureDataAdapt","_loadDataP","_loadData","_getRefNames","_getHeader","_getNames","_loadFeatureTreeP","_loadFeatureTree","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","bedpeFeatures","intervalTrees","_createClass","key","value","_asyncToGenerator","_regeneratorRuntime","mark","_callee","opts","pm","bedLoc","buffer","data","lines","headerLines","i","header","feats1","feats2","cols","r1","r2","columnNames","_args","wrap","_context","prev","next","undefined","this","pluginManager","getConf","openLocation","readFile","sent","unzip","t0","Error","TextDecoder","fatal","decode","filter","f","startsWith","push","join","abrupt","stop","_callee2","_this2","_args2","_context2","loadDataP","catch","e","_callee3","_yield$this$loadData","_args3","_context3","loadData","_toConsumableArray","Set","keys","_callee4","_yield$this$loadData2","_args4","_context4","_callee5","_yield$this$loadData3","defs","defline","_context5","at","includes","field","trim","_x","_callee6","_yield$this$loadData4","lines1","lines2","intervalTree","ret1","ret2","_iterator","_step","obj","_iterator2","_step2","_obj","_this3","_context6","getNames","IntervalTree","id","_createForOfIteratorHelper","s","done","insert","get","err","_x2","_callee7","_this4","_context7","loadFeatureTreeP","query","_ref","_this5","ObservableCreate","_x3","_callee8","observer","_context8","loadFeatureTree","search","forEach","complete","signal","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}