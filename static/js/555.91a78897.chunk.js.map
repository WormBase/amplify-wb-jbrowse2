{"version":3,"file":"static/js/555.91a78897.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ExportSvgDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { ExportSvgOptions } from '../model'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage('svg-' + key, val)\n}\n\nexport default function ExportSvgDlg({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  const [error, setError] = useState<unknown>()\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => setFilename(event.target.value)}\n        />\n        <br />\n\n        <TextField\n          select\n          label=\"Track label positioning\"\n          variant=\"outlined\"\n          value={trackLabels}\n          style={{ width: 150 }}\n          onChange={event => setTrackLabels(event.target.value)}\n        >\n          <MenuItem value=\"offset\">Offset</MenuItem>\n          <MenuItem value=\"overlay\">Overlay</MenuItem>\n          <MenuItem value=\"left\">Left</MenuItem>\n          <MenuItem value=\"none\">None</MenuItem>\n        </TextField>\n        <br />\n        {session.allThemes ? (\n          <TextField\n            select\n            label=\"Theme\"\n            variant=\"outlined\"\n            value={themeName}\n            onChange={event => setThemeName(event.target.value)}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => setRasterizeLayers(val => !val)}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClose()}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n                trackLabels,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["LoadingMessage","_jsxs","children","_jsx","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDlg","_ref","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","filename","setFilename","trackLabels","setTrackLabels","themeName","setThemeName","error","setError","Dialog","open","onClose","title","DialogContent","ErrorMessage","TextField","helperText","value","onChange","event","target","select","label","variant","width","MenuItem","allThemes","Object","entries","map","_ref2","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}