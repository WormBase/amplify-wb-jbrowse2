"use strict";(globalThis.webpackChunk_jbrowse_web=globalThis.webpackChunk_jbrowse_web||[]).push([[612],{90612:(e,t,n)=>{n.r(t),n.d(t,{default:()=>B});var a=n(66204),r=n(66159),i=n(86636),o=n(80846),l=n(43306),s=n.n(l),c=n(91370),d=n.n(c),m=n(41846),u=n(31211);async function p(e,t){const n=(0,u.getSession)(t),{view:a}=t;try{if(!a)throw new Error("No view associated with this view anymore");await a.navToLocString(e)}catch(e){console.error(e),n.notify(`${e}`)}}var f=n(80013),h=n(74979);function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},g.apply(this,arguments)}function b(e){const{tag:t,model:n}=e;return a.createElement(m.BaseCard,g({},e,{title:"Supplementary alignments"}),a.createElement(f.Z,null,"List of supplementary alignment locations"),a.createElement("ul",null,t.split(";").filter((e=>!!e)).map(((e,t)=>{const[i,o,l,s]=e.split(","),c=(0,h.getLengthOnRef)(s),d=Math.floor(c/5),m=+o,u=+o+c,f=`${i}:${Math.max(1,m-d)}-${u+d}`,g=`${i}:${m.toLocaleString("en-US")}-${u.toLocaleString("en-US")} (${l}) [${c}bp]`;return a.createElement("li",{key:`${f}-${t}`},a.createElement(r.Z,{onClick:async e=>{e.preventDefault(),p(f,n)},href:"#"},g))}))))}var y=n(53447),v=n(39780),C=n(70539),w=n(38684),O=n(5665);function S(){return S=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},S.apply(this,arguments)}const q=(0,w.ZL)()({compact:{paddingRight:0,paddingTop:0,paddingBottom:0}}),E=["read paired","read mapped in proper pair","read unmapped","mate unmapped","read reverse strand","mate reverse strand","first in pair","second in pair","not primary alignment","read fails platform/vendor quality checks","read is PCR or optical duplicate","supplementary alignment"];function R(e){const{classes:t}=q(),{feature:n}=e,{flags:r}=n;return a.createElement(m.BaseCard,S({},e,{title:"Flags"}),a.createElement(O.Z,{name:"Flag",value:r}),a.createElement(y.Z,null,E.map(((e,n)=>{const i=r&1<<n,o=`${e}_${i}`;return a.createElement(v.Z,{key:o,control:a.createElement(C.Z,{className:t.compact,checked:Boolean(i),name:e,readOnly:!0}),label:e})}))))}function k(){return k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},k.apply(this,arguments)}const P=["clipPos","flags"],M={AM:"The smallest template-independent mapping quality in the template",AS:"Alignment score generated by aligner",BC:"Barcode sequence identifying the sample",BQ:"Offset to base alignment quality (BAQ)",BZ:"Phred quality of the unique molecular barcode bases in the {OX} tag",CB:"Cell identifier",CC:"Reference name of the next hit",CM:"Edit distance between the color sequence and the color reference (see also {NM})",CO:"Free-text comments",CP:"Leftmost coordinate of the next hit",CQ:"Color read base qualities",CR:"Cellular barcode sequence bases (uncorrected)",CS:"Color read sequence",CT:"Complete read annotation tag, used for consensus annotation dummy features",CY:"Phred quality of the cellular barcode sequence in the {CR} tag",E2:"The 2nd most likely base calls",FI:"The index of segment in the template",FS:"Segment suffix",FZ:"Flow signal intensities",GC:"Reserved for backwards compatibility reasons",GQ:"Reserved for backwards compatibility reasons",GS:"Reserved for backwards compatibility reasons",H0:"Number of perfect hits",H1:"Number of 1-difference hits (see also {NM})",H2:"Number of 2-difference hits",HI:"Query hit index",IH:"Query hit total count",LB:"Library",MC:"CIGAR string for mate/next segment",MD:"String encoding mismatched and deleted reference bases",MF:"Reserved for backwards compatibility reasons",MI:"Molecular identifier; a string that uniquely identifies the molecule from which the record was derived",ML:"Base modification probabilities",MM:"Base modifications / methylation ",MQ:"Mapping quality of the mate/next segment",NH:"Number of reported alignments that contain the query in the current record",NM:"Edit distance to the reference",OA:"Original alignment",OC:"Original CIGAR (deprecated; use {OA} instead)",OP:"Original mapping position (deprecated; use {OA} instead)",OQ:"Original base quality",OX:"Original unique molecular barcode bases",PG:"Program",PQ:"Phred likelihood of the template",PT:"Read annotations for parts of the padded read sequence",PU:"Platform unit",Q2:"Phred quality of the mate/next segment sequence in the {R2} tag",QT:"Phred quality of the sample barcode sequence in the {BC} tag",QX:"Quality score of the unique molecular identifier in the {RX} tag",R2:"Sequence of the mate/next segment in the template",RG:"Read group",RT:"Reserved for backwards compatibility reasons",RX:"Sequence bases of the (possibly corrected) unique molecular identifier",S2:"Reserved for backwards compatibility reasons",SA:"Other canonical alignments in a chimeric alignment",SM:"Template-independent mapping quality",SQ:"Reserved for backwards compatibility reasons",TC:"The number of segments in the template",TS:"Transcript strand",U2:"Phred probability of the 2nd call being wrong conditional on the best being wrong",UQ:"Phred likelihood of the segment, conditional on the mapping being correct"};function T({value:e}){const[t,n]=(0,a.useState)(!1),[r,i]=(0,a.useState)(!1),o=String(e);return o.length>100?a.createElement(a.Fragment,null,a.createElement("button",{type:"button",onClick:()=>{s()(o),i(!0),setTimeout((()=>i(!1)),700)}},r?"Copied to clipboard":"Copy"),a.createElement("button",{type:"button",onClick:()=>n((e=>!e))},t?"Show less":"Show more"),a.createElement("div",null,t?o:`${o.slice(0,100)}...`)):a.createElement("div",null,o)}function Q({locString:e,model:t}){return a.createElement(r.Z,{onClick:n=>{n.preventDefault(),p(e,t)},href:"#"},e)}const B=(0,o.observer)((function(e){const{model:t}=e,n=d()(t.featureData),r=function(e,t){return t.tags?.SA||t.SA}(0,n);return a.createElement(i.Z,{"data-testid":"alignment-side-drawer"},a.createElement(m.FeatureDetails,k({},e,{omit:P,descriptions:{...M,tags:M},feature:n,formatter:(e,n)=>"next_segment_position"===n?a.createElement(Q,{model:t,locString:e}):a.createElement(T,{value:e})})),r?a.createElement(b,{model:t,tag:r}):null,void 0!==n.flags?a.createElement(R,k({feature:n},e)):null)}))}}]);
//# sourceMappingURL=612.16ca729f.chunk.js.map