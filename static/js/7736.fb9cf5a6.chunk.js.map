{"version":3,"file":"static/js/7736.fb9cf5a6.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/MCScanAnchorsAdapter/MCScanAnchorsAdapter.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  doesIntersect2,\n  SimpleFeature,\n  Feature,\n  Region,\n} from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { readFile, parseBed } from '../util'\n\ninterface BareFeature {\n  strand: number\n  refName: string\n  start: number\n  end: number\n  score: number\n  name: string\n}\n\ntype Row = [BareFeature, BareFeature, number, number]\n\nexport default class MCScanAnchorsAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    assemblyNames: string[]\n    feats: Row[]\n  }>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n  async setupPre(opts: BaseOptions) {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n\n    const pm = this.pluginManager\n    const bed1 = openLocation(this.getConf('bed1Location'), pm)\n    const bed2 = openLocation(this.getConf('bed2Location'), pm)\n    const mcscan = openLocation(this.getConf('mcscanAnchorsLocation'), pm)\n    const [bed1text, bed2text, mcscantext] = await Promise.all(\n      [bed1, bed2, mcscan].map(r => readFile(r, opts)),\n    )\n\n    const bed1Map = parseBed(bed1text)\n    const bed2Map = parseBed(bed2text)\n    const feats = mcscantext\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f && f !== '###')\n      .map((line, index) => {\n        const [name1, name2, score] = line.split('\\t')\n        const r1 = bed1Map.get(name1)\n        const r2 = bed2Map.get(name2)\n        if (!r1 || !r2) {\n          throw new Error(`feature not found, ${name1} ${name2} ${r1} ${r2}`)\n        }\n        return [r1, r2, +score, index] as Row\n      })\n\n    return {\n      assemblyNames,\n      feats,\n    }\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseFeatureDataAdapter filters it out)\n    return true\n  }\n\n  async getRefNames() {\n    // we cannot determine this accurately\n    return []\n  }\n\n  getFeatures(region: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyNames, feats } = await this.setup(opts)\n\n      // The index of the assembly name in the region list corresponds to\n      // the adapter in the subadapters list\n      const index = assemblyNames.indexOf(region.assemblyName)\n      if (index !== -1) {\n        const flip = index === 0\n        feats.forEach(f => {\n          const [r1, r2, score, rowNum] = f\n          const [f1, f2] = !flip ? [r2, r1] : [r1, r2]\n          if (\n            f1.refName === region.refName &&\n            doesIntersect2(region.start, region.end, f1.start, f1.end)\n          ) {\n            observer.next(\n              new SimpleFeature({\n                ...f1,\n                uniqueId: `${index}-${rowNum}`,\n                syntenyId: rowNum,\n\n                // note: strand would be -1 if the two features are on opposite\n                // strands, indicating inverted alignment\n                strand: f1.strand * f2.strand,\n                assemblyName: assemblyNames[+!flip],\n                score,\n                mate: {\n                  ...f2,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          }\n        })\n      }\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start,\n            end: +end,\n            score: +score,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.slice(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n"],"names":["MCScanAnchorsAdapter","BaseFeatureDataAdapter","constructor","arguments","setupP","setup","opts","this","setupPre","catch","e","undefined","assemblyNames","getConf","pm","pluginManager","bed1","openLocation","bed2","mcscan","bed1text","bed2text","mcscantext","Promise","all","map","r","readFile","bed1Map","parseBed","bed2Map","feats","split","filter","f","line","index","name1","name2","score","r1","get","r2","Error","concat","hasDataForRefName","getRefNames","getFeatures","region","length","ObservableCreate","async","indexOf","assemblyName","flip","forEach","rowNum","f1","f2","refName","doesIntersect2","start","end","observer","next","SimpleFeature","uniqueId","syntenyId","strand","mate","complete","freeResources","capabilities","isGzip","buf","text","Map","startsWith","name","file","buffer","TextDecoder","fatal","decode","unzip","zip","a","b","i","decoder","parseLineByLine","cb","blockStart","entries","n","slice","toString","trim","push"],"sourceRoot":""}